
/**
 * Created by foreverpinetree@gmail.com on 14-4-9.
 */
(function()
{

    var Entry = function(rootHtmlElement, staticRootHtmlElement, staticDeviceRootHtmlElement)
    {
        pinetree.rootHtmlElement = rootHtmlElement;
        pinetree.staticRootHtmlElement = staticRootHtmlElement;
        pinetree.staticDeviceRootHtmlElement = staticDeviceRootHtmlElement;

        pinetree.stage = new pinetree.Stage(rootHtmlElement, true, true);
        pinetree.staticStage = new pinetree.Stage(staticRootHtmlElement);
        pinetree.staticDeviceStage = new pinetree.Stage(staticDeviceRootHtmlElement);

        pinetree.stage.positionRef = pinetree.isDevice ? "absolute" : "fixed";
        pinetree.staticStage.positionRef = "fixed";
        pinetree.staticDeviceStage.positionRef = "absolute";

        this._frameRate = pinetree.FRAME_RATE;
        TweenMax.ticker.fps(this._frameRate);

        __defineGetterSetter(this, ["frameRate"]);
    }
    var p = Entry.prototype;

    p.start = function(mainClass)
    {
        var child = new mainClass();
        pinetree.stage.addChild(child);
    }

    p.getFrameRate = function() { return this._frameRate; }
    p.setFrameRate = function(value)
    {
        this._frameRate = value;

        pinetree.timeMachine.setFPS(this._frameRate);
        TweenMax.ticker.fps(this._frameRate);
    }

    pinetree.Entry = Entry;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-13.
 */
(function()
{
    var EventDispatcher = function()
    {
        this._listeners = {};
        this._disposeList = null;

        this.dynamicData = {};

        this._privateId = pinetree.getGlobalPrivateId();//just for debug
    };

    EventDispatcher.MAX_PRIORITY = 0xffffff;

    var p = EventDispatcher.prototype;

    p.addEventListener = function(type, listener, owner, priority)
    {
        if(!this._listeners) return;

        if(priority > EventDispatcher.MAX_PRIORITY)
        {
            trace("Warning: priority is bigger than EventDispatcher.MAX_PRIORITY, The max value is 0xffffff!");
            priority = EventDispatcher.MAX_PRIORITY;
        }

        if(!this._listeners[type])
            this._listeners[type] = [];

        var listenerObjs = this._listeners[type];
        var i = listenerObjs.length, listenerObj = null;
        while(i --)
        {
            listenerObj = listenerObjs[i];
            if(listenerObj && listenerObj.listener == listener && listenerObj.owner == owner)
            {
                return;
            }
        }
        var obj = {
            type:type,
            listener:listener,
            owner:owner || this,
            priority: priority || 0
        };
        this._listeners[type].push(obj);
        this._listeners[type].sort(this._onSortHandler);
    }

    p._onSortHandler = function(obj1, obj2)
    {
        if(obj1.priority < obj2.priority)
            return -1;
        else if(obj1.priority > obj2.priority)
            return 1;
        return 0;
    }

    p.removeEventListener = function(type, listener, owner)
    {
        if(!this._listeners) return;

        var listenerObjs = this._listeners[type];
        if(listenerObjs)
        {
            var i = listenerObjs.length, listenerObj = null;
            while(i --)
            {
                listenerObj = listenerObjs[i];
                if(listenerObj && listenerObj.listener == listener && listenerObj.owner == owner)
                {
                    listenerObjs[i] = null;
                    listenerObjs.splice(i, 1);
                    break;
                }
            }
        }
    }

    p.dispatchEvent = function(evt)
    {
        if(!this._listeners) return;
        if(!evt) return;

        var customTarget = evt.target || evt.srcElement || this;
        evt.customTarget = customTarget;

        var type = evt.type || evt.eventType;
        var listenerObjs = this._listeners[type];
        if(listenerObjs)
        {
            var i = listenerObjs.length, obj;
            while(i --)
            {
                obj = listenerObjs[i];
                if(obj)
                {
                    obj.listener.apply(obj.owner || this, arguments)
                }
                else
                {
                    listenerObjs.splice(i, 1);
                }
            }
        }
    }

    p.dispatchWith = function(evtName)
    {
        var evt = pinetree.getEvent(evtName);
        this.dispatchEvent(evt);
    }

    p.hasEventListener = function(type)
    {
        if(!this._listeners) return false;
        var result = this._listeners[type] && this._listeners[type].length > 0 ? true : false;
        return result;
    }

    p.registerAutoDispose = function(obj)
    {
        if(!this._disposeList)
        {
            this._disposeList = [];
        }

        this._disposeList.push(obj);
    }

    p.dispose = function()
    {
        var listenerObjs, i = 0, obj;
        if(this._listeners)
        {
            for (var type in this._listeners)
            {
                listenerObjs = this._listeners[type];
                if(listenerObjs)
                {
                    i = listenerObjs.length;
                    while(i --)
                    {
                        listenerObjs[i] = null;
                        listenerObjs.splice(i, 1);
                    }
                }
                this._listeners[type] = null;
                delete this._listeners[type];
            }
        }

        if(this._disposeList)
        {
            i = this._disposeList.length;
            while(i --)
            {
                obj = this._disposeList[i];
                if(obj)
                {
                    obj.dispose();
                }

                this._disposeList[i] = null;
                delete this._disposeList[i];
            }
        }

        if(this.dynamicData)
        {
            for(var key in this.dynamicData)
            {
                this.dynamicData[key] = null;
                delete this.dynamicData[key];
            }
            this.dynamicData = null;
        }

        this._listeners = null;
        this._disposeList = null;
    }

    p.toString = function()
    {
        return "[Object EventDispatcher]";
    }

    pinetree.EventDispatcher = EventDispatcher;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-12.
 */
(function(){

    var Signal = function()
    {
        this._listeners = [];
    }
    var p = Signal.prototype;

    p.add = function(owner, handler)
    {
        if(!this._listeners) return;
        this._listeners.push({owner:owner, handler:handler});
    }
    
    p.addOnce = function(owner, handler)
    {
        if(!this._listeners) return;

        var i = this._listeners.length, obj;
        while(i --)
        {
            obj = this._listeners[i];
            if(obj && obj.owner == owner && obj.handler == handler)
            {
                return;
            }
        }
        this._listeners.push({owner:owner, handler:handler});
    }
    
    p.dispatch = function()
    {
        if(!this._listeners) return;

        var i = this._listeners.length, obj;
        while(i --)
        {
            obj = this._listeners[i];
            if(obj)
            {
                obj.handler.apply(obj.owner, arguments);
            }
        }
    }
    
    p.remove = function(owner, handler)
    {
        if(!this._listeners) return;

        var i = this._listeners.length, obj;
        while(i --)
        {
            obj = this._listeners[i];
            if(obj && obj.owner == owner && obj.handler == handler)
            {
                this._listeners.splice(i, 1);
            }
        }
    }
    
    p.removeByOwner = function(owner)
    {
        if(!this._listeners) return;

        var i = this._listeners.length, obj;
        while(i --)
        {
            obj = this._listeners[i];
            if(obj && obj.owner == owner)
            {
                this._listeners.splice(i, 1);
            }
        }
    }
    
    p.removeAll = function()
    {
        if(!this._listeners) return;
        this._listeners.splice(0, this._listeners.length);
    }

    p.dispose = function()
    {
        this.removeAll();
        this._listeners = null;
    }

    p.toString = function()
    {
        return "[Object Signal]";
    }

    pinetree.Signal = Signal;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-22.
 */
(function(){
    var Rectangle = function(x, y, width, height)
    {
        this._x = x;
        this._y = y;
        this._width = width;
        this._height = height;

        __defineGetterSetter(this, ["x", "y", "width", "height", "left", "right", "top", "bottom"]);
    }

    var p = Rectangle.prototype;

    p.getX = function() { return this._x; }
    p.setX = function(value)
    {
        this._x = value;
    }

    p.getY = function() { return this._y; }
    p.setY = function(value)
    {
        this._y = value;
    }

    p.getWidth = function() { return this._width; }
    p.setWidth = function(value)
    {
        this._width = value;
    }

    p.getHeight = function() { return this._height; }
    p.setHeight = function(value)
    {
        this._height = value;
    }

    p.getLeft = function() { return this._x; }
    p.setLeft = function(value)
    {
        this._x = value;
    }

    p.getTop = function() { return this._y; }
    p.setTop = function(value)
    {
        this._y = value;
    }

    p.getRight = function() { return this._width; }
    p.setRight = function(value)
    {
        this._width = value;
    }

    p.getBottom = function() { return this._height; }
    p.setBottom = function(value)
    {
        this._height = value;
    }

    p.containsPoint = function(point)
    {
        if(!(point instanceof pinetree.Point))
        {
            trace("Error: at Rectangle::containsPoint(), argument is not a Point!");
            return false;
        }
        if(point.x >= this._x && point.x <= this._x + this._width
            && point.y >= this._y && point.y <= this._y + this._height
        )
        {
            return true;
        }
        return false;
    }

    p.containsRect = function(rect)
    {
        if(!(rect instanceof pinetree.Rectangle))
        {
            trace("Error: at Rectangle::containsRect(), argument is not a Rectangle!");
            return false;
        }
        var p = new pinetree.Point(rect.x, rect.y);
        if(!this.containsPoint(p))
            return false;
        p.x += rect.width;
        if(!this.containsPoint(p))
            return false;
        p.y += rect.height;
        if(!this.containsPoint(p))
            return false;
        p.x -= rect.width;
        if(!this.containsPoint(p))
            return false;
        return true;
    }

    p.intersects = function(rect)
    {
        if(!(rect instanceof pinetree.Rectangle))
        {
            trace("Error: at Rectangle::intersects(), argument is not a Rectangle!");
            return false;
        }
        var dx = Math.abs(this._x + this._width / 2 - (rect.x + rect.width / 2));
        var dy = Math.abs(this._y + this._height / 2 - (rect.y + rect.height / 2));
        return dx + dx < this._width + rect.width && dy + dy < this._height + rect.height;
    }

    p.clone = function()
    {
        return new pinetree.Rectangle(this._x, this._y, this._width, this._height);
    }

    p.toString = function()
    {
        return "[Object Rectangle:x=" + this._x + ",y=" + this._y + ",width="
            + this._width + ",height=" + this._height + "]";
    }

    pinetree.Rectangle = Rectangle;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-22.
 */
(function(){
    var Point = function(x, y)
    {
        this._x = x || 0;
        this._y = y || 0;

        __defineGetterSetter(this, ["x", "y"]);
    }

    var p = Point.prototype;

    p.getX = function() { return this._x; }
    p.setX = function(value)
    {
        this._x = value;
    }

    p.getY = function() { return this._y; }
    p.setY = function(value)
    {
        this._y = value;
    }

    p.clone = function()
    {
        return new pinetree.Point(this._x, this._y);
    }

    p.toString = function()
    {
        return "[Object Point:x=" + this._x + ",y=" + this._y + "]";
    }

    pinetree.Point = Point;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-12.
 */
(function()
{
    var Dictionary = function()
    {
        this._keys = [];
        this._values = [];

        __defineGetterSetter(this, ["length"]);
    }

    var p = Dictionary.prototype;

    p.set = function(key, value)
    {
        var index = this.indexOf(key);
        if(index > -1)
        {
            this._values[index] = value;
        }
        else
        {
            this._keys.push(key);
            this._values.push(value);
        }
    }

    p.get = function(key)
    {
        var index = this.indexOf(key);
        if(index > -1)
        {
            return this._values[index];
        }
        return null;
    }

    p.getKeyByIndex = function(index)
    {
        return this._keys[index];
    }

    p.getValueByIndex = function(index)
    {
        return this._values[index];
    }

    p.indexOf = function(key)
    {
        var i = this._keys.length;
        while(i --)
        {
            if(this._keys[i] === key)
            {
                return i;
            }
        }
        return -1;
    }

    p.getLength = function()
    {
        return this._keys.length;
    }

    p.remove = function(key)
    {
        var index = this.indexOf(key);
        if(index > -1)
        {
            this._keys[index] = null;
            this._keys.splice(index, 1);

            this._values[index] = null;
            this._values.splice(index, 1);
        }
    }

    p.removeAll = function()
    {
        var i = this._keys.length;
        while(i --)
        {
            this.remove(this._keys[i]);
        }
    }

    pinetree.Dictionary = Dictionary;
})();

/**
 * Created by foreverpinetree@gmail.com on 15-4-29.
 */
(function()
{
    var Delay = function()
    {
        this._handlers = {};
    }
    var p = Delay.prototype;

    /**
     * delay call
     * @param handler
     * @param delay, seconds
     * @param params, array
     * @param isSingleton, if it's true, it will remove the registered handler by this owner.
     * @returns {number}
     */
    p.delayCall = function(owner, handler, delay, params, isSingleton)
    {
        if(!params) params = [];
        if(isSingleton)
        {
            this.removeByHandler(owner, handler);
        }

        var intervalId = setTimeout(Delegate.create(this, this._onTimeOutHandler, owner, handler, delay, params), delay * 1000);
        this._handlers[intervalId] = {owner:owner, handler:handler, delay:delay, params:params};

        return intervalId;
    }

    p.delayAfterFrames = function(owner, handler, frames, params, isSingleton)
    {
        if(!frames) frames = 1;
        var delay = frames / 60;
        return this.delayCall(owner, handler, delay, params, isSingleton);
    }

    p.queueCall = function(owner, handler, params, isSingleton)
    {
        this.delayCall(owner, handler, 0, params, isSingleton);
    }

    p._onTimeOutHandler = function(owner, handler, delay, params)
    {
        handler.apply(owner, params);

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId])
            {
                if(    this._handlers[intervalId].owner == owner
                    && this._handlers[intervalId].handler == handler
                    && this._handlers[intervalId].delay == delay
                    && this._handlers[intervalId].params == params
                )
                {
                    this._clearById(intervalId);
                    break;
                }
            }
            else if(this._handlers.hasOwnProperty(intervalId))
            {
                delete this._handlers[intervalId];
            }
        }
    }

    p.removeByOwner = function(owner)
    {
        if(!owner) return;

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId]
                && this._handlers[intervalId].owner == owner
            )
            {
                this._clearById(intervalId);
            }
        }
    }

    p.removeByHandler = function(owner, handler)
    {
        if(!handler) return;

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId]
                && this._handlers[intervalId].owner == owner
                && this._handlers[intervalId].handler == handler
            )
            {
                this._clearById(intervalId);
            }
        }
    }

    p._clearById = function(intervalId)
    {
        clearInterval(intervalId);
        this._handlers[intervalId].owner = null;
        this._handlers[intervalId].handler = null;
        this._handlers[intervalId].delay = null;
        this._handlers[intervalId].params = null;
        this._handlers[intervalId] = null;
        delete this._handlers[intervalId];
    }

    pinetree.Delay = new Delay();
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-16.
 */
(function()
{
    var Timer = function(interval, repeatCount)
    {
        pinetree.EventDispatcher.call(this);

        if(interval == undefined || interval == 0)
        {
            trace("Error: interval should be bigger than 0");
            return;
        }
        this._delay = interval;
        this.repeatCount = repeatCount || 0;

        this._isRunning = false;
        this._currentCount = 0;

        this._intervalId = -1;
        this._renderHandler = null;

        __defineGetterSetter(this, ["running", "currentCount", "delay"]);
    }
    var p = __extends(Timer, pinetree.EventDispatcher);

    p.getDelay = function() { return this._delay; }
    p.setDelay = function(value)
    {
        this._delay = value;
        this.stop();
        this.start();
    }

    p._onRender = function()
    {
        this._currentCount ++;
        this.dispatchWith(pinetree.TimerEvent.TIMER);

        if(this._currentCount == this.repeatCount)
        {
            this.dispatchWith(pinetree.TimerEvent.TIMER_COMPLETE);
            this.stop();
        }
    }

    p.start = function()
    {
        if(this.repeatCount > 0 && this._currentCount >= this.repeatCount)
        {
            trace("Warning: currentCount is requal to repeatCount, the timer will not start!");
            return;
        }
        if(this._isRunning)
        {
            return
        }
        this._isRunning = true;

        this._renderHandler = Delegate.create(this, this._onRender);
        this._intervalId = setInterval(this._renderHandler, this._delay);
    }

    p.stop = function()
    {
        if(this._intervalId > -1)
        {
            clearInterval(this._intervalId);
            this._intervalId = -1;
            this._isRunning = false;
            this._renderHandler = null;
        }
    }

    p.reset = function()
    {
        this.stop();
        this._currentCount = 0;
    }

    p.getRunning = function()
    {
        return this._isRunning;
    }

    p.getCurrentCount = function()
    {
        return this._currentCount;
    }

    pinetree.dispose = function()
    {
        this.stop();
        pinetree.EventDispatcher.prototype.dispose.call(this);
    }

    pinetree.Timer = Timer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-5-16.
 */
(function()
{
    var TimerEvent = {};

    TimerEvent.TIMER = "timer";
    TimerEvent.TIMER_COMPLETE = "timer_complete";

    pinetree.TimerEvent = TimerEvent;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-22.
 */
(function()
{
    var BitmapUtil = {};

    BitmapUtil._canvas = document.createElement("canvas");
    BitmapUtil._context = BitmapUtil._canvas.getContext("2d");

    BitmapUtil.getImageData = function(source, rect, useSourceSize)
    {
        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);

        useSourceSize = __defaultSet(useSourceSize, true);

        if(source instanceof Image)
        {
            var w, h;
            if(useSourceSize)
            {
                w = source.naturalWidth;
                h = source.naturalHeight;
            }
            else
            {
                w = rect.width;
                h = rect.height;
            }
            this._canvas.width = w;
            this._canvas.height = h;

            try
            {
                this._context.drawImage(source, rect.x, rect.y, w, h);
            }
            catch(e)
            {

            }
        }
        else
        {
            this._canvas.width = source.width;
            this._canvas.height = source.height;
            this._context.drawImage(source, rect.x, rect.y, source.width, source.height);
        }

        var imageData = null;

        try
        {
            imageData = this._context.getImageData(rect.x, rect.y, rect.width, rect.height);
        }
        catch(e)
        {
            imageData = this._context.createImageData(1, 1);
        }

        return imageData;
    }

    pinetree.BitmapUtil = BitmapUtil;
}());

(function(){

	var DragPlugin = function()
	{
        this._target = null;
        this._lockCenter = false;
        this._bounds = null;
        this._stage = null;

        this._oldMouseX = 0;
        this._oldMouseY = 0;

        this._currentX = 0;
        this._currentY = 0;
    }

    var p = DragPlugin.prototype;

    p.startDrag = function(target, lockCenter, bounds)
    {
        if(!target.stage || !target.parent)
        {
            this.stopDrag();
            return;
        }

        if(!this._stage)
        {
            this._stage = target.stage;
        }

        this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);
        this._stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);

        this._target = target;
        this._lockCenter = lockCenter || false;
        this._bounds = bounds || null;

        this._oldMouseX = this._stage.mouseX;
        this._oldMouseY = this._stage.mouseY;

        this._currentX = this._target.x;
        this._currentY = this._target.y;
    }

    p._onMouseMove = function(evt)
    {
        if(!this._target.parent)
        {
            this.stopDrag();
            return;
        }

        this._currentX += this._stage.mouseX - this._oldMouseX;
        this._currentY += this._stage.mouseY - this._oldMouseY;

        this._oldMouseX = this._stage.mouseX;
        this._oldMouseY = this._stage.mouseY;

        if(this._lockCenter)
        {
            var p = this._target.parent.globalToLocal(new pinetree.Point(this._stage.mouseX, this._stage.mouseY));
            this._currentX = p.x;
            this._currentY = p.y;
        }

        if(this._bounds)
        {
            if(this._currentX < this._bounds.x)
                this._currentX = this._bounds.x;
            else if(this._currentX > this._bounds.x + this._bounds.width)
                this._currentX = this._bounds.x + this._bounds.width;

            if(this._currentY < this._bounds.y)
                this._currentY = this._bounds.y;
            else if(this._currentY > this._bounds.y + this._bounds.height)
                this._currentY = this._bounds.y + this._bounds.height;
        }
        this._target.x = this._currentX;
        this._target.y = this._currentY;
    }

    p.stopDrag = function()
    {
        this._target = null;
        this._lockCenter = false;
        this._bounds = null;

        if(this._stage)
            this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);
    }
	pinetree.dragPlugin = new DragPlugin();
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/5/5.
 */
(function()
{
    var Keyboards = function()
    {
        //
    };

    Keyboards.A = 65;
    Keyboards.ALTERNATE = 18;
    Keyboards.B = 66;
    Keyboards.BACKQUOTE = 192;
    Keyboards.BACKSLASH = 220;
    Keyboards.BACKSPACE = 8;
    Keyboards.C = 67;
    Keyboards.CAPS_LOCK = 20;
    Keyboards.COMMA = 188;
    Keyboards.COMMAND = 15;
    Keyboards.CONTROL = 17;
    Keyboards.D = 68;
    Keyboards.DELETE = 46;
    Keyboards.DOWN = 40;
    Keyboards.E = 69;
    Keyboards.END = 35;
    Keyboards.ENTER = 13;
    Keyboards.EQUAL = 187;
    Keyboards.ESCAPE = 27;
    Keyboards.F = 70;
    Keyboards.F1 = 112;
    Keyboards.F10 = 121;
    Keyboards.F11 = 122;
    Keyboards.F12 = 123;
    Keyboards.F13 = 124;
    Keyboards.F14 = 125;
    Keyboards.F15 = 126;
    Keyboards.F2 = 113;
    Keyboards.F3 = 114;
    Keyboards.F4 = 115;
    Keyboards.F5 = 116;
    Keyboards.F6 = 117;
    Keyboards.F7 = 118;
    Keyboards.F8 = 119;
    Keyboards.F9 = 120;
    Keyboards.G = 71;
    Keyboards.H = 72;
    Keyboards.HOME = 36;
    Keyboards.I = 73;
    Keyboards.INSERT = 45;
    Keyboards.J = 74;
    Keyboards.K = 75;
    Keyboards.L = 76;
    Keyboards.LEFT = 37;
    Keyboards.LEFTBRACKET = 219;
    Keyboards.M = 77;
    Keyboards.MINUS = 189;
    Keyboards.N = 78;
    Keyboards.NUMBER_0 = 48;
    Keyboards.NUMBER_1 = 49;
    Keyboards.NUMBER_2 = 50;
    Keyboards.NUMBER_3 = 51;
    Keyboards.NUMBER_4 = 52;
    Keyboards.NUMBER_5 = 53;
    Keyboards.NUMBER_6 = 54;
    Keyboards.NUMBER_7 = 55;
    Keyboards.NUMBER_8 = 56;
    Keyboards.NUMBER_9 = 57;
    Keyboards.NUMPAD = 21;
    Keyboards.NUMPAD_0 = 96;
    Keyboards.NUMPAD_1 = 97;
    Keyboards.NUMPAD_2 = 98;
    Keyboards.NUMPAD_3 = 99;
    Keyboards.NUMPAD_4 = 100;
    Keyboards.NUMPAD_5 = 101;
    Keyboards.NUMPAD_6 = 102;
    Keyboards.NUMPAD_7 = 103;
    Keyboards.NUMPAD_8 = 104;
    Keyboards.NUMPAD_9 = 105;
    Keyboards.NUMPAD_ADD = 107;
    Keyboards.NUMPAD_DECIMAL = 110;
    Keyboards.NUMPAD_DIVIDE = 111;
    Keyboards.NUMPAD_ENTER = 108;
    Keyboards.NUMPAD_MULTIPLY = 106;
    Keyboards.NUMPAD_SUBTRACT = 109;
    Keyboards.O = 79;
    Keyboards.P = 80;
    Keyboards.PAGE_DOWN = 34;
    Keyboards.PAGE_UP = 33;
    Keyboards.PERIOD = 190;
    Keyboards.Q = 81;
    Keyboards.QUOTE = 222;
    Keyboards.R = 82;
    Keyboards.RIGHT = 39;
    Keyboards.RIGHTBRACKET = 221;
    Keyboards.S = 83;
    Keyboards.SEMICOLON = 186;
    Keyboards.SHIFT = 16;
    Keyboards.SLASH = 191;
    Keyboards.SPACE = 32;
    Keyboards.T = 84;
    Keyboards.TAB = 9;
    Keyboards.U = 85;
    Keyboards.UP = 38;
    Keyboards.V = 86;
    Keyboards.W = 87;
    Keyboards.X = 88;
    Keyboards.Y = 89;
    Keyboards.Z = 90;

    pinetree.Keyboards = Keyboards;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-11.
 */
(function()
{

    var Event = {
        ABORT:"abort",
        CHANGE:"change",
        IO_ERROR:"ioError",
        ERROR:"error",
        LOAD:"load",
        SCROLL:"scroll",
        RESET:"reset",
        RESIZE:"resize",
        SELECT:"select",
        SUBMIT:"submit",
        UNLOAD:"unload",
        ADDED_TO_STAGE:"addedToStage",
        REMOVED_FROM_STAGE:"removeFromStage",
        ENTER_FRAME:"enterFrame",
        COMPLETE:"complete",
        DISPOSE:"dispose",
        PROGRESS:"progress"
    }
    pinetree.Event = Event;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-30.
 */
(function()
{
    var FocusEvent = {
        FOCUS_IN:"focus",
        FOCUS_OUT:"blur"
    }

    FocusEvent.isInterested = function(type)
    {
        if( type == this.FOCUS_IN ||
            type == this.FOCUS_OUT
        )
        {
            return true;
        }
        return false;
    }

    pinetree.FocusEvent = FocusEvent;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-13.
 */
(function()
{

    var KeyboardEvent = {
        KEYDOWN:"keydown",
        KEYPRESS:"keypress",
        KEYUP:"keyup"
    }

    KeyboardEvent.isInterested = function(type)
    {
        if( type == this.KEYDOWN ||
            type == this.KEYPRESS ||
            type == this.KEYUP
        )
        {
            return true;
        }
        return false;
    }

    pinetree.KeyboardEvent = KeyboardEvent;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-4-13.
 */
(function()
{
    var MouseEvent = {
        ROLL_OVER:"mouseenter",
        ROLL_OUT:"mouseleave",
        MOUSE_OVER:"mouseover",
        MOUSE_OUT:"mouseout",
        CLICK:"click",
        DBLCLICK:"dblclick",
        MOUSE_DOWN:pinetree.isDevice && !__global.isDebug ? "touchstart" : "mousedown",
        MOUSE_UP:pinetree.isDevice && !__global.isDebug ? "touchend" : "mouseup",
        MOUSE_MOVE:pinetree.isDevice && !__global.isDebug ? "touchmove" : "mousemove",
        MOUSE_WHEEL:"wheel"
    }

    MouseEvent.isInterested = function(type)
    {
        if( type == this.ROLL_OVER ||
            type == this.ROLL_OUT ||
            type == this.MOUSE_OVER ||
            type == this.MOUSE_OUT ||
            type == this.CLICK ||
            type == this.DBLCLICK ||
            type == this.MOUSE_DOWN ||
            type == this.MOUSE_UP ||
            type == this.MOUSE_MOVE ||
            type == this.MOUSE_WHEEL
        )
        {
            return true;
        }
        return false;
    }

    pinetree.MouseEvent = MouseEvent;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-8-6.
 */
(function()
{
    var URLVariables = function(source)
    {
        if(source)
        {
            this.decode(source);
        }
    }

    var p = URLVariables.prototype;

    /**
     * source is a MIME String.
     * @param source, "application/x-www-form-urlencoded" format.
     */
    p.decode = function(source)
    {
        var arr = source.split("&"), temp;
        var len = arr.length;
        for(var i = 0; i < len; i ++)
        {
            temp = arr[i].split("=");
            if(temp.length > 1)
            {
                this[decodeURIComponent(temp[0])] = decodeURIComponent(temp[1]);
            }
        }
    }

    p.toString = function()
    {
        var arr = [];
        for(var key in this)
        {
            if(typeof(this[key]) == "string")
            {
                arr.push(encodeURIComponent(key) + "=" + encodeURIComponent(this[key]));
            }
        }
        return arr.join("&");
    }

    pinetree.URLVariables = URLVariables;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-6.
 */
(function()
{
    var URLLoaderDataFormat = {};

    URLLoaderDataFormat.TEXT = "text";
    URLLoaderDataFormat.VARIABLES = "variables";

    pinetree.URLLoaderDataFormat = URLLoaderDataFormat;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-6.
 */
(function()
{
    var URLRequest = function(url)
    {
        this._url = __defaultSet(url, "");
        this._method = pinetree.URLRequestMethod.GET;
        this._contentType = "";
        this._data = null;

        __defineGetterSetter(this, ["url", "method", "contentType", "data"]);
    }

    var p = URLRequest.prototype;

    p.getUrl = function() { return this._url; }
    p.setUrl = function(value)
    {
        this._url = value;
    }

    p.getMethod = function() { return this._method; }
    p.setMethod = function(value)
    {
        this._method = value == pinetree.URLRequestMethod.GET ?
            pinetree.URLRequestMethod.GET : pinetree.URLRequestMethod.POST;
    }

    p.getContentType = function() { return this._contentType; }
    p.setContentType = function(value)
    {
        this._contentType = value;
    }

    p.getData = function() { return this._data; }
    p.setData = function(value)
    {
        this._data = value;
    }

    pinetree.URLRequest = URLRequest;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-6.
 */
(function()
{
    var URLRequestMethod = {};

    URLRequestMethod.GET = "GET";
    URLRequestMethod.POST = "POST";

    pinetree.URLRequestMethod = URLRequestMethod;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-8.
 */
(function()
{
    var URLLoader = function(urlRequest)
    {
        pinetree.EventDispatcher.call(this);

        this._data = null;
        this.dataFormat = pinetree.URLLoaderDataFormat.TEXT;

        this._disposed = false;

        this.ON_PROGRESS = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        this._xmlHttpRequest = new XMLHttpRequest();
        this._xmlHttpRequest.onabort = Delegate.create(this, this.onAbort);
        this._xmlHttpRequest.onreadystatechange = Delegate.create(this, this.onReadyStateChange);
        this._xmlHttpRequest.onprogress = Delegate.create(this, this.onProgress);

        if(urlRequest)
        {
            this.load(urlRequest);
        }

        __defineGetterSetter(this, ["data"]);
    }

    var p = __extends(URLLoader, pinetree.EventDispatcher);

    p.onAbort = function(evt)
    {
        this.dispatchWith(pinetree.Event.ABORT);
    }

    p.onProgress = function(evt)
    {
        this.dispatchEvent(evt);

        (!this._disposed) && this.ON_PROGRESS && this.ON_PROGRESS.dispatch(evt.loaded / evt.total);
    }

    p.load = function(urlRequest)
    {
        if(!urlRequest)
        {
            trace("Error: at URLLoader::load(), urlRequest can't be null or undefined!");
            return;
        }

        if(!(urlRequest instanceof pinetree.URLRequest))
        {
            trace("Error: at URLLoader::load(), urlRequest is not an instance of pinetree.URLRequest!");
            return;
        }

        var url = urlRequest.url;
        if(url.indexOf("http://") < 0)
        {
            url = PARENT_URL + url;
        }

        if(this.dataFormat == pinetree.URLLoaderDataFormat.VARIABLES)
        {
            this._xmlHttpRequest.open(pinetree.URLRequestMethod.POST, url, true);
            this._xmlHttpRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
            var str = urlRequest.data ? urlRequest.data.toString() : "";
            this._xmlHttpRequest.send(str);
        }
        else
        {
            this._xmlHttpRequest.open(urlRequest.method, url, true);
            this._xmlHttpRequest.send();
        }
    }

    p.onReadyStateChange = function()
    {
        if (this._xmlHttpRequest.readyState == 4)
        {
            if(this._xmlHttpRequest.status == 200 || this._xmlHttpRequest.status == 0)//0 is for local test
            {
                this._data = this._xmlHttpRequest.responseText;

                this.dispatchWith(pinetree.Event.COMPLETE);
                (!this._disposed) && this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.dispatch(this);
            }
            else
            {
                this.dispatchWith(pinetree.Event.IO_ERROR);
                (!this._disposed) && this.ON_IO_ERROR && this.ON_IO_ERROR.dispatch(this);
            }
        }
    }

    p.getData = function()
    {
        return this._data;
    }

    p.close = function()
    {
        this._xmlHttpRequest.abort();
    }

    p.dispose = function()
    {
        if(this._disposed) return;
        this._disposed = true;

        this._xmlHttpRequest.onabort = null;
        this._xmlHttpRequest.onreadystatechange = null;
        this._xmlHttpRequest.onprogress = null;
        this.close();

        this.ON_PROGRESS && this.ON_PROGRESS.removeAll();
        this.ON_PROGRESS = null;

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_IO_ERROR = null;

        pinetree.EventDispatcher.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object URLLoader]";
    }

    pinetree.URLLoader = URLLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-21.
 */
(function()
{
    var Graphics = function(canvas)
    {
        this._canvas = canvas;
        if(canvas)
        {
            this._context = canvas.getContext("2d");
        }
        this._fillStyle = "";
        this._lineWidth = 0;
        this._strokeStyle = "";
        this._lineCap = null;
        this._lineJoin = null;
        this._miterLimit = null;

        this._isFill = false;
        this._drawOffsetX = 0;
        this._drawOffsetY = 0;

        this._drawPathX = null;
        this._drawPathY = null;

        this._shadowColor = 0x000000;
        this._shadowAlpha = 0.5;
        this._shadowBlur = 0;
        this._shadowOffsetX = 0;
        this._shadowOffsetY = 0;

        this._width = canvas ? canvas.width : 0;
        this._height = canvas ? canvas.height : 0;

        __defineGetterSetter(this, ["canvas", "context"]);
    }

    var p = Graphics.prototype;

    /**
     * @param image, HtmlImageElement|Canvas|Video|pinetree.Texture|pinetree.TextureImage|pinetree.BitmapData|pinetree.Bitmap
     * @param repeat, "repeat"|"repeat-x"|"repeat-y"|"no-repeat"
     */
    p.beginBitmapFill = function(image, repeat)
    {
        if(repeat == undefined) repeat = "repeat";

        if((image instanceof pinetree.TextureImage) ||
            (image instanceof pinetree.Bitmap)
        )
        {
            image = image.canvas;
        }
        else if(image instanceof pinetree.Texture)
        {
            var textImage = new pinetree.TextureImage(image);
            image = textImage.canvas;
            textImage.dispose();
            textImage = null;
        }
        else if(image instanceof pinetree.BitmapData)
        {
            var bmp = new pinetree.Bitmap(image);
            image = bmp.canvas;
            bmp.dispose();
            bmp = null;
        }

        this._context.beginPath();

        var pattern = this._context.createPattern(image, repeat);
        this._fillStyle = pattern;
        this._updateStyle();
    }

    p._readyToFill = function()
    {
        this._isFill = true;
        if(this._shadowBlur > 0)
        {
            if(this._shadowOffsetX < 0 || this._shadowOffsetX - this._shadowBlur < 0)
            {
                this._drawOffsetX = this._shadowBlur - this._shadowOffsetX;
            }
            if(this._shadowOffsetY < 0 || this._shadowOffsetY - this._shadowBlur < 0)
            {
                this._drawOffsetY = this._shadowBlur - this._shadowOffsetY;
            }
        }
    }

    p.beginFill = function(color, alpha)
    {
        this._readyToFill();
        this._context.beginPath();

        alpha = alpha < 0 ? 0 : alpha > 1 ? 1 : alpha;
        this._fillStyle = pinetree.getRGBA(color, alpha);
        this._updateStyle();
    }

    p.beginGradientFill = function(type, colors, alphas, ratios, matrix,
                                   spreadMethod, interpolationMethod, focalPointRatio)
    {
        this._readyToFill();
        this._updateStyle();
    }

    p.clear = function()
    {
        this._isFill = false;
        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
        this._canvas.width = this._width;
        this._canvas.height = this._height;
    }

    p.curveTo = function(controlX, controlY, anchorX, anchorY)
    {
        if(this._isFill)
        {
            controlX += this._drawOffsetX;
            controlY += this._drawOffsetY;
            anchorX += this._drawOffsetX;
            anchorY += this._drawOffsetY;
        }

        this._updateSize(0, 0, Math.max(controlX, anchorX), Math.max(controlY, anchorY));//I am not sure if it's right.
        this._context.quadraticCurveTo(controlX, controlY, anchorX, anchorY);
    }

    p.scale = function(x, y)
    {

    }

    /**
     *
     * @param x
     * @param y
     * @param radius
     * @param sAngle, start angle
     * @param eAngle, end angle
     * @param counterclockwise, direction
     */
    p.drawCircle = function(x, y, radius, sAngle, eAngle, counterclockwise)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        var thickness = this._lineWidth / 2;
        x += thickness;
        y += thickness;

        this._updateSize(x - radius, y - radius, 2 * radius, 2 * radius);

        sAngle = sAngle == undefined ? 0 : sAngle;
        eAngle = eAngle == undefined ? Math.PI * 2 : eAngle;
        counterclockwise = counterclockwise == undefined ? true : false;

        this._context.arc(x, y, radius, sAngle, eAngle, counterclockwise);
    }

    p.drawEllipse = function(x, y, width, height)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        var thickness = this._lineWidth / 2;
        x += thickness;
        y += thickness;

        this._updateSize(x, y, width, height);

        var k = 0.5522848;
        var ox = (width / 2) * k;
        var oy = (height / 2) * k;
        var xe = x + width;
        var ye = y + height;
        var xm = x + width / 2;
        var ym = y + height / 2;

        this._context.moveTo(x, ym);
        this._context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
        this._context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
        this._context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
        this._context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
        this._context.closePath();
    }

    p.drawRect = function(x, y, width, height)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        var thickness = this._lineWidth / 2;
        x += thickness;
        y += thickness;

        this._updateSize(x, y, width, height);
        this._context.rect(x, y, width, height);
    }

    p.stroke = function()
    {
        this.drawPath();
        this._context.stroke();
    }

    p.strokeRect = function(x, y, width, height)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        var thickness = this._lineWidth / 2;
        x += thickness;
        y += thickness;

        this._updateSize(x, y, width, height);

        this._context.strokeRect(x, y, width, height);
    }

    p.drawRoundRect = function(x, y, width, height, radiusTL, radiusTR, radiusBL, radiusBR)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        var thickness = this._lineWidth / 2;
        x += thickness;
        y += thickness;

        this._updateSize(x, y, width, height);

        this._context.moveTo(x + width - radiusTR, y);
        this._context.arcTo(x + width, y, x + width, y + radiusTR, radiusTR);
        this._context.lineTo(x + width, y + height - radiusBR);
        this._context.arcTo(x + width, y + height, x + width - radiusBR, y + height, radiusBR);
        this._context.lineTo(x + radiusBL, y + height);
        this._context.arcTo(x, y + height, x, y + height - radiusBL, radiusBL);
        this._context.lineTo(x, y + radiusTL);
        this._context.arcTo(x, y, x + radiusTL, y, radiusTL);
        this._context.closePath();
    }

    p.endFill = function()
    {
        this._context.fill();
        this._context.closePath();

        if(this._isFill)
        {
            this._canvas.style.left = (- this._drawOffsetX) + "px";
            this._canvas.style.top = (- this._drawOffsetY) + "px";
        }
    }

    p.lineGradientStyle = function(type, colors, alphas, ratios, matrix,
                                   spreadMethod, interpolationMethod, focalPointRatio)
    {
        this._updateStyle();
    }

    p.lineStyle = function(thickness, color, alpha, caps, joints, miterLimit)
    {
        this._lineWidth = thickness;
        this._strokeStyle = pinetree.getRGBA(color, alpha);
        this._lineCap = caps;
        this._lineJoin = joints;
        this._miterLimit = miterLimit;

        this._updateStyle();
    }

    p.lineTo = function(x, y)
    {
        if(this._isFill)
        {
            x += this._drawOffsetX;
            y += this._drawOffsetY;
        }

        this._updateSize(x, y);

        this._drawPathX.push(x);
        this._drawPathY.push(y);
    }

    p.moveTo = function(x, y)
    {
        if(this._drawPathX)
            this._drawPathX.splice(0, this._drawPathX.length);
        else
            this._drawPathX = [];
        if(this._drawPathY)
            this._drawPathY.splice(0, this._drawPathY.length);
        else
            this._drawPathY = [];

        this._drawPathX.push(x);
        this._drawPathY.push(y);
    }

    p.drawPath = function()
    {
        if(!this._drawPathX || !this._drawPathY) return;

        var len = this._drawPathX.length;
        if(len < 1) return;

        this._context.save();

        this._context.translate(this._lineWidth / 2, this._lineWidth / 2);

        this._context.moveTo(this._drawPathX[0], this._drawPathY[0]);
        for(var i = 1; i < len; i ++)
        {
            this._context.lineTo(this._drawPathX[i], this._drawPathY[i]);
        }

        this._context.restore();
    }

    p.getCanvas = function()
    {
        return this._canvas;
    }

    p.getContext = function()
    {
        return this._context;
    }

    p.setShadow = function(color, alpha, blur, offsetX, offsetY)
    {
        this._shadowColor = __defaultSet(color, this._shadowColor);
        this._shadowAlpha = __defaultSet(alpha, this._shadowAlpha);
        this._shadowBlur = __defaultSet(blur, 0);
        this._shadowOffsetX = __defaultSet(offsetX, 0);
        this._shadowOffsetY = __defaultSet(offsetY, 0);
    }

    p._updateSize = function(x, y, width, height)
    {
        if(!width) width = 0;
        if(!height) height = 0;
        var changed = false;
        if(x + width + this._shadowBlur + this._lineWidth > this._canvas.width)
        {
            this._canvas.width = x + width + this._shadowBlur + this._lineWidth;
            this._width = this._canvas.width;
            changed = true;
        }
        if(y + height + this._shadowBlur + this._lineWidth > this._canvas.height)
        {
            this._canvas.height = y + height + this._shadowBlur + this._lineWidth;
            this._height = this._canvas.height;
            changed = true;
        }

        if(changed)
        {
           this._updateStyle();
        }
    }

    p._updateStyle = function()
    {
        this._context.lineWidth = this._lineWidth;
        this._context.strokeStyle = this._strokeStyle;
        this._context.lineCap = this._lineCap;
        this._context.lineJoin = this._lineJoin;
        this._context.miterLimit = this._miterLimit;

        if(this._isFill)
        {
            this._context.shadowColor = pinetree.getRGBA(this._shadowColor, this._shadowAlpha);
            this._context.shadowBlur = this._shadowBlur;
            this._context.shadowOffsetX = this._shadowOffsetX;
            this._context.shadowOffsetY = this._shadowOffsetY;
        }

        this._context.fillStyle = this._fillStyle;
    }

    p.toString = function()
    {
        return "[Object Graphics]";
    }

    pinetree.Graphics = Graphics;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-13.
 */
(function()
{
    var DisplayObject = function()
    {
        pinetree.EventDispatcher.call(this);

        this._parent = null;
        this._stage = null;

        this.isInitialized = false;
        this.useIntPosition = false;

        this._id = "";//SUGGEST NOT TO USE IT.
        this._name = "";
        this._className = "";
        this._x = 0;
        this._y = 0;
        this._width = 0;
        this._height = 0;
        this._rotation = 0;
        this._alpha = 1.0;
        this._scale = 1.0;
        this._scaleX = 1.0;
        this._scaleY = 1.0;

        this._backgroundAlpha = 0;
        this._backgroundColor = 0xffffff;
        this._isTweeningBgColor = false;

        this._tweenBgColorPercent = 0;
        this._tweenBgSrcColor = 0;
        this._tweenBgDestColor = 0;

        this._animations = [];

        this._selectable = true;

        this._useMouseHand = false;

        this._clip = new pinetree.Rectangle(0, 0, 0, 0);

        this._htmlElement = null;

        __defineGetterSetter(this, ["x", "y", "width", "height", "alpha", "positionRef",
            "visible", "rotation", "scale", "scaleX", "scaleY", "id", "name", "parent", "stage",
            "className", "clip", "elementOffsetWidth", "elementOffsetHeight", "htmlElement",
            "scrollWidth", "scrollHeight", "cursor", "disabled", "htmlStyle", "selectable",
            "computedStyle", "useMouseHand", "backgroundColor", "backgroundAlpha"
        ]);
    }

    var p = __extends(DisplayObject, pinetree.EventDispatcher);

    /**
     * it will be called when it is added to stage
     */
    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this.isInitialized = true;
        }
    }

    /**
     * it will be called when it is removed from stage
     */
    p.removedFromStage = function()
    {
        this.stopTweenBackgroundColor();

        if(this._isTweeningBgColor)
        {
            this.backgroundColor = this._tweenBgDestColor;
        }

        var i = this._animations.length, element;
        while(i --)
        {
            element = this._animations[i];
            if(element && element.parentNode)
            {
                element.parentNode.removeChild(element);
            }
        }
        this._animations.splice(0, this._animations.length);
    }

    p.addEventListener = function(type, listener, owner, priority)
    {
        if(type == pinetree.Event.ENTER_FRAME)
        {
            pinetree.timeMachine.add(this);
        }
        pinetree.EventDispatcher.prototype.addEventListener.call(this, type, listener, owner, priority);
    }

    p.removeEventListener = function(type, listener, owner)
    {
        if(type == pinetree.Event.ENTER_FRAME)
        {
            pinetree.timeMachine.remove(this);
        }
        pinetree.EventDispatcher.prototype.removeEventListener.call(this, type, listener, owner);
    }

    p.addTo = function(container)
    {
        if(container instanceof pinetree.DisplayObjectContainer)
        {
            container.addChild(this);
        }
    }

    p.removeFromParent = function(needDispose)
    {
        if(!!needDispose)
        {
            this.dispose();
        }

        if(this._parent && (this._parent instanceof pinetree.DisplayObjectContainer))
        {
            this._parent.removeChild(this);
        }
    }

    p.tweenAlphaByCSS = function(value, time, delay, transition, callback, params)
    {
        var name = "tween_alpha" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {opacity:" + this._alpha + "} 100% {opacity:" + value + "}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["alpha"], [value], time, delay, transition, callback, params);
    }

    p.tweenXByCSS = function(value, time, delay, transition, callback, params)
    {
        var name = "tween_x" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {left:" + this._x + "px} 100% {left:" + value + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["x"], [value], time, delay, transition, callback, params);
    }

    p.tweenYByCSS = function(value, time, delay, transition, callback, params)
    {
        var name = "tween_y" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {top:" + this._y + "px} 100% {top:" + value + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["y"], [value], time, delay, transition, callback, params);
    }

    p.tweenXYByCSS = function(x, y, time, delay, transition, callback, params)
    {
        var name = "tween_xy" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {left:" + this._x + "px; top:" + this._y + "px}" +
            " 100% {left:" + x +"px; top:" + y + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["x", "y"], [x, y], time, delay, transition, callback, params);
    }

    p.tweenWidthByCSS = function(value, time, delay, transition, callback, params)
    {
        var name = "tween_width" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {width:" + this._width + "px} 100% {width:" + value + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["width"], [value], time, delay, transition, callback, params);
    }

    p.tweenHeightByCSS = function(value, time, delay, transition, callback, params)
    {
        var name = "tween_height" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {height:" + this._height + "px} 100% {height:" + value + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["height"], [value], time, delay, transition, callback, params);
    }

    p.tweenSizeByCSS = function(w, h, time, delay, transition, callback, params)
    {
        var name = "tween_size" + "_" + Math.floor(Math.random() * 0xffffffff);
        var keyFrames = name + " {0% {width:" + this._width + "px; height:" + this._height + "px}" +
            " 100% {width:" + w +"px; height:" + h + "px}}";
        return this.tweenPropertyByCSS(name, keyFrames, ["width", "height"], [w, h], time, delay, transition, callback, params);
    }

    p.tweenPropertyByCSS = function(frameName, keyFrames, properties, values, time, delay, transition, callback, params)
    {
        if(!pinetree.isSupportAnimation)
        {
            return false;
        }

        if(time == undefined) time = 0;
        if(delay == undefined) delay = 0;
        if(!transition) transition = "linear";

        var el = pinetree.addKeyFrames(keyFrames);
        pinetree.setAnimation(this._htmlElement, frameName + " " + time + "s " + transition + " " + delay + "s both");
        this._animations.push(el);

        pinetree.Delay.delayCall(this, this._onTweenPropertyEnd, time + delay, [el, properties, values, callback, params], false);
        return true;
    }

    p._onTweenPropertyEnd = function(element, properties, values, callback, params)
    {
        if(element)
        {
            var index = this._animations.indexOf(element);
            if (index > -1)
            {
                this._animations.splice(index, 1);
            }
            if(element.parentNode)
            {
                element.parentNode.removeChild(element);
            }
        }

        var len = properties.length;
        for(var i = 0; i < len; i ++)
        {
            this[properties[i]] = values[i];
        }
        callback && callback.apply(this, params);
    }

    p.clearAllDelays = function()
    {
        pinetree.Delay.removeByOwner(this);
    }

    /**
     * @param rect, Rectangle
     */
    p.getClip = function() { return this._clip };
    p.setClip = function(rect)
    {
        if(rect)
            this._htmlElement.style.clip = pinetree.makeClip(rect.x, rect.y, rect.width, rect.height);
        else
            this._htmlElement.style.clip = pinetree.makeClip(0, 0, this.width, this.height);

        this._clip = rect;
    }

    p.getParent = function()
    {
        return this._parent;
    }

    p.getStage = function()
    {
        return this._stage;
    }

    p.setCursor = function(value)
    {
        this._htmlElement.style.cursor = value;
    }

    p.getUseMouseHand = function() { return this._useMouseHand; }
    p.setUseMouseHand = function(value)
    {
        this._useMouseHand = value;
        this.cursor = !!value ? "pointer" : "auto";
    }

    p.getPositionRef = function() { return this._htmlElement.style.position; }
    p.setPositionRef = function(value)
    {
        this._htmlElement.style.position = value;
    }

    p.getHtmlElement = function()
    {
        return this._htmlElement;
    }

    p.getHtmlStyle = function()
    {
        if(this._htmlElement)
            return this._htmlElement.style;
        return null;
    }

    p.getComputedStyle = function()
    {
        var style = window.getComputedStyle(this.getHtmlElement(), null);
        return style || null;
    }

    p.getBackgroundColor = function() { return this._backgroundColor; }
    p.setBackgroundColor = function(value)
    {
        this._backgroundColor = value;
        var color = pinetree.getRGBA(this._backgroundColor, this._backgroundAlpha);
        this._htmlElement.style.backgroundColor = color;
    }

    p.getBackgroundAlpha = function() { return this._backgroundAlpha; }
    p.setBackgroundAlpha = function(value)
    {
        this._backgroundAlpha = value;
        var color = pinetree.getRGBA(this._backgroundColor, this._backgroundAlpha);
        this._htmlElement.style.backgroundColor = color;
    }

    p.tweenBackgroundColor = function(color, time, transition, callback)
    {
        if(time == 0)
        {
            this.backgroundColor = color;
            callback && callback();
            return;
        }

        this._isTweeningBgColor = true;

        this._tweenBgColorPercent = 0;
        this._tweenBgSrcColor = this._backgroundColor;
        this._tweenBgDestColor = color;

        this.stopTweenBackgroundColor();
        TweenMax.to(this, isNaN(time) ? 1.0 : time, {_tweenBgColorPercent:1, ease:transition || Quad.easeOut,
            onUpdate:this.onTweenBgColorUpdate, onUpdateParams:[this],
            onComplete:this.onTweenBgColorComplete, onCompleteParams:[this, callback]
        });
    }

    p.onTweenBgColorUpdate = function(owner)
    {
        owner.backgroundColor = pinetree.getOffsetColor(
            owner._tweenBgSrcColor,
            owner._tweenBgDestColor,
            owner._tweenBgColorPercent
        );
    }

    p.onTweenBgColorComplete = function(owner, callback)
    {
        owner._isTweeningBgColor = false;
        callback && callback();
    }

    p.stopTweenBackgroundColor = function()
    {
        TweenMax.killTweensOf(this, false, {_tweenBgColorPercent:true});
    }

    p.getSelectable = function() { return this._selectable; }
    p.setSelectable= function(value)
    {
        this._selectable = value ? true : false;

        if(this._selectable)
        {
            this._htmlElement.onselectstart = function() { return true; };
        }
        else
        {
            this._htmlElement.onselectstart = function() { return false; };
        }
    }

    p.translate = function(x, y)
    {
        this.setTransform("translate(" + x + "px," + y + "px)");
    }

    p.setTransform = function(value)
    {
        pinetree.setTransform(this._htmlElement, value);
    }

    p.setTransformOrigin = function(x, y, z)
    {
        pinetree.setTransformOrigin(this._htmlElement, x, y, z);
    }

    p.getId = function() { return this._id; }
    p.setId = function(value)
    {
        var i = pinetree.ids;
        while(i --)
        {
            if(pinetree.ids[i] == value)
            {
                trace("Error: at DisplayObject::setId(), this value has been used!");
                return;
            }
        }
        this._id = value;
        pinetree.ids.push(this._id);
        this._htmlElement.setAttribute("id", this._id);
    }

    p.getName = function() { return this._name; }
    p.setName = function(value)
    {
        this._name = value;
    }

    p.getClassName = function() { return this._className; }
    p.setClassName = function(value)
    {
        this._className = value;
        this._htmlElement.className = this._className;
    }

    p.getAlpha = function() { return this._alpha; };
    p.setAlpha = function(value)
    {
        this._alpha = value;
        this._htmlElement.style.opacity = value;
    }

    p.getVisible = function()
    {
        return this._htmlElement.style.display != "none";
    };
    p.setVisible = function(value)
    {
        this._htmlElement.style.display = value ? "inline" : "none";
    }

    p.getRotation = function() { return this._rotation; };
    p.setRotation = function(value)
    {
        this._rotation = value;
        this.setTransform("rotate(" + value + "deg)");
    }

    /**
     * NOTE: if use this method to set the scale, don't use the scaleX and scaleY again.
     * @returns {*|p._scale}
     */
    p.getScale = function() { return this._scale; };
    p.setScale = function(value)
    {
        this._scale = value;
        this.setTransform("scale(" + value + ")");
    };

    /**
     * NOTE: if use this method to set the scale's x, don't use the scale again.
     * @returns {*|p._scaleX}
     */
    p.getScaleX = function() { return this._scaleX; };
    p.setScaleX = function(value)
    {
        this._scaleX = value;
        this.setTransform("scaleX(" + value + ")");
    };

    /**
     * NOTE: if use this method to set the scale's y, don't use the scale again.
     * @returns {*|p._scaleY}
     */
    p.getScaleY = function() { return this._scaleY; };
    p.setScaleY = function(value)
    {
        this._scaleY = value;
        this.setTransform("scaleY(" + value + ")");
    };

    p.getWidth = function() { return this._htmlElement.scrollWidth; };
    p.setWidth = function(value)
    {
        this._width = value;
        this.validate();
    }

    p.getHeight = function() { return this._htmlElement.scrollHeight; };
    p.setHeight = function(value)
    {
        this._height = value;
        this.validate();
    }

    p.getScrollWidth = function()
    {
        return this._htmlElement.scrollWidth;
    }

    p.getScrollHeight = function()
    {
        return this._htmlElement.scrollHeight;
    }

    p.getElementOffsetWidth = function()
    {
        return this._htmlElement.offsetWidth;
    }

    p.getElementOffsetHeight = function()
    {
        return this._htmlElement.offsetHeight;
    }

    p.setSize = function(w, h)
    {
        this.setWidth(w);
        this.setHeight(h);
    }

    p.getX = function() { return this._x; };
    p.setX = function(value)
    {
        if(this.useIntPosition)
        {
            value = Math.round(value);
        }

        this._htmlElement.style.left = value + "px";
        this._x = value;
    }

    p.getY = function() { return this._y; };
    p.setY = function(value)
    {
        if(this.useIntPosition)
        {
            value = Math.round(value);
        }

        this._htmlElement.style.top = value + "px";
        this._y = value;
    }

    p.setPosition = function(x, y)
    {
        this.setX(x);
        this.setY(y);
    }

    /**
     * for ie: not available prior to ie 11.
     * @param value
     */
    p.setDisabled = function(value)
    {
        var b = !!value;
        this._htmlElement.style.pointerEvents = b ? "none" : "auto";
    }

    /**
     * only get the bounds of "this" system
     */
    p.getBounds = function()
    {
        return new pinetree.Rectangle(this.x, this.y, this.scrollWidth, this.scrollHeight);
    }

    /**
     * if using mask you should override this function as the width and the height
     * may not be the scrollWidth and scrollHeight
     * @returns {pinetree.Rectangle}
     */
    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this.scrollWidth, this.scrollHeight);
    }

    p.hitTestPoint = function(x, y)
    {
        var rect = this.getGlobalBounds();
        return rect.containsPoint(new pinetree.Point(x, y));
    }

    p.hitTestObject = function (obj)
    {
        if(!(obj instanceof pinetree.DisplayObject)) return false;
        if(!this.stage || !obj.stage) return false;

        var rect1 = this.getGlobalBounds();
        var rect2 = obj.getGlobalBounds();
        return rect1.intersects(rect2);
    }

    /**
     * note: it will change the input point.
     * @param point
     * @returns point
     */
    p.localToGlobal = function(point)
    {
        if(!this.stage || !this.parent) return new pinetree.Point();

        if(this.parent instanceof pinetree.Stage)
        {
            return point;
        }
        else
        {
            point.x += this.x;
            point.y += this.y;
            this.parent.localToGlobal(point);
        }
        return point;
    }

    /**
     * note: it will change the input point.
     * @param point
     * @returns point
     */
    p.globalToLocal = function(point)
    {
        if(!this.stage || !this.parent) return new pinetree.Point();

        if(this.parent instanceof pinetree.Stage)
        {
            return point;
        }
        else
        {
            point.x -= this.x;
            point.y -= this.y;
            this.parent.globalToLocal(point);
        }
        return point;
    }

    p.removeAllElementNodes = function(parentNode)
    {
        if(!parentNode) return;

        var childNodes =parentNode.childNodes, childNode;
        for(var i=childNodes.length-1; i>=0; i--)
        {
            childNode = childNodes.item(i);
            if(!childNode) continue;
            if(childNode.childNodes && childNode.childNodes.length > 0)
            {
                this.removeAllElementNodes(childNode);
            }
            parentNode.removeChild(childNode);
        }
    }

    p.validate = function()
    {
        if(this._width <= 0) this._width = this.width;
        if(this._height <= 0) this._height = this.height;

        this._htmlElement.style.width = this._width + "px";
        this._htmlElement.style.height = this._height + "px";
    }

    p.dispose = function()
    {
        this.isInitialized = false;

        this.clearAllDelays();

        this.stopTweenBackgroundColor();

        var i = this._animations.length, element;
        while(i --)
        {
            element = this._animations[i];
            if(element && element.parentNode)
            {
                element.parentNode.removeChild(element);
            }
        }
        this._animations.splice(0, this._animations.length);

        this.removeAllElementNodes(this._htmlElement);
        pinetree.EventDispatcher.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object DisplayObject]";
    }

    pinetree.DisplayObject = DisplayObject;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-21.
 * NOTE: This class is a abstrace class, it shouldn't be instanced.
 */
(function()
{

    var InteractiveObject = function()
    {
        pinetree.DisplayObject.call(this);

        this._htmlElement = document.createElement("div");
        this._htmlElement.style.position = "absolute";

        this._specialEventHandlers = [];

        this._mouseEnabled = true;
        this._mouseEnabledFromParent = true;

        this._mouseDownX = -1;
        this._mouseDownY = -1;

        this._isDeviceClick = false;

        if(pinetree.isDevice)
        {
            this.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onDeviceClickCheck, this);
        }

        __defineGetterSetter(this, ["mouseEnabled"]);
    }

    var p = __extends(InteractiveObject, pinetree.DisplayObject);

    p._isSpecialInterested = function(type)
    {
        var b = pinetree.MouseEvent.isInterested(type) ||
                pinetree.KeyboardEvent.isInterested(type) ||
                pinetree.FocusEvent.isInterested(type) ||
                type == pinetree.Event.SCROLL;

        return b;
    }

    /**
     * override
     * only supports mouse event binding(to div), mouse event won't care about priority.
     * @param type
     * @param listener
     * @param owner
     * @param priority
     */
    p.addEventListener = function(type, listener, owner, priority)
    {
        if(this._isSpecialInterested(type))
        {
            if(pinetree.isDevice && type == pinetree.MouseEvent.CLICK)
            {
                this._addSpecialEvent(pinetree.MouseEvent.MOUSE_DOWN, listener, owner, priority, type);
                this._addSpecialEvent(pinetree.MouseEvent.MOUSE_UP, listener, owner, priority, type);
            }
            else
            {
                this._addSpecialEvent(type, listener, owner, priority, type);
            }
            return;
        }
        pinetree.DisplayObject.prototype.addEventListener.call(this, type, listener, owner, priority);
    }

    /**
     * override
     * only supports mouse event binding(to div).
     * @param type
     * @param listener
     */
    p.removeEventListener = function(type, listener, owner)
    {
        if(this._isSpecialInterested(type))
        {
            if(pinetree.isDevice && type == pinetree.MouseEvent.CLICK)
            {
                this._removeSpecialEvent(pinetree.MouseEvent.MOUSE_DOWN, listener, owner);
                this._removeSpecialEvent(pinetree.MouseEvent.MOUSE_UP, listener, owner);
            }
            else
            {
                this._removeSpecialEvent(type, listener, owner);
            }
            return;
        }
        pinetree.DisplayObject.prototype.removeEventListener.call(this, type, listener, owner);
    }

    /**
     * override
     * only supports mouse event binding(to div).
     * @param evt
     */
    p.dispatchEvent = function(evt)
    {
        if(!evt) return;
        var type = evt.type || evt.eventType;

        if(this._isSpecialInterested(type))
        {
            if(type == pinetree.MouseEvent.ROLL_OVER && (pinetree.isChrome || pinetree.isSafari))
            {
                evt = pinetree.getEvent(pinetree.MouseEvent.MOUSE_OVER);
            }
            else if(type == pinetree.MouseEvent.ROLL_OUT && (pinetree.isChrome || pinetree.isSafari))
            {
                evt = pinetree.getEvent(pinetree.MouseEvent.MOUSE_OUT);
            }
            else if(pinetree.isDevice && type == pinetree.MouseEvent.CLICK)
            {
                evt = pinetree.getEvent(pinetree.MouseEvent.MOUSE_UP);
            }

            if(type == pinetree.Event.SCROLL)
            {
                evt.elementTarget = window;
            }

            evt.elementTarget = this._htmlElement;
            pinetree.dispatchEvent(this._htmlElement, evt);
        }
        else
        {
            pinetree.DisplayObject.prototype.dispatchEvent.call(this, evt);
        }
    }

    /**
     * add to html element
     * @param type
     * @param listener
     * @param owner
     * @param priority
     * @private
     */
    p._addSpecialEvent = function(type, listener, owner, priority, originType, element)
    {
        if(!this._specialEventHandlers) return;

        var handler = Delegate.create(this, this._onSpecialEventHandler, owner, listener, type, originType);

        var fixType = type;
        if(type == pinetree.MouseEvent.ROLL_OVER && (pinetree.isChrome || pinetree.isSafari))
            fixType = pinetree.MouseEvent.MOUSE_OVER;
        else if(type == pinetree.MouseEvent.ROLL_OUT && (pinetree.isChrome || pinetree.isSafari))
            fixType = pinetree.MouseEvent.MOUSE_OUT;

        if(type == pinetree.Event.SCROLL)
        {
            element = window;
        }

        pinetree.addEventListener(element || this._htmlElement, fixType, handler, false);

        this._specialEventHandlers.push({type:type, owner:owner, listener:listener,
            newListener:handler, element:element || this._htmlElement, originType:originType});
    }

    /**
     * @param evt
     * @param owner
     * @param originListener
     * @param type
     * @private
     */
    p._onSpecialEventHandler = function(evt, owner, originListener, type, originType)
    {
        if(!this._mouseEnabled || !this._mouseEnabledFromParent) return;

        evt.elementTarget = evt.elementTarget || this._htmlElement;
        evt.customTarget = this;

        if(this._isSpecialInterested(type))
        {
            var cx = evt.clientX;
            var cy = evt.clientY;
            var sx = evt.screenX;
            var sy = evt.screenY;

            if(pinetree.isDevice && !__global.isDebug)
            {
                if(type == pinetree.MouseEvent.MOUSE_UP)
                {
                    if(evt && evt.changedTouches)
                    {
                        cx = evt.changedTouches[0].pageX;
                        cy = evt.changedTouches[0].pageY;
                    }
                    else if(window.event && window.event.changedTouches)
                    {
                        cx = window.event.changedTouches[0].pageX;
                        cy = window.event.changedTouches[0].pageY;
                    }
                }
                else
                {
                    if(evt && evt.touches)
                    {
                        cx = evt.touches[0].pageX;
                        cy = evt.touches[0].pageY;
                    }
                    else if(window.event && window.event.touches)
                    {
                        cx = window.event.touches[0].pageX;
                        cy = window.event.touches[0].pageY;
                    }
                }

                sx = cx;
                sy = cy;
            }

            evt.mouseX = cx;
            evt.mouseY = cy;
            evt.stageMouseX = sx;
            evt.stageMouseY = sy;
        }

        if(pinetree.isDevice && originType == pinetree.MouseEvent.CLICK)
        {
            if(type == pinetree.MouseEvent.MOUSE_DOWN)
            {
                this._mouseDownX = this.stage.mouseX;
                this._mouseDownY = this.stage.mouseY;

                this._isDeviceClick = true;
                return;
            }
            else if(type == pinetree.MouseEvent.MOUSE_UP)
            {
                if(this._mouseDownX < 0 || this._mouseDownY < 0)
                {
                    return;
                }

                var offset = Math.sqrt(Math.pow(this._mouseDownX - this.stage.mouseX, 2)
                    + Math.pow(this._mouseDownY - this.stage.mouseY, 2));

                this._mouseDownX = -1;
                this._mouseDownY = -1;

                if(offset > pinetree.touchGapSet || !this._isDeviceClick)
                {
                    return;
                }
                this._isDeviceClick = false;
            }
        }

        var target, related;

        if(type == pinetree.MouseEvent.MOUSE_WHEEL)
        {
            var delta = 0;
            if(pinetree.isFirefox)
                delta = evt.deltaY / 3;
            else
                delta = evt.deltaY / 120;
            evt.delta = - delta * pt.SCOLL_SPEED;
        }
        else if(type == pinetree.MouseEvent.ROLL_OVER && (pinetree.isChrome || pinetree.isSafari))
        {
            target = evt.currentTarget, related = evt.relatedTarget || evt.fromElement;
            if(!pinetree.containsElement(target, related) && target !== related)
            {
                originListener.call(owner, evt);
            }
            return;
        }
        else if(type == pinetree.MouseEvent.ROLL_OUT && (pinetree.isChrome || pinetree.isSafari))
        {
            target= evt.currentTarget, related = evt.relatedTarget || evt.toElement;
            if(!pinetree.containsElement(target, related) && target !== related)
            {
                originListener.call(owner, evt);
            }
            return;
        }

        originListener.call(owner, evt);
    }

    /**
     * remove event from html element
     * @param type
     * @param listener
     * @private
     */
    p._removeSpecialEvent = function(type, listener, owner)
    {
        if(!this._specialEventHandlers) return;

        var i = this._specialEventHandlers.length, obj, handler;
        while(i --)
        {
            obj = this._specialEventHandlers[i];
            if(obj)
            {
                if(obj.type == type && obj.listener == listener && obj.owner == owner)
                {
                    handler = obj.newListener;
                    break;
                }
            }
            else
            {
                this._specialEventHandlers[i] = null;
                this._specialEventHandlers.splice(i, 1);
            }
        }

        if(handler)
        {
            pinetree.removeEventListener(obj.element, type,
                handler, false);
            obj.listener= null;
            obj.newListener = null;
            obj.owner = null;
            obj.type = null;
            obj.originType = null;
            obj.element = null;
            delete obj.listener;
            delete obj.newListener;
            delete obj.owner;
            delete obj.type;
            delete obj.element;
            this._specialEventHandlers[i] = null;
            this._specialEventHandlers.splice(i, 1);
        }
    }

    p.hasEventListener = function(type)
    {
        if(this._specialEventHandlers && this._isSpecialInterested(type))
        {
            var i = this._specialEventHandlers.length, obj;
            while(i --)
            {
                obj = this._specialEventHandlers[i];
                if(obj)
                {
                    if(obj.originType == type)
                    {
                        return true;
                    }
                }
            }
        }

        return pinetree.DisplayObject.prototype.hasEventListener.call(this, type);
    }

    p._onDeviceClickCheck = function(evt)
    {
        if(!this._isDeviceClick) return;
        this._isDeviceClick = false;
    }

    p.getMouseEnabled = function() { return this._mouseEnabled; }
    p.setMouseEnabled = function(value)
    {
        this._mouseEnabled = value;
        if(value)
        {
            if(this.stage && this.hitTestPoint(this.stage.mouseX, this.stage.mouseY))
            {
                this.dispatchWith(pinetree.MouseEvent.ROLL_OVER);
                if(!(pinetree.isChrome || pinetree.isSafari))
                {
                    this.dispatchWith(pinetree.MouseEvent.MOUSE_OVER);
                }
            }

            this._htmlElement.style.cursor = "auto";
        }
        else
        {
            this.dispatchWith(pinetree.MouseEvent.ROLL_OUT);
            if(!(pinetree.isChrome || pinetree.isSafari))
            {
                this.dispatchWith(pinetree.MouseEvent.MOUSE_OUT);
            }

            this._htmlElement.style.cursor = "default";
        }
    }

    p.dispose = function()
    {
        if(this._specialEventHandlers)
        {
            var i = this._specialEventHandlers.length, obj, handler;
            while(i --)
            {
                obj = this._specialEventHandlers[i];
                if(obj)
                {
                    handler = obj.newListener;
                    if(handler)
                    {
                        pinetree.removeEventListener(obj.element, obj.type, handler, false);
                        obj.listener= null;
                        obj.newListener = null;
                        obj.owner = null;
                        obj.type = null;
                        obj.element = null;
                        delete obj.listener;
                        delete obj.newListener;
                        delete obj.owner;
                        delete obj.type;
                        delete obj.element;
                        this._specialEventHandlers[i] = null;
                        this._specialEventHandlers.splice(i, 1);
                    }
                }
                else
                {
                    this._specialEventHandlers[i] = null;
                    this._specialEventHandlers.splice(i, 1);
                }
            }
        }

        if(pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onDeviceClickCheck, this);
        }

        this._specialEventHandlers = null;
        pinetree.DisplayObject.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object InteractiveObject]";
    }

    pinetree.InteractiveObject = InteractiveObject;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-21.
 * NOTE: This class is an abstrace class, it shouldn't and can't be instanced. PLEASE USE <code>Sprite</code> OR
 * OTHER CHILD-CLASS OF THIS CLASS INSTEAD!
 */
(function()
{

    var DisplayObjectContainer = function()
    {
        pinetree.InteractiveObject.call(this);

        this._mouseChildren = true;
        this._children = [];

        __defineGetterSetter(this, ["numChildren", "mouseChildren"]);
    }

    var p = __extends(DisplayObjectContainer, pinetree.InteractiveObject);

    p.contains = function(child)
    {
        if(!child)
        {
            trace("error: at DisplayObjectContainer::contains(), child is null!");
            return false;
        }

        if(!(child instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::contains(), child is not a displayobject!");
            return false;
        }

        return this.getChildIndex(child) > -1;
    }

    p.addChild = function(child)
    {
        if(!child)
        {
            trace("error: at DisplayObjectContainer::addChild(), child is null!");
            return null;
        }

        if(!(child instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::addChild(), child is not a displayobject!");
            return null;
        }

        this.addChildAt(child, this.getNumChildren());
        return child;
    }

    p.addChildAt = function(child, index)
    {
        if(!child)
        {
            trace("error: at DisplayObjectContainer::addChildAt(), child is null!");
            return null;
        }

        if(!(child instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::addChildAt(), child is not a displayobject!");
            return null;
        }

        if(!this.contains(child))
        {
            if(child.parent)
            {
                child.removeFromParent();
            }

            this._children.push(child);
            this._htmlElement.appendChild(child.getHtmlElement());
            child._parent = this;

            this.setChildEnabled(this._mouseChildren ? this._mouseEnabledFromParent : false, false);

            if((child instanceof pinetree.Sprite) && !this._mouseChildren)
            {
                child.getHtmlElement().style.cursor = "default";
            }

            this._setChildStage(child, this.stage != null);
        }
        if(child instanceof pinetree.Sprite)
        {
            child.buttonMode = child.buttonMode;
        }
        this.setChildIndex(child, index);
        return child;
    }

    /**
     * private method. NOTE: child._stage should only be called here, otherwise unknown issues may happen.
     * @param child
     * @private
     */
    p._setChildStage = function(child, value)
    {
        if((child instanceof pinetree.DisplayObjectContainer) && child.numChildren > 0)
        {
            var i = child.numChildren;
            while(i --)
            {
                this._setChildStage(child.getChildAt(i), value);
            }
        }

        var changed = (child._stage && !value) || (!child._stage && value);
        if(changed)
        {
            if(value)
            {
                child._stage = pinetree.stage;
                child.dispatchWith(pinetree.Event.ADDED_TO_STAGE);
                child.addedToStage();
            }
            else
            {
                child.dispatchWith(pinetree.Event.REMOVED_FROM_STAGE);
                child.removedFromStage();
                child._stage = null;
            }
        }
    }

    p.removeChild = function(child)
    {
        if(!child)
        {
            trace("error: at DisplayObjectContainer::removeChild(), child is null!");
            return;
        }

        if(!(child instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::removeChild(), child is not a displayobject!");
            return;
        }

        var index = this.getChildIndex(child);
        if(index > -1)
        {
            this._children[index] = null,
            this._children.splice(index, 1);
            child._mouseEnabledFromParent = true;
            this._htmlElement.removeChild(child.getHtmlElement());
            /*if(child instanceof pinetree.DisplayObjectContainer)
            {
                child.mouseChildren = true;
            }*/

            if(child instanceof pinetree.Sprite)
            {
                child.buttonMode = child.buttonMode;
            }

            child._parent = null;
            this._setChildStage(child, false);
            this._updateIndex();
        }
    }

    p.removeChildAt = function(index)
    {
        var child = this.getChildAt(index);
        if(child)
        {
            this.removeChild(child);
        }
        else
        {
            trace("error: at DisplayObjectContainer::removeChildAt(), child is null!");
        }
        return child;
    }

    p.removeAllChildren = function()
    {
        var i = this.getNumChildren();
        while(i --)
        {
            this.removeChildAt(i);
        }
        this._children.splice(0, this._children.length);
    }

    p.getChildIndex = function(child)
    {
        var i = this._children.length;
        while(i --)
        {
            if(this._children[i] == child)
            {
                return i;
            }
        }
        return -1;
    }

    p.getChildAt = function(index)
    {
        if(index < 0 || index > this._children.length - 1)
            return null;
        return this._children[index];
    }

    p.setChildIndex = function(child, index)
    {
        if(!child)
        {
            trace("error: at DisplayObjectContainer::setChildIndex(), child is null!");
            return;
        }

        if(!(child instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::setChildIndex(), child is not a displayobject!");
            return;
        }

        var oldIndex = this.getChildIndex(child);
        if(oldIndex < 0) return;
        if(index < 0 || index >= this._children.length)
            index = this._children.length - 1;

        this._children.splice(oldIndex, 1);
        this._children.splice(index, 0, child);
        this._updateIndex();
    }

    p._updateIndex = function()
    {
        var i = this._children.length;
        while(i --)
        {
            this._children[i].getHtmlElement().style.zIndex = i;
        }
    }

    p.getNumChildren = function()
    {
        return this._children.length;
    }

    p.getChildById = function(id)
    {
        var i = this.getNumChildren(), child;
        while(i --)
        {
            child = this.getChildAt(i);
            if(child && child.id == id)
            {
                return child;
            }
        }
        return null;
    }

    p.getChildByName = function(name)
    {
        var i = this.getNumChildren(), child;
        while(i --)
        {
            child = this.getChildAt(i);
            if(child && child.name == name)
            {
                return child;
            }
        }
        return null;
    }

    p.swapChildren = function(child1, child2)
    {
        if(!child1 || !child2)
        {
            trace("error: at DisplayObjectContainer::swapChildren(), child1 or child2 is null!");
            return;
        }

        if(!(child1 instanceof pinetree.DisplayObject) || !(child2 instanceof pinetree.DisplayObject))
        {
            trace("error: at DisplayObjectContainer::swapChildren(), child1 or child2 is not a displayobject!");
            return;
        }

        var index1 = this.getChildIndex(child1);
        var index2 = this.getChildIndex(child2);
        if(index1 < 0 || index2 < 0)
        {
            trace("error: at DisplayObjectContainer::swapChildren(), child1 or child2 is not a child of this Sprite!");
            return;
        }

        this.swapChildrenAt(index1, index2);
    }

    p.swapChildrenAt = function(index1, index2)
    {
        var child1 = this.getChildAt(index1);
        var child2 = this.getChildAt(index2);

        if(!child1 || !child2)
        {
            trace("error: at DisplayObjectContainer::swapChildrenAt(), index1 or index2 is wrong!");
            return;
        }

        this._children[index1] = child2;
        this._children[index2] = child1;
        this._updateIndex();
    }

    p.getMouseChildren = function() { return this._mouseChildren; }
    p.setMouseChildren = function(value)
    {
        this._mouseChildren = value;
        this.setChildEnabled(this._mouseChildren ? this._mouseEnabledFromParent : false, true);
    }

    p.setChildEnabled = function(value, triggerMouseEvent)
    {
        var i = this.getNumChildren(), child;
        while(i --)
        {
            child = this.getChildAt(i);
            if(child)
            {
                if(triggerMouseEvent)
                {
                    if(!value)
                    {
                        child.dispatchWith(pinetree.MouseEvent.ROLL_OUT);
                        if(!(pinetree.isChrome || pinetree.isSafari))
                        {
                            child.dispatchWith(pinetree.MouseEvent.MOUSE_OUT);
                        }
                    }
                    else
                    {
                        if(this.mouseEnabled && child.stage && (!(child.stage.mouseX == 0 && child.stage.mouseY == 0))
                            && child.hitTestPoint(child.stage.mouseX, child.stage.mouseY))
                        {
                            child.dispatchWith(pinetree.MouseEvent.ROLL_OVER);
                            if(!(pinetree.isChrome || pinetree.isSafari))
                            {
                                child.dispatchWith(pinetree.MouseEvent.MOUSE_OVER);
                            }
                        }
                    }
                }

                child._mouseEnabledFromParent = value;

                if(child instanceof pinetree.DisplayObjectContainer)
                {
                    child.setChildEnabled(value, triggerMouseEvent);
                }
            }
        }
    }

    p.dispose = function()
    {
        this.removeAllChildren();
        pinetree.InteractiveObject.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object DisplayObjectContainer]";
    }

    pinetree.DisplayObjectContainer = DisplayObjectContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-22.
 */
(function()
{

    /**
     * NOTE: This class does'nt support to set the scale and size!
     * @constructor
     */
    var Shape = function()
    {
        pinetree.DisplayObject.call(this);

        this._htmlElement = document.createElement("div");
        this._htmlElement.style.position = "absolute";

        this._canvas = null;
        this._graphics = null;

        __defineGetterSetter(this, ["graphics"]);
    }
    var p = __extends(Shape, pinetree.DisplayObject);

    p.validate = function()
    {
        pinetree.DisplayObject.prototype.validate.call(this);

        if(this._canvas)
        {
            this._canvas.style.width = this._htmlElement.style.width;
            this._canvas.style.height = this._htmlElement.style.height;
        }
    }

    p.getGraphics = function()
    {
        if(!this._graphics)
        {
            if(!this._canvas)
            {
                this._canvas = document.createElement("canvas");
                this._canvas.width = 1;
                this._canvas.height = 1;
                this._canvas.style.position = "absolute";
                this._htmlElement.appendChild(this._canvas);
            }
            this._graphics = new pinetree.Graphics(this._canvas);
        }
        return this._graphics;
    }

    p.toString = function()
    {
        return "[Object Shape]";
    }

    pinetree.Shape = Shape;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-28.
 */
(function()
{
    var Quad = function()
    {
        pinetree.DisplayObject.call(this);

        this._htmlElement = document.createElement("div");
        this._htmlElement.style.position = "absolute";

        this._color = 0xffffff;
        this._width = 0;
        this._height = 0;

        this._tweenSrcColor = 0x000000;
        this._tweenDestColor = 0xffffff;
        this._tweenPercent = 0;
        this._isTweeningColor = false;

        __defineGetterSetter(this, ["color"]);
    }

    var p = __extends(Quad, pinetree.DisplayObject);

    p.getColor = function() { return this._color; }
    p.setColor = function(value)
    {
        this._color = value;
        this._htmlElement.style.backgroundColor = pinetree.getColorString(this._color);
    }

    p.tweenColor = function(color, time, transition, callback)
    {
        if(time == 0)
        {
            this.color = color;
            callback && callback();
            return;
        }

        this._tweenPercent = 0;
        this._tweenSrcColor = this._color;
        this._tweenDestColor = color;

        this._isTweeningColor = true;

        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
        TweenMax.to(this, isNaN(time) ? 1.0 : time, {_tweenPercent:1, ease:transition || Quad.easeOut,
            onUpdate:this.onTweenColorUpdate, onUpdateParams:[this],
            onComplete:this.onTweenColorComplete, onCompleteParams:[this, callback]
        });
    }

    p.onTweenColorComplete = function(owner, callback)
    {
        owner._isTweeningColor = false;
        callback && callback();
    }

    p.onTweenColorUpdate = function(owner)
    {
        owner.color = pinetree.getOffsetColor(owner._tweenSrcColor, owner._tweenDestColor, owner._tweenPercent);
    }

    p.stopTweenColor = function()
    {
        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
    }

    p.removedFromStage = function()
    {
        this.stopTweenColor();
        if(this._isTweeningColor)
        {
            this.color = this._tweenDestColor;
        }
        pinetree.DisplayObject.prototype.removedFromStage.call(this);
    }

    p.dispose = function()
    {
        this.stopTweenColor();
        pinetree.DisplayObject.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object Quad]";
    }

    pinetree.Quad = Quad;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-19.
 */
(function()
{
    var CanvasQuad = function(radiusTL, radiusTR, radiusBL, radiusBR, isStroke, thickness)
    {
        pinetree.Quad.call(this);

        this._canvas = null;
        this._graphics = null;

        this._isStroke = __defaultSet(isStroke, false);
        this._thickness = __defaultSet(thickness, 1);

        this._radiusTL = __defaultSet(radiusTL, 0);
        this._radiusTR = __defaultSet(radiusTR, 0);
        this._radiusBL = __defaultSet(radiusBL, 0);
        this._radiusBR = __defaultSet(radiusBR, 0);

        __defineGetterSetter(this, ["graphics"]);
    }

    var p = __extends(CanvasQuad, pinetree.Quad);

    p.getGraphics = function()
    {
        if(!this._graphics)
        {
            if(!this._canvas)
            {
                this._canvas = document.createElement("canvas");
                this._canvas.width = 1;
                this._canvas.height = 1;
                this._canvas.style.position = "absolute";
                this._htmlElement.appendChild(this._canvas);
            }
            this._graphics = new pinetree.Graphics(this._canvas);
        }
        return this._graphics;
    }

    p.setShadow = function(color, alpha, blur, offsetX, offsetY)
    {
        this.graphics.setShadow(color, alpha, blur, offsetX, offsetY);
        this.draw();
    }

    p.getColor = function() { return this._color; }
    p.setColor = function(value)
    {
        this._color = value;
        this.draw();
    }

    p.getWidth = function() { return this._width; }
    p.setWidth = function(value)
    {
        this._width = value;
        this.draw();
    }

    p.getHeight = function() { return this._height; }
    p.setHeight = function(value)
    {
        this._height = value;
        this.draw();
    }

    p.draw = function()
    {
        this.graphics.clear();

        if(this._width <= 0 || this._height <= 0)
        {
            return;
        }

        if(this._width > 0 && this._height > 0)
        {
            this._canvas.width = this._width;
            this._canvas.height = this._height;
        }

        if(this._isStroke)
        {
            this.graphics.lineStyle(this._thickness, this._color, 1);
            this.graphics.drawRoundRect(0, 0, this._width, this._height,
                this._radiusTL, this._radiusTR, this._radiusBL, this._radiusBR);
            this.graphics.stroke();
        }
        else
        {
            this.graphics.beginFill(this._color, 1);
            this.graphics.drawRoundRect(0, 0, this._width, this._height,
                this._radiusTL, this._radiusTR, this._radiusBL, this._radiusBR);
            this.graphics.endFill();
        }
    }

    p.toString = function()
    {
        return "[Object CanvasQuad]";
    }

    pinetree.CanvasQuad = CanvasQuad;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-19.
 */
(function()
{
    var CanvasCircle = function(radius, isRegisterCenter)
    {
        pinetree.CanvasQuad.call(this);

        this._radius = __defaultSet(radius, 0);
        this._isRegisterCenter = __defaultSet(isRegisterCenter, false);

        if(this._radius > 0)
        {
            this.draw();
        }

        __defineGetterSetter(this, ["radius"]);
    }

    var p = __extends(CanvasCircle, pinetree.CanvasQuad);

    p.getWidth = function() { return this._radius + this._radius; }
    p.setWidth = function(value)
    {
        this._width = value;
    }

    p.getHeight = function() { return this._radius + this._radius; }
    p.setHeight = function(value)
    {
        this._height = value;
    }

    p.getRadius = function() { return this._radius; }
    p.setRadius = function(value)
    {
        if(isNaN(value) || value < 0 || value == this._radius) return;

        this._radius = value;
        this.draw();
    }

    p.tweenRadius = function(radius, time, transition, callback)
    {
        if(time == 0)
        {
            this.radius = radius;
            callback && callback();
            return;
        }

        TweenMax.killTweensOf(this, false, {radius:true});
        TweenMax.to(this, isNaN(time) ? 1.0 : time, {radius:radius, ease:transition || Quad.easeOut, onComplete:callback});
    }

    p.stopTweenRadius = function()
    {
        TweenMax.killTweensOf(this);
    }

    /**
     * override
     */
    p.draw = function()
    {
        this.graphics.clear();

        if(this._radius <= 0)
        {
            return;
        }

        if(this._radius > 0)
        {
            this._canvas.width = this._radius + this._radius;
            this._canvas.height = this._radius + this._radius;
        }

        this.graphics.beginFill(this._color, 1);
        this.graphics.drawCircle(this._radius, this._radius, this._radius);
        this.graphics.endFill();

        if(this._isRegisterCenter)
        {
            this._canvas.style.left = - this._radius + "px";
            this._canvas.style.top = - this._radius + "px";
        }
    }

    p.dispose = function()
    {
        this.stopTweenRadius();
        pinetree.CanvasQuad.prototype.dispose.call(this);
    }

    pinetree.CanvasCircle = CanvasCircle;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var Texture = function(imageData, drawX, drawY, sourceWidth, sourceHeight)
    {
        this.name = "";

        this._imageData = imageData;
        this._drawX = drawX || 0;
        this._drawY = drawY || 0;
        this._sourceWidth = sourceWidth == undefined ? this._imageData ? this._imageData.width : 0 : sourceWidth;
        this._sourceHeight = sourceHeight == undefined ? this._imageData ? this._imageData.height : 0 : sourceHeight;

        __defineGetterSetter(this, ["imageData", "drawX", "drawY", "sourceWidth", "sourceHeight"]);
    }

    Texture.fromBitmapData = function(bitmapData)
    {
        var imageData = bitmapData.imageData;
        return new pinetree.Texture(imageData);
    }

    Texture.fromImage = function(image)
    {
        var w = image.naturalWidth;
        var h = image.naturalHeight;
        var imageData = pinetree.BitmapUtil.getImageData(image, new pinetree.Rectangle(0, 0, w, h));
        return new pinetree.Texture(imageData);
    }

    Texture.fromCanvas = function(canvas)
    {
        var w = canvas.width;
        var h = canvas.height;
        var imageData = pinetree.BitmapUtil.getImageData(canvas, new pinetree.Rectangle(0, 0, w, h));
        return new pinetree.Texture(imageData);
    }

    var p = Texture.prototype;

    p.getImageData = function()
    {
        return this._imageData;
    }

    p.getDrawX = function()
    {
        return this._drawX;
    }

    p.getDrawX = function()
    {
        return this._drawX;
    }

    p.getDrawY = function()
    {
        return this._drawY;
    }

    p.getSourceWidth = function()
    {
        return this._sourceWidth;
    }

    p.getSourceHeight = function()
    {
        return this._sourceHeight;
    }

    pinetree.Texture = Texture;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-11.
 */
(function()
{
    var TextureAtlas = function(image, jsonData)
    {
        this._image = image;
        this._jsonData = jsonData;

        this._textures = {};
        this._texturesByPrefix = {};

        this._parse();
    }

    var p = TextureAtlas.prototype;

    p._parse = function()
    {
        var data = this._jsonData.frames;
        if(data && data.length && this._image)
        {
            var canvas = pinetree.createCanvas(this._image.naturalWidth, this._image.naturalHeight);
            var context = canvas.getContext("2d");
            context.drawImage(this._image, 0, 0, this._image.naturalWidth, this._image.naturalHeight);

            var len = data.length, obj, texture, imageData, key;
            for(var i = 0; i < len; i ++)
            {
                obj = data[i];
                imageData = context.getImageData(obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h);
                texture = new pinetree.Texture(imageData, obj.spriteSourceSize.x, obj.spriteSourceSize.y,
                    obj.sourceSize.w, obj.sourceSize.h);
                key = this._removeFileExtension(obj.filename);
                texture.name = key;
                this._textures[key] = texture;
            }
        }
    }

    p.getTexture = function(name)
    {
        return this._textures[name];
    }

    p.getTextures = function(prefix)
    {
        if(this._texturesByPrefix[prefix])
            return this._texturesByPrefix[prefix];

        var data = [];
        for(var key in this._textures)
        {
            if(key.indexOf(prefix) == 0)
            {
                data.push({index:key.substring(prefix.length), texture:this._textures[key]});
            }
        }

        data.sort(this._sortCompareHandler);

        var i = data.length;
        while(i --)
        {
            data[i] = data[i].texture;
        }

        this._texturesByPrefix[prefix] = data;

        return data;
    }

    p._sortCompareHandler = function(obj1, obj2)
    {
        var index1 = parseFloat(obj1.index);
        var index2 = parseFloat(obj2.index);

        if(index1 < index2)
            return -1;
        else if(index1 > index2)
            return 1;
        else
            return 0;
    }

    p._removeFileExtension = function(fileName)
    {
        var index = fileName.lastIndexOf(".");
        if(index > 0)
        {
            return fileName.substring(0, index);
        }
        return fileName;
    }

    p.dispose = function()
    {
        var key;
        for(key in this._textures)
        {
            delete  this._textures[key];
        }
        for(key in this._texturesByPrefix)
        {
            this._texturesByPrefix[key] && this._texturesByPrefix[key].splice(0, this._texturesByPrefix[key].length);
            delete  this._texturesByPrefix[key];
        }

        this._image = null;
        this._jsonData = null;
    }

    pinetree.TextureAtlas = TextureAtlas;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-11.
 */
(function()
{
    var TextureImage = function(texture)
    {
        pinetree.InteractiveObject.call(this);

        this._htmlElement = document.createElement("canvas");
        this._context = this._htmlElement.getContext("2d");
        this._htmlElement.style.position = "absolute";

        this._originWidth = 0;
        this._originHeight = 0;

        this.setTexture(texture);

        __defineGetterSetter(this, ["texture", "canvas", "context", "originWidth", "originHeight"]);
    }

    var p = __extends(TextureImage, pinetree.InteractiveObject);

    p.getTexture = function() { return this._texture; }
    p.setTexture = function(texture)
    {
        this._texture = texture;

        this._context.clearRect(0, 0, this._htmlElement.width, this._htmlElement.height);
        if(texture)
        {
            this._htmlElement.width = texture.sourceWidth;
            this._htmlElement.height = texture.sourceHeight;
            this._context.putImageData(texture.imageData, texture.drawX, texture.drawY);

            this._originWidth = texture.sourceWidth;
            this._originHeight = texture.sourceHeight;

            this._width = this._htmlElement.width;
            this._height = this._htmlElement.height;
        }
    }

    p.getCanvas = function()
    {
        return this._htmlElement;
    }

    p.getContext = function()
    {
        return this._context;
    }

    p.getWidth = function()
    {
        return this._width;
    }

    p.getHeight = function()
    {
        return this._height;
    }

    p.getOriginWidth = function()
    {
        return this._originWidth;
    }

    p.getOriginHeight = function()
    {
        return this._originHeight;
    }

    pinetree.TextureImage = TextureImage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-21.
 */
(function()
{
    var BitmapData = function(width, height, transparent, fillColor)
    {
        pinetree.EventDispatcher.call(this);

        this._disposed = false;

        this._width = width || 0;
        this._height = height || 0;
        this._transparent = transparent == undefined ? true : false;
        this._fillColor = fillColor || 0x000000;

        this._imageData = null;

        __defineGetterSetter(this, ["imageData", "width", "height", "isTransparent", "fillColor"]);
    }

    var p = __extends(BitmapData, pinetree.EventDispatcher);

    p.clone = function()
    {
        if(this._disposed) return null;

        var bd = new pinetree.BitmapData(this._width, this._height, this._transparent, this._fillColor);
        bd._imageData = this._imageData;
        return bd;
    }

    p.from = function(imageData)
    {
        this._imageData = imageData;
    }

    /**
     * source can be image, canvas or video
     * @param source
     */
    p.draw = function(source, rect)
    {
        if(this._disposed) return;

        if(!rect)
        {
            rect = new pinetree.Rectangle(0, 0, source.naturalWidth || this._width, source.naturalHeight || this._height);
        }
        if(this._width <= 0) this._width = rect.width;
        if(this._height <= 0) this._height = rect.height;
        if(rect.width > this._width) rect.width = this._width;
        if(rect.height > this._height) rect.height = this._height;

        this._imageData = pinetree.BitmapUtil.getImageData(source, rect);
    }

    /**
     * @returns images array
     */
    p.getImageData = function()
    {
        return this._imageData;
    }

    p.getWidth = function()
    {
        return this._width;
    }

    p.getHeight = function()
    {
        return this._height;
    }

    p.getIsTransparent = function()
    {
        this._transparent;
    }

    p.getFillColor = function()
    {
        return this._fillColor;
    }

    p.dispose = function()
    {
        if(this._disposed) return;

        this.dispatchWith(pinetree.Event.DISPOSE);
        this._disposed = true;
        pinetree.EventDispatcher.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object BitmapData]";
    }

    //to-do:other features

    pinetree.BitmapData = BitmapData;
}());

/**
 * Created by pineree on 14-4-21.
 */
(function()
{
    var Bitmap = function(bd)
    {
        pinetree.DisplayObject.call(this);

        this._bitmapData = null;
        this._htmlElement = document.createElement("canvas");
        this._context = this._htmlElement.getContext("2d");
        this._htmlElement.style.position = "absolute";

        this.setBitmapData(bd || null);

        __defineGetterSetter(this, ["bitmapData", "canvas", "context"]);
    }

    var p = __extends(Bitmap, pinetree.DisplayObject);

    p.getBitmapData = function() { return this._bitmapData; }
    p.setBitmapData = function(bitmapData)
    {
        if(this._bitmapData == bitmapData) return;

        if(!bitmapData)
        {
            if(this._bitmapData)
            {
                this._bitmapData.removeEventListener(pinetree.Event.DISPOSE, this._onBitmapDataDispose, this);
                this._context.clearRect(0, 0, this._bitmapData.width, this._bitmapData.height);
                this._bitmapData = null;
            }
            return;
        }

        if(!(bitmapData instanceof pinetree.BitmapData)) return;

        if(!this._bitmapData)
            bitmapData.addEventListener(pinetree.Event.DISPOSE, this._onBitmapDataDispose, this);
        this._bitmapData = bitmapData;
        this._htmlElement.width = this._bitmapData.width;
        this._htmlElement.height = this._bitmapData.height;
        var imageData = this._bitmapData.imageData || this._context.createImageData(this._bitmapData.width, this._bitmapData.height);
        this._context.putImageData(imageData, 0, 0);
    }

    p._onBitmapDataDispose = function()
    {
        this._bitmapData.removeEventListener(pinetree.Event.DISPOSE, this._onBitmapDataDispose, this);
        this._context.clearRect(0, 0, this._bitmapData.width, this._bitmapData.height);
        this._bitmapData = null;
    }

    p.getCanvas = function()
    {
        return this._htmlElement;
    }

    p.getContext = function()
    {
        return this._context;
    }

    p.toString = function()
    {
        return "[Object Bitmap]";
    }

    pinetree.Bitmap = Bitmap;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-13.
 * It's better to use css to control the format.
 */
(function()
{

    var TextField = function()
    {
        pinetree.InteractiveObject.call(this);

        this._width = -1;
        this._height = -1;

        this._overflow = null;

        this._limitValue = 0;
        this._limitWithNumlines = true;

        this._htmlElement.style.display = "block";

        this.className = "textfield";

        this._text = "";
        this._textColor = -1;

        this._align = "left";

        this._tweenSrcColor = 0x000000;
        this._tweenDestColor = 0xffffff;
        this._tweenPercent = 0;

        __defineGetterSetter(this, ["textColor", "text", "htmlText", "textWidth", "textHeight",
            "wordWrap", "fontSize", "bold", "lineHeight", "overflow", "align", "textAlign", "fontFamily"
        ]);
    };

    var p = __extends(TextField, pinetree.InteractiveObject);

    p.setLimitation = function(value, withNumlines)
    {
        /*if(this._limitValue == value && this._limitWithNumlines == !!withNumlines)
            return;*/

        if(!this.computedStyle) return;

        this._limitValue = value;
        this._limitWithNumlines = !!withNumlines;

        this.overflow = "hidden";

        var lineNum = 0;
        var lineHeight = Math.floor(this._pixelToNumber(this.computedStyle.lineHeight));
        if(isNaN(lineHeight)) return;

        this.height = 1;

        if(this._limitWithNumlines)
        {
            lineNum = value;
        }
        else
        {
            lineNum = Math.floor(this._limitValue / lineHeight);
        }

        var h = lineNum * lineHeight;
        if(h <= this.height)
        {
            this.height = h;
        }
        else
        {
            this.height = this.height;
        }

        if(!this._limitWithNumlines)
        {
            if(value < lineHeight)
            {
                this.height = 1;
            }
        }
    }

    p._pixelToNumber = function(pixelString)
    {
        if(pixelString == undefined) return 0;
        if(pixelString.toLowerCase().indexOf("px") > -1)
        {
            pixelString = pixelString.replace("px", "");
        }
        return parseFloat(pixelString);
    }

    p.getText = function() { return this._text; }
    p.setText = function(value)
    {
        if(value == this._text) return;
        this._text = value;

        if(pinetree.isFirefox)
        {
            this._htmlElement.textContent = value;
        }
        else
        {
            this._htmlElement.innerText = value;
        }
    }

    p.getAlign = function() { return this._align; }
    p.setAlign = function(value)
    {
        this._align = value;
        this._htmlElement.style.textAlign = value;
    }

    p.getTextAlign = function() { return this._align; }
    p.setTextAlign = function(value)
    {
        this._align = value;
        this._htmlElement.style.textAlign = value;
    }

    p.setLineHeight = function(value)
    {
        this.htmlStyle.lineHeight = value;
    }

    p.getHtmlText = function() { return this._htmlText; }
    p.setHtmlText = function(value)
    {
        if(value == this._htmlText) return;
        this._htmlText = value;
        this._htmlElement.innerHTML = value;
    }

    p.getTextColor = function() { return this._textColor; }
    p.setTextColor = function(value)
    {
        if(value == this._textColor) return;
        this._textColor = value;
        this._htmlElement.style.color = pinetree.getColorString(this._textColor);
    }

    p.setFontFamily = function(value)
    {
        this._htmlElement.style.fontFamily = value;
    }

    p.setWordWrap = function(value)
    {
        this._htmlElement.style.whiteSpace = !value ? "nowrap" : "pre-wrap";
    }

    p.setBold = function(value)
    {
        this._htmlElement.style.fontWeight = !value ? "normal" : "bolder";
    }

    p.setOverflow = function(value)
    {
        if(this._overflow == value) return;

        this._overflow = value;
        this._htmlElement.style.overflow = value;
    }

    p.getTextWidth = function() { return this._htmlElement.clientWidth; }

    p.getTextHeight = function() { return this._htmlElement.clientHeight; }

    /*p.getWidth = function() { return this._width < 0 ? this._htmlElement.scrollWidth : this._width; };

     p.getHeight = function() { return this._height < 0 ? this._htmlElement.scrollHeight : this._height; };*/

    p.getFontSize = function() { return this._htmlElement.style.fontSize; }
    p.setFontSize = function(value)
    {
        this._htmlElement.style.fontSize = value + "px";
    }

    p.tweenColor = function(color, time, ease, callback)
    {
        if(time == 0)
        {
            this.textColor = color;
            return;
        }

        this._tweenPercent = 0;
        this._tweenSrcColor = this._textColor;
        this._tweenDestColor = color;

        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
        TweenMax.to(this, isNaN(time) ? 1.0 : time, {_tweenPercent:1, ease:ease || Quad.easeOut,
            onUpdate:this.onTweenColorUpdate, onUpdateParams:[this],
            onComplete:this.onTweenColorComplete, onCompleteParams:[this, callback]
        });
    }

    p.onTweenColorComplete = function(owner, callback)
    {
        callback && callback();
    }

    p.onTweenColorUpdate = function(owner)
    {
        var color = pinetree.getOffsetColor(owner._tweenSrcColor, owner._tweenDestColor, owner._tweenPercent);
        owner.textColor = color;
    }

    p.stopTweenColor = function()
    {
        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
    }

    p.removedFromStage = function()
    {
        pinetree.InteractiveObject.prototype.removedFromStage.call(this);
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);
        pinetree.InteractiveObject.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object TextField]";
    }

    pinetree.TextField = TextField;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-30.
 */
(function()
{
    var InputTextField = function()
    {
        pinetree.InteractiveObject.call(this);

        this._width = 100;
        this._height = 50;

        this._htmlElement = document.createElement("textarea");
        this._htmlElement.style.display = "block";
        this._htmlElement.style.border = "0px";
        this._htmlElement.style.resize = "none";
        this._htmlElement.style.overflow = "hidden";
        this._htmlElement.style.outline = "none";
        this._htmlElement.style.position = "absolute";
        this._htmlElement.style.backgroundColor = pinetree.getRGBA(0, 0);

        this._restrict = "";

        this.className = "input_textfield";
        this._textColor = 0x000000;

        this._selectable = true;

        this._tweenSrcColor = 0x000000;
        this._tweenDestColor = 0xffffff;
        this._tweenPercent = 0;

        this.setWordWrap(false);//default:single line.

        this.width = this._width;
        this.height = this._height;

        __defineGetterSetter(this, ["textColor", "text", "textWidth", "textHeight",
            "wordWrap", "fontSize", "restrict"
        ]);
    }

    var p = __extends(InputTextField, pinetree.InteractiveObject);

    p.addedToStage = function()
    {
        pinetree.InteractiveObject.prototype.addedToStage.call(this);
        this.addEventListener(pinetree.KeyboardEvent.KEYPRESS, this._onKeyPress, this);
    }

    p.removedFromStage = function()
    {
        this.removeEventListener(pinetree.KeyboardEvent.KEYPRESS, this._onKeyPress, this);
        pinetree.InteractiveObject.prototype.removedFromStage.call(this);
    }

    p._onKeyPress = function(evt)
    {
        if(!this._restrict) return;

        var keyCode = evt.keyCode;
        var key = String.fromCharCode(keyCode);
        if(this._restrict.indexOf(key) == -1)
        {
            evt.returnValue = false;
        }
    }

    p.setRestrict = function(value)
    {
        this._restrict = value;
    }

    p.focus = function()
    {
        this._htmlElement.focus();
    }

    p.getText = function() { return this._htmlElement.value; }
    p.setText = function(value)
    {
        if(value == this._htmlElement.value) return;
        this._htmlElement.value = value;
    }

    p.getTextColor = function() { return this._textColor; }
    p.setTextColor = function(value)
    {
        if(value == this._textColor) return;
        this._textColor = value;
        this._htmlElement.style.color = pinetree.getColorString(this._textColor);
    }

    p.setWordWrap = function(value)
    {
        this._htmlElement.style.whiteSpace = !value ? "nowrap" : "pre-wrap";
    }

    p.getTextWidth = function() { return this._width; }

    p.getTextHeight = function() { return this._height; }

    p.getWidth = function() { return this._htmlElement.scrollWidth; };

    p.getHeight = function() { return this._htmlElement.scrollHeight; };

    p.getFontSize = function() { return this._htmlElement.style.fontSize; }
    p.setFontSize = function(value)
    {
        this._htmlElement.style.fontSize = value + "px";
    }

    p.tweenColor = function(color, time, ease, callback)
    {
        if(time == 0)
        {
            this.color = color;
            return;
        }

        this._tweenPercent = 0;
        this._tweenSrcColor = this._textColor;
        this._tweenDestColor = color;
        TweenMax.to(this, isNaN(time) ? 1.0 : time, {_tweenPercent:1, ease:ease || Quad.easeOut,
            onUpdate:Delegate.create(this, this.onTweenColorUpdate), onComplete:callback});
    }

    p.onTweenColorUpdate = function()
    {
        var color = pinetree.getOffsetColor(this._tweenSrcColor, this._tweenDestColor, this._tweenPercent);
        this.textColor = color;
    }

    p.stopTweenColor = function()
    {
        TweenMax.killTweensOf(this);
    }

    p.toString = function()
    {
        return "[Object InputTextField]";
    }

    pinetree.InputTextField = InputTextField;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-11.
 */
(function()
{

    var Sprite = function()
    {
        pinetree.DisplayObjectContainer.call(this);

        this._buttonMode = false;

        this._canvas = null;
        this._graphics = null;

        __defineGetterSetter(this, ["buttonMode", "graphics"]);
    };

    var p = __extends(Sprite, pinetree.DisplayObjectContainer);

    p.getButtonMode = function() { return this._buttonMode; }
    p.setButtonMode = function(value)
    {
        this._buttonMode = value;
        this._htmlElement.style.cursor = value && this._mouseEnabled ? "pointer" : "auto";
    }

    p.getGraphics = function()
    {
        if(!this._graphics)
        {
            if(!this._canvas)
            {
                this._canvas = document.createElement("canvas");
                this._canvas.width = 1;
                this._canvas.height = 1;
                this._canvas.style.position = "absolute";
                this._htmlElement.appendChild(this._canvas);
            }
            this._graphics = new pinetree.Graphics(this._canvas);
        }
        return this._graphics;
    }

    p.setMouseEnabled = function(value)
    {
        pinetree.DisplayObjectContainer.prototype.setMouseEnabled.call(this, value);

        if(value)
        {
            this._htmlElement.style.cursor = this._buttonMode ? "pointer" : "auto";
        }
        else
        {
            this._htmlElement.style.cursor = "default";
        }
    }

    p.startDrag = function(lookCenter, bounds)
    {
        pinetree.dragPlugin.startDrag(this, lookCenter, bounds);
    }

    p.stopDrag = function()
    {
        pinetree.dragPlugin.stopDrag();
    }

    p.validate = function()
    {
        pinetree.DisplayObjectContainer.prototype.validate.call(this);

        if(this._canvas)
        {
            this._canvas.style.width = this._htmlElement.style.width;
            this._canvas.style.height = this._htmlElement.style.height;
        }
    }

    p.dispose = function()
    {
        this.stopDrag();

        pinetree.DisplayObjectContainer.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object Sprite]";
    }

    pinetree.Sprite = Sprite;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-21.
 */
(function()
{

    /**
     *
     * @param textures, an array contains texture.
     * @param timeScale, time scale, it should be integer, like 1, 2, 3...
     * @constructor
     */
    var MovieClip = function(textures, timeScale, autoPlay)
    {
        pinetree.Sprite.call(this);

        if(!this._canvas)
        {
            this._canvas = document.createElement("canvas");
            this._canvas.width = 1;
            this._canvas.height = 1;
            this._canvas.style.position = "absolute";
            this._htmlElement.appendChild(this._canvas);
        }
        this._context = this._canvas.getContext("2d");

        this._width = 0;
        this._height = 0;

        this._isPlaying = false;

        this._textures = null;
        this._textureImages = null;

        this._timeScale = timeScale == undefined ? 1.0 : Math.floor(timeScale);
        this._timeCount = 0;

        if(this._timeScale < 1) this._timeScale = 1;

        this._reverse = false;

        this._currentFrame = 1;
        this._totalFrames = 0;

        this.setTextures(textures);

        if(autoPlay == undefined || autoPlay == true)
        {
            this.play();
        }

        __defineGetterSetter(this, ["textures", "isPlaying", "currentFrame", "totalFrames", "reverse"]);
    }

    var p = __extends(MovieClip, pinetree.Sprite);

    p.setTextures = function(value)
    {
        if(value && value.constructor != Array)
        {
            trace("Error: at pinetree.MovieClip::setTextures(), value is not an Array!");
            return;
        }

        this._textures = value;
        this._textureImages = [];

        if(this._textures && this._textures.length > 0)
        {
            this._totalFrames = this._textures.length;
            var textureImage;
            for(var i = 0; i < this._totalFrames; i ++)
            {
                textureImage = new pinetree.TextureImage(this._textures[i]);
                this._textureImages.push(textureImage);

                if(textureImage.width > this._width)
                    this._width = textureImage.width;
                if(textureImage.height > this._height)
                    this._height = textureImage.height;
            }
        }
        else
        {
            this._totalFrames = 0;
        }

        this._currentFrame = 1;
        this._timeCount = 0;
        this._draw();
    }

    p.render = function()
    {
        if(this._isPlaying)
        {
            this._timeCount ++;
            if(this._timeCount == this._timeScale)
            {
                this._timeCount = 0;

                if(this._reverse)
                {
                    this._currentFrame --;
                    if(this._currentFrame < 1)
                    {
                        this._currentFrame = this._totalFrames;
                    }
                }
                else
                {
                    this._currentFrame ++;
                    if(this._currentFrame > this._totalFrames)
                    {
                        this._currentFrame = 1;
                    }
                }

                this._draw();
            }
        }
    }

    p._draw = function()
    {
        if(this._totalFrames < 1) return;

        var textureImage = this._textureImages[this._currentFrame - 1];
        if(textureImage)
        {
            this.removeAllChildren();
            this.addChild(textureImage);
        }
    }

    p.setColor = function(color, colorAlpha)
    {
        var context, w, h, imageData, textureImage;
        var i = this._textureImages.length;

        while(i --)
        {
            textureImage = this._textureImages[i];
            context = textureImage.context;
            w = textureImage.width;
            h = textureImage.height;

            imageData = context.getImageData(0, 0, w, h);

            this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);
            this._canvas.width = w;
            this._canvas.height = h;

            this._context.putImageData(imageData, 0, 0);

            context.clearRect(0, 0, w, h);
            context.globalAlpha = colorAlpha == undefined ? 1 : colorAlpha;
            context.fillStyle = pinetreecom.StringUtil.toColorString(color, false);
            context.fillRect(0, 0, w, h);
            context.globalCompositeOperation = "destination-atop";
            context.globalAlpha = 1;
            context.drawImage(this._canvas, 0, 0);
        }

        this._context.clearRect(0, 0, w, h);
        this._canvas.width = 1;
        this._canvas.height = 1;
    }

    p.play = function()
    {
        this._isPlaying = true;
        pinetree.timeMachine.addRender(this, this.render);

        this._draw();
    }

    p.stop = function()
    {
        pinetree.timeMachine.removeRender(this);
        this._isPlaying = false;

        this._draw();
        this._timeCount = 0;
    }

    p.gotoAndPlay = function(frame)
    {
        this._currentFrame = frame;
        this.play();
    }

    p.gotoAndStop = function(frame)
    {
        this._currentFrame = frame;
        this.stop();
    }

    p.removeAllFrames = function()
    {
        this._textureImages.splice(0, this._totalFrames);
        this._textures = [];
        this._totalFrames = 0;
    }

    p.getIsPlaying = function()
    {
        return this._isPlaying;
    }

    p.getWidth = function()
    {
        return this._width;
    }

    p.getHeight = function()
    {
        return this._height;
    }

    /**
     * from 1
     * @returns {number}
     */
    p.getCurrentFrame = function()
    {
        return this._currentFrame;
    }

    p.getTotalFrames = function()
    {
        return this._totalFrames;
    }

    p.setReverse = function(value)
    {
        this._reverse = value ? true : false;
    }

    p.toString = function()
    {
        return "[Object MovieClip]";
    }

    pinetree.MovieClip = MovieClip;
}());

/**
 * Simple button, only has two states: over and out.
 * Created by foreverpinetree@gmail.com on 14-6-20.
 */
(function()
{
    var Button = function()
    {
        pinetree.Sprite.call(this);

        this._overIcon = null;
        this._overBg = null;

        this._outIcon = null;
        this._outBg = null;

        this._isOver = false;

        this.addEventListener(pinetree.Event.ROLL_OVER, this._onOverButton, this);
        this.addEventListener(pinetree.Event.ROLL_OUT, this._onOutButton, this);

        this.buttonMode = true;

        __defineGetterSetter(this, ["isOver"]);
    }

    var p = __extends(Button, pinetree.Sprite);

    p.setOverState = function(icon, bg, iconCenter)
    {
        this._overIcon = (icon instanceof pinetree.DisplayObject) ? icon : null;
        this._overBg = (bg instanceof pinetree.DisplayObject) ? bg : null;

        this._overBg && this.addChild(this._overBg);
        this._overIcon && this.addChild(this._overIcon);

        if(this._overIcon)
            this._overIcon.visible = false;
        if(this._overBg)
            this._overBg.visible = false;

        if(!!iconCenter && this._overIcon && this._overBg)
        {
            this._overIcon.x = (this._overBg.width - this._overIcon.width) >> 1;
            this._overIcon.y = (this._overBg.height - this._overIcon.height) >> 1;
        }
    }

    p.setOutState = function(icon, bg, iconCenter)
    {
        this._outIcon = (icon instanceof pinetree.DisplayObject) ? icon : null;
        this._outBg = (bg instanceof pinetree.DisplayObject) ? bg : null;

        this._outBg && this.addChild(this._outBg);
        this._outIcon && this.addChild(this._outIcon);

        if(this._outIcon)
            this._outIcon.visible = true;
        if(this._outBg)
            this._outBg.visible = true;

        if(!!iconCenter && this._outIcon && this._outBg)
        {
            this._outIcon.x = (this._outBg.width - this._outIcon.width) >> 1;
            this._outIcon.y = (this._outBg.height - this._outIcon.height) >> 1;
        }
    }

    p._onOverButton = function(evt)
    {
        if(this._overIcon)
            this._overIcon.visible = true;
        if(this._overBg)
            this._overBg.visible = true;

        if(this._outIcon)
            this._outIcon.visible = false;
        if(this._outBg)
            this._outBg.visible = false;

        this._isOver = true;
    }

    p._onOutButton = function(evt)
    {
        if(this._overIcon)
            this._overIcon.visible = false;
        if(this._overBg)
            this._overBg.visible = false;

        if(this._outIcon)
            this._outIcon.visible = true;
        if(this._outBg)
            this._outBg.visible = true;

        this._isOver = false;
    }

    p.getIsOver = function()
    {
        return this._isOver;
    }

    pinetree.Button = Button;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-17.
 */
(function()
{

    var Stage = function(htmlElement, needResize, needMouseMove)
    {
        pinetree.DisplayObjectContainer.call(this);

        this._htmlElement = htmlElement;
        this._stage = this;

        this._needResize = !!needResize;
        this._needMouseMove = !!needMouseMove;

        this._mouseX = 0;
        this._mouseY = 0;

        if(this._needMouseMove)
        {
            this.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this, pinetree.EventDispatcher.MAX_PRIORITY);
        }

        if(this._needResize)
        {
            this._resizeEvent = pinetree.getEvent(pinetree.Event.RESIZE);
            this._addSpecialEvent(pinetree.Event.RESIZE, this._onRootResize, this, 0, pinetree.Event.RESIZE, window);

            this.addEventListener(pinetree.Event.RESIZE, this._onResize, this);
            this._onResize(null);

            pinetree.isSmallMode = this.getStageWidth() < pinetree.EDGE_DEVICE_WIDTH || pinetree.isDevice ? true : false;
            pt.TOP_HEIGHT = pinetree.isSmallMode ? pt.DEVICE_TOP_HEIGHT_CONST : pt.TOP_HEIGHT_CONST;
            if(pt.config.menuPosition == "top" && !pinetree.isSmallMode) pt.TOP_HEIGHT = pt.FOOTER_HEIGHT_CONST;
            pt.FOOTER_HEIGHT = pinetree.isSmallMode || pt.config.footerPosition == "top" ? 0 : pt.FOOTER_HEIGHT_CONST;
        }

        this._selectable = true;

        __defineGetterSetter(this, ["stageWidth", "stageHeight", "mouseX", "mouseY"]);
    }

    var p = __extends(Stage, pinetree.DisplayObjectContainer);

    p._onRootResize = function(evt)
    {
        pinetree.isSmallMode = this.stageWidth < pinetree.EDGE_DEVICE_WIDTH || pinetree.isDevice ? true : false;
        pt.TOP_HEIGHT = pinetree.isSmallMode ? pt.DEVICE_TOP_HEIGHT_CONST : pt.TOP_HEIGHT_CONST;
        if(pt.config.menuPosition == "top" && !pinetree.isSmallMode) pt.TOP_HEIGHT = pt.FOOTER_HEIGHT_CONST;
        pt.FOOTER_HEIGHT = pinetree.isSmallMode || pt.config.footerPosition == "top" ? 0 : pt.FOOTER_HEIGHT_CONST;
        this.dispatchEvent(this._resizeEvent);
    }

    p._onMouseMove = function(evt)
    {
        if(pinetree.isDevice)
        {
            this._mouseX = evt.mouseX;
            this._mouseY = evt.mouseY;
        }
        else
        {
            if(evt.pageX || evt.pageY)
            {
                this._mouseX = evt.pageX - pinetree.rootHtmlElement.offsetLeft;
                this._mouseY = evt.pageY - pinetree.rootHtmlElement.offsetTop;
            }
            else
            {
                this._mouseX = evt.clientX + document.body.scrollLeft - document.body.clientLeft - pinetree.rootHtmlElement.offsetLeft;
                this._mouseY = evt.clientY + document.body.scrollTop - document.body.clientTop - pinetree.rootHtmlElement.offsetTop;
            }
        }
    }

    p.getMouseX = function()
    {
        return this._mouseX;
    }

    p.getMouseY = function()
    {
        return this._mouseY;
    }

    p._onResize = function(evt)
    {
        this.width = this.stageWidth;
        this.height = this.stageHeight;
    }

    p.getStageWidth = function()
    {
        var w = window.innerWidth;
        if(typeof w != "number")
        {
            if (document.compatMode == "number")
            {
                w = document.documentElement.clientWidth;
            }
            else
            {
                w = document.body.clientWidth;
            }
        }

        return w - pinetree.rootHtmlElement.offsetLeft;
    }

    p.getStageHeight = function()
    {
        var h = window.innerHeight;
        if(typeof h != "number")
        {
            if (document.compatMode == "number")
            {
                h = document.documentElement.clientHeight;
            }
            else
            {
                h = document.body.clientHeight;
            }
        }

        return h - pinetree.rootHtmlElement.offsetTop;
    }

    p.addEventListener = function(type, listener, owner, priority)
    {
        if(this._isSpecialInterested(type))
        {
            this._addSpecialEvent(type, listener, owner, priority, type, window);
            return;
        }
        pinetree.DisplayObjectContainer.prototype.addEventListener.call(this, type, listener, owner, priority);
    }

    p.toString = function()
    {
        return "[Object Stage]";
    }

    pinetree.Stage = Stage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-17.
 */
(function()
{
    "use strict";

    var TimeMachine = function()
    {
        this._listenObjects = [];
        this._listenRenders = new pinetree.Dictionary();
        this._enterFrameEvents = new pinetree.Dictionary();
        this._renderHandler = Delegate.create(this, this._onTimer);

        this._duration = 0;

        if(!requestAnimationFrame)
        {
            this._duration = 1000 / 60;
            setTimeout(this._renderHandler, this._duration);
        }
        else
        {
            requestAnimationFrame(this._renderHandler);
        }
    }

    var p = TimeMachine.prototype;

    p._onTimer = function()
    {
        var i = this._listenObjects.length, displayObject, event;

        while(i --)
        {
            displayObject = this._listenObjects[i];
            if(displayObject)
            {
                event = this._enterFrameEvents.get(displayObject);
                event && displayObject.dispatchEvent(event);
            }
            else
            {
                this._listenObjects.splice(i, 1);
            }
        }

        i = this._listenRenders.length;
        var owner, render;
        while(i --)
        {
            owner = this._listenRenders.getKeyByIndex(i);
            render = this._listenRenders.getValueByIndex(i);
            if(owner && render)
            {
                render.apply(owner, null);
            }
        }

        if(!requestAnimationFrame)
        {
            setTimeout(this._renderHandler, this._duration);
        }
        else
        {
            requestAnimationFrame(this._renderHandler);
        }
    }

    p.add = function(displayObject)
    {
        if(!(displayObject instanceof pinetree.DisplayObject))
            return;

        var i = this._listenObjects.length;
        while(i --)
        {
            if(this._listenObjects[i] == displayObject)
                return;
        }

        var event = pinetree.getEvent(pinetree.Event.ENTER_FRAME);
        this._enterFrameEvents.set(displayObject, event);
        this._listenObjects.push(displayObject);
    }

    p.remove = function(displayObject)
    {
        if(!(displayObject instanceof pinetree.DisplayObject))
            return;

        var i = this._listenObjects.length;
        while(i --)
        {
            if(this._listenObjects[i] == displayObject)
            {
                this._listenObjects.splice(i, 1);
                this._enterFrameEvents.remove(displayObject);
                return;
            }
        }
    }

    p.addRender = function(owner, render)
    {
        if(!owner || this._listenRenders.get(owner)) return;

        this._listenRenders.set(owner, render);
    }

    p.removeRender = function(owner)
    {
        if(!owner || !this._listenRenders.get(owner)) return;

        this._listenRenders.remove(owner);
    }

    p.toString = function()
    {
        return "[Object TimeMachine]";
    }

    pinetree.timeMachine = new TimeMachine();//NOTE:singleton instance
}());

(function()
{
    var DebugView = function(w, h, bgColor, bgAlpha)
    {
        pinetree.Sprite.call(this);

        this._viewWidth = w;
        this._viewHeight = h;

        this.width = w;
        this.height = h;
        this.backgroundColor = bgColor;
        this.backgroundAlpha = bgAlpha;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._txt = new pinetree.TextField();
        this._container.addChild(this._txt);
        this._txt.width = w - 20;
        this._txt.height = h - 20 - 22;
        this._txt.fontSize = 10;
        this._txt.wordWrap = true;
        this._txt.textColor = 0xffffff;
        this._txt.setPosition(10, 10);
        this._txt.htmlText = "";
        this._txt.htmlElement.style.overflowY = "auto";

        var htmlText = "";

        this._openBtn = new pinetree.Sprite();
        this.addChild(this._openBtn);
        this._openBtn.x = 7;
        this._openBtn.y = 5;
        htmlText = "<span style='color:#ffffff;cursor:pointer'><i class='fa fa-expand'></i></span>";
        this._openBtn.htmlElement.innerHTML = htmlText;
        this._openBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onOpen, this);
        this._openBtn.visible = false;

        this._closeBtn = new pinetree.Sprite();
        this.addChild(this._closeBtn);
        this._closeBtn.x = w - 25;
        this._closeBtn.y = h - 30;
        htmlText = "<span style='color:#ffffff;cursor:pointer'><i class='fa fa-compress'></i></span>";
        this._closeBtn.htmlElement.innerHTML = htmlText;
        this._closeBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);

        this._cleanBtn = new pinetree.Sprite();
        this.addChild(this._cleanBtn);
        this._cleanBtn.x = w - 50;
        this._cleanBtn.y = h - 30;
        htmlText = "<span style='color:#ffffff;cursor:pointer;font-size:8px'><i class='fa fa-trash'></i></span>";
        this._cleanBtn.htmlElement.innerHTML = htmlText;
        this._cleanBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClean, this);

        //window.addEventListener("error", this._onJSError.bind(this), false);
    }

    var p = __extends(DebugView, pinetree.Sprite);

    p._onJSError = function (evt)
    {
        var msg = evt.message;
        var fileUrl = evt.filename;
        var line = evt.lineno;

        this.trace(msg + ', at line: ' + line + ', file: ' + fileUrl + '.');
        return false;
    }

    p.trace = function(value)
    {
        if(!this.stage)
        {
            pinetree.stage.addChild(this);
        }

        var msgs = [], len = arguments.length, msg;
        for(var i = 0; i < len; i ++)
        {
            msg = arguments[i] === undefined ? "undefined" : arguments[i] === null ? "null" : arguments[i].toString();
            msgs.push(msg);
        }
        this._txt.htmlText += msgs.join(" ") + "\n";
    }

    p._onOpen = function(evt)
    {
        this._container.visible = true;
        this._openBtn.visible = false;
        this._closeBtn.visible = true;
        this._cleanBtn.visible = true;

        this.width = this._viewWidth;
        this.height = this._viewHeight;

    }

    p._onClose = function(evt)
    {
        this._container.visible = false;
        this._openBtn.visible = true;
        this._closeBtn.visible = false;
        this._cleanBtn.visible = false;

        this.width = 30;
        this.height = 33;
    }

    p._onClean = function(evt)
    {
        this._txt.htmlText = "";
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);

        if(this._openBtn)
        {
            this._openBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onOpen, this);
            this._openBtn = null;
        }

        if(this._closeBtn)
        {
            this._closeBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this._closeBtn = null;
        }

        if(this._cleanBtn)
        {
            this._cleanBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onClean, this);
            this._cleanBtn = null;
        }
    }

    pinetree.debug = new DebugView(300, 200, 0x000000, 0.5);
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var Notification = function(name, data, type)
    {
        this._name = name;
        this._data = data;
        this._type = type;

        __defineGetterSetter(this, ["name", "data", "type"]);
    }

    var p = Notification.prototype;

    p.getName = function()
    {
        return this._name;
    }

    p.getData = function()
    {
        return this._data;
    }

    p.getType = function()
    {
        return this._type;
    }

    p.toString = function()
    {
        return "[Object pinetreemvc::Notification]";
    }

    pinetreemvc.Notification = Notification;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var Proxy = function(facade, name, source, fileSize)
    {
        this.facade = facade;

        if(!facade)
        {
            trace("Error: At pinetreemvc.Proxy::constructor, facade is null!");
            return;
        }

        if(!source)
        {
            trace("Error: At pinetreemvc.Proxy::constructor, source is invalid!");
            return;
        }

        this.ON_DISPOSE_COMPLETE = new pinetree.Signal();

        this.data = null;

        this._name = name || Proxy.NAME;

        this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, fileSize);
        this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
        this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);

        var hasQ = source.indexOf("?") > -1;
        source = hasQ ? source + "&rid=" + Math.random() : source + "?rid=" + Math.random();
        this._dataLoader.load(new pinetree.URLRequest(source));

        __defineGetterSetter(this, ["name"]);
    }

    //static properties. you can only via Class.property or Class['property'] to read or write these properties.
    Proxy.NAME = "Proxy";

    var p = Proxy.prototype;

    p.getName = function()
    {
        return this._name;
    }

    p.onLoadDataComplete = function (loader)
    {
        this.data = loader.data;
        this.parse(this.data);
    }

    p.parse = function(data)
    {

    }

    p.onIOError = function(loader)
    {
        trace("Load error: At Proxy::onIOError().");
    }

    p.getLoader = function()
    {
        return this._dataLoader;
    }

    p.sendNotification = function(notificationName, data, type)
    {
        this.facade.sendNotification(notificationName, data, type);
    }

    p.toString = function()
    {
        return "[Object pinetreemvc::Proxy]";
    }

    p.predispose = function()
    {
        this.dispose();
    }

    p.dispose = function()
    {
        this.facade = null;

        if(this._dataLoader)
        {
            this._dataLoader.dispose();
            this._dataLoader = null;
        }

        if(this.ON_DISPOSE_COMPLETE)
        {
            this.ON_DISPOSE_COMPLETE.dispatch();
            this.ON_DISPOSE_COMPLETE.removeAll();
            this.ON_DISPOSE_COMPLETE = null;
        }
    }

    pinetreemvc.Proxy = Proxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-5-25.
 */
(function()
{
    var Mediator = function(facade, name, viewComponent)
    {
        this.facade = facade;
        this.viewComponent = viewComponent;

        if(!facade)
        {
            trace("Error: At pinetreemvc.Mediator::constructor, facade is null!");
            return;
        }

        if(!viewComponent)
        {
            trace("Error: At pinetreemvc.Mediator::constructor, viewComponent is null!");
            return;
        }

        this.viewComponent.ON_DISPOSE_COMPLETE.add(this, this.dispose);

        this._name = name || Mediator.NAME;
        this.ON_DISPOSE_COMPLETE = new pinetree.Signal();

        this.interests = [];

        __defineGetterSetter(this, ["name"]);
    }

    //static properties. you can only via Class.property or Class['property'] to read or write these properties.
    Mediator.NAME = "Mediator";

    var p = Mediator.prototype;

    p.getName = function()
    {
        return this._name;
    }

    p.sendNotification = function(notificationName, data, type)
    {
        this.facade.sendNotification(notificationName, data, type);
    }

    p.isInterested = function(notificationName)
    {
        return this.interests && this.interests.indexOf(notificationName) > -1;
    }

    p.handleNotification = function(notification)
    {

    }

    p.toString = function()
    {
        return "[Object pinetreemvc::Mediator]";
    }

    p.predispose = function()
    {
        if(this.viewComponent)
        {
            this.viewComponent.predispose();
        }
    }

    p.dispose = function()
    {
        if(this.ON_DISPOSE_COMPLETE)
        {
            this.ON_DISPOSE_COMPLETE.dispatch();
            this.ON_DISPOSE_COMPLETE.removeAll();
            this.ON_DISPOSE_COMPLETE = null;

            this.interests && this.interests.splice(0, this.interests.length);

            this.viewComponent = null;
            this.facade = null;
        }
    }

    pinetreemvc.Mediator = Mediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-25.
 */
(function()
{
    var ViewComponentBase = function()
    {
        pinetree.Sprite.call(this);

        this.facade = null;
        this.mediator = null;

        this.ON_DISPOSE_COMPLETE = new pinetree.Signal();

        this.isInitialized = false;

        this.resizePriority = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;
        this.tweenDelay = 0.5;
    }

    var p = __extends(ViewComponentBase, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);
        pinetree.stage.addEventListener(pinetree.Event.RESIZE, this._onResize, this, this.resizePriority);
    }

    p.removedFromStage = function()
    {
        pinetree.Sprite.prototype.removedFromStage.call(this);
        pinetree.stage.removeEventListener(pinetree.Event.RESIZE, this._onResize, this);
    }

    p._onResize = function(evt)
    {
        if(this.stage)
            this.resize(pinetree.stage.stageWidth, pinetree.stage.stageHeight);
    }

    p.resize = function(sw, sh)
    {
        //
    }

    p.redraw = function()
    {
        this.stage && this._onResize(null);
    }

    p.linkTo = function(url, window)
    {

    }

    p.show = function()
    {
        this.visible = true;
    }

    p.hide = function()
    {
        this.visible = false;
    }

    p.toString = function()
    {
        return "[Object pinetreemvc::ViewComponentBase]";
    }

    p.predispose = function()
    {

    }

    p.dispose = function()
    {
        this.facade = null;
        this.mediator = null;

        pinetree.stage.removeEventListener(pinetree.Event.RESIZE, this._onResize, this);

        if(this.ON_DISPOSE_COMPLETE)
        {
            this.ON_DISPOSE_COMPLETE.dispatch();
            this.ON_DISPOSE_COMPLETE.removeAll();
            this.ON_DISPOSE_COMPLETE = null;
        }

        this.isInitialized = false;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreemvc.ViewComponentBase = ViewComponentBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var Command = function()
    {
        this.facade = null;
    }
    var p = Command.prototype;

    p.execute = function(notification)
    {
        //
    }

    pinetreemvc.Command = Command;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-25.
 */
(function()
{
    var Facade = function()
    {
        this._disposeCount = 0;
        this._disposeIndex = 0;
        this._disposed = false;

        this._mediators = {};
        this._proxies = {};
        this._commands = {};

        this.$ = {};

        this.ON_DISPOSE_COMPLETE = new pinetree.Signal();
    }

    var p = Facade.prototype;

    p.startUp = function(data)
    {
        //register your command here, then start up!
    }

    p.sendNotification = function(notificationName, data, type)
    {
        if(data == undefined) data = null;
        if(type == undefined) type = null;

        var notification = new pinetreemvc.Notification(notificationName, data, type);
        if(this._commands.hasOwnProperty(notificationName))
        {
            var commandClassRef = this._commands[notificationName];
            if(commandClassRef)
            {
                var command = new commandClassRef();
                command.facade = this;
                command.execute(notification);
            }
        }
        var mediator;
        for(var key in this._mediators)
        {
            mediator = this._mediators[key];
            if(mediator)
            {
                if(mediator.isInterested(notificationName))
                {
                    mediator.handleNotification(notification);
                }
            }
            else
            {
                delete this._mediators[key];
            }
        }
    }

    p.registerMediator = function(name, mediatorClassRef, viewComponent)
    {
        if(!mediatorClassRef || !viewComponent)
        {
            trace("Error: At Facade::registerMediator, mediatorClassRef or viewComponent is null!");
            return null;
        }
        var mName = name || mediatorClassRef.NAME;
        if(this._mediators[mName])
        {
            trace("Error: At Facade::registerMediator, this name has been used!");
            return null;
        }

        var instance = new mediatorClassRef(this, mName, viewComponent);
        viewComponent.facade = this;
        viewComponent.mediator = instance;

        if(!(instance instanceof  pinetreemvc.Mediator))
        {
            trace("Error: At Facade::registerMediator, classRef is not instance of Mediator!");
            return null;
        }

        this._mediators[mName] = instance;
        return instance;
    }

    p.registerProxy = function(name, proxyClassRef, source, fileSize)
    {
        if(!proxyClassRef)
        {
            trace("Error: At Facade::registerProxy, proxyClassRef is null!");
            return null;
        }

        if(!source)
        {
            trace("Error: At Facade::registerProxy, source is null!");
            return null;
        }

        var pName = name || proxyClassRef.NAME;
        if(this._proxies[pName])
        {
            trace("Error: At Facade::registerProxy, this name has been used!");
            return null;
        }

        var instance = new proxyClassRef(this, pName, source, fileSize);
        if(!(instance instanceof pinetreemvc.Proxy))
        {
            trace("Error: At Facade::registerProxy, classRef is not instance of Proxy!");
            return null;
        }

        this._proxies[pName] = instance;
        return instance;
    }

    p.registerCommand = function(notificationName, commandClassRef)
    {
        if(!commandClassRef)
        {
            trace("Error: At Facade::registerCommand, commandClassRef is null!");
            return false;
        }

        if(this._commands[notificationName])
        {
            trace("Error: At Facade::registerCommand, this name has been used!");
            return false;
        }
        this._commands[notificationName] = commandClassRef;
        return true;
    }

    p.getMediatorByName = function(name)
    {
        if(this._mediators[name])
        {
            return this._mediators[name];
        }
        return null;
    }

    p.getProxyByName = function(name)
    {
        if(this._proxies[name])
        {
            return this._proxies[name];
        }
        return null;
    }

    p.removeMediator = function(name)
    {
        if(this._mediators.hasOwnProperty(name) && this._mediators[name])
        {
            this._mediators[name] = null;
            delete this._mediators[name];
        }
        else
        {
            delete this._mediators[name];
        }
    }

    p.removeAllMediators = function()
    {
        for(var key in this._mediators)
        {
            this.removeMediator(key);
        }
    }

    p.removeProxy = function(name)
    {
        if(this._proxies.hasOwnProperty(name) && this._proxies[name])
        {
            this._proxies[name] = null;
            delete this._proxies[name];
        }
        else
        {
            delete this._proxies[name];
        }
    }

    p.removeAllProxies = function()
    {
        for(var key in this._proxies)
        {
            this.removeProxy(key);
        }
    }

    p.removeCommand = function(name)
    {
        if(this._commands.hasOwnProperty(name) && this._commands[name])
        {
            this._commands[name] = null;
            delete this._commands[name];
        }
        else
        {
            delete this._commands[name];
        }
    }

    p.removeAllCommands = function()
    {
        for(var key in this._commands)
        {
            this.removeCommand(key);
        }
    }

    p.toString = function()
    {
        return "[Object pinetreemvc::Facade]";
    }

    p.predispose = function()
    {
        if(this._disposed) return;
        this._disposed = true;

        this._disposeCount = 0;
        this._disposeIndex = 0;
        var key, mediator, proxy;
        for(key in this._mediators)
        {
            mediator = this._mediators[key];
            if(mediator)
            {
                this._disposeCount ++;
                mediator.ON_DISPOSE_COMPLETE.add(this, this.onEachDisposed);
            }
            else
            {
                delete this._mediators[key];
            }
        }

        for(key in this._proxies)
        {
            proxy = this._proxies[key];
            if(proxy)
            {
                this._disposeCount ++;
                proxy.ON_DISPOSE_COMPLETE.add(this, this.onEachDisposed);
            }
            else
            {
                delete this._proxies[key];
            }
        }

        for(key in this._mediators)
        {
            this._mediators[key].predispose();
        }

        for(key in this._proxies)
        {
            this._proxies[key].predispose();
        }
    }

    p.onEachDisposed = function()
    {
        this._disposeIndex ++;
        if(this._disposeIndex == this._disposeCount)
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        this.removeAllMediators();
        this.removeAllProxies();
        this.removeAllCommands();

        this._mediators = null;
        this._proxies = null;
        this._commands = null;

        if(this.ON_DISPOSE_COMPLETE)
        {
            this.ON_DISPOSE_COMPLETE.dispatch();
            this.ON_DISPOSE_COMPLETE.removeAll();
            this.ON_DISPOSE_COMPLETE = null;
        }
    }

    pinetreemvc.Facade = Facade;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-15.
 */
(function()
{
    var CommonUtil = {};

    CommonUtil.isFunction = function(target, prop)
    {
        if(!target || !prop) return false;
        if(target[prop] && typeof(target[prop]) == "function")
        {
            return true;
        }
        return false;
    }

    CommonUtil.getStageX = function(target, offsetX)
    {
        if(!target.parent || !target.stage) return 0;

        return target.localToGlobal(new pinetree.Point(offsetX || 0, 0)).x;
    }

    CommonUtil.getStageY = function(target, offsetY)
    {
        if(!target.parent || !target.stage) return 0;

        return target.localToGlobal(new pinetree.Point(0, offsetY || 0)).y;
    }

    CommonUtil.getCurrentX = function(target, stageX)
    {
        if(!target.parent || !target.stage) return 0;

        return target.parent.globalToLocal(new pinetree.Point(stageX, 0)).x;
    }

    CommonUtil.getCurrentY = function(target, stageY)
    {
        if(!target.parent || !target.stage) return 0;

        return target.parent.globalToLocal(new pinetree.Point(0, stageY)).y;
    }

    CommonUtil.getGrayBitmapData = function(bd)
    {
        if(!bd) return null;

        var newBD = new pinetree.BitmapData(bd.width, bd.height);
        var imgData = ImageFilters.GrayScale(bd.getImageData());
        newBD.from(imgData);
        return newBD;
    }

    CommonUtil.getBlurBitmapData = function(bd, stretch)
    {
        if(!bd) return null;

        if(stretch == undefined)
            stretch = 5;

        var newBD = new pinetree.BitmapData(bd.width, bd.height);
        var imgData = ImageFilters.StackBlur(bd.getImageData(), stretch);
        newBD.from(imgData);
        return newBD;
    }

    CommonUtil.setSimpleShadow = function(target)
    {
        var color = pt.config ? pt.config.shadowColor : pt.onOutColor;
        var alpha = pt.config ? pt.config.shadowStrength : 0.2;
        var blur = 12;
        var offsetX = 0;
        var offsetY = 0;
        if((target instanceof pinetree.Graphics) || (target instanceof pinetree.CanvasQuad))
        {
            target.setShadow(color, alpha, blur, offsetX, offsetY);
        }
        else if((target instanceof pinetree.Shape) || (target instanceof pinetree.Sprite))
        {
            target.graphics.setShadow(color, alpha, blur, offsetX, offsetY);
        }
    }

    pinetreecom.CommonUtil = CommonUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/1/6.
 */
(function()
{
    var MemoryUtil = function()
    {
        //
    }

    MemoryUtil.removeSignalListeners = function(obj)
    {
        if(!obj) return;

        var isArray = Object.prototype.toString.call(obj) === '[object Array]';
        if(!isArray)
        {
            if(obj instanceof pinetree.Signal)
            {
                obj.removeAll();
            }
            return;
        }

        var i = obj.length;
        if(i < 1) return;

        var signal = null;
        while(i --)
        {
            signal = obj[i];
            if(signal && signal instanceof pinetree.Signal)
            {
                signal.removeAll();
            }
        }
    }

    MemoryUtil.disposeObjects = function(obj)
    {
        if(!obj) return;

        var isArray = Object.prototype.toString.call(obj) === '[object Array]';
        if(!isArray)
        {
            if(obj.dispose)
            {
                obj.dispose();
            }
            return;
        }

        var i = obj.length;
        if(i < 1) return;

        var o = null;
        while(i --)
        {
            o = obj[i];
            if(o && o.dispose)
            {
                o.dispose();
            }
        }
    }

    pinetreecom.MemoryUtil = MemoryUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-30.
 */
(function()
{
    var StringUtil = {};

    StringUtil.getFileExtension = function(fileName)
    {
        if(!fileName) return "";

        var index = fileName.lastIndexOf(".");
        if(index > 0)
        {
            return fileName.substring(index + 1);
        }
        return "";
    }

    StringUtil.removeFileExtension = function(fileName)
    {
        if(!fileName) return "";

        var index = fileName.lastIndexOf(".");
        if(index > 0)
        {
            return fileName.substring(0, index);
        }
        return fileName;
    }
    
    StringUtil.toColorString = function(color, withAlpha)
    {
        var str = color.toString(16);
        var left = withAlpha ? 8 - str.length : 6 - str.length;
        while(left -- > 0)
        {
            str = "0" + str;
        }
        return "#" + str;
    }

    StringUtil.fromColorString = function(colorString)
    {
        if(colorString == undefined) return 0;
        if(colorString.indexOf("#") > -1)
        {
            colorString = colorString.replace("#", "0x");
        }
        else if(colorString.indexOf("0x") == -1 && colorString.indexOf("0X") == -1)
        {
            colorString = "0x" + colorString;
        }

        return Math.floor(colorString);
    }

    StringUtil.trimAll = function(str)
    {
        if(!str) return "";

        var req = /\s/g;
        var result = str.replace(req, "");
        return result;
    }

    StringUtil.isValidEmail = function(email)
    {
        var reg = /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,4}$/i;
        return reg.test(email);
    }

    StringUtil.pixelToNumber = function(pixelString)
    {
        return parseFloat(pixelString);
    }

    pinetreecom.StringUtil = StringUtil;
})();

(function(){

    var MathUtil = {};

    /**
     * get distance from 2 points.
     * @param p1, point
     * @param p2, point
     * @returns {number}
     */
    MathUtil.getDistance = function(p1, p2)
    {
        return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));
    }

    /**
     * get a new random array from an array.
     * @param arr, array
     * @returns {Array}
     */
    MathUtil.randomArray = function(arr)
    {
        var arrCopy = arr.concat();
        var newArray = [];
        var index;
        while(arrCopy.length)
        {
            index = Math.random() * arrCopy.length;
            newArray.push(arrCopy.splice(index, 1));
        }

        return newArray;
    }

    /**
     * includes num1 and num2 (num1 <= value <= num2)
     */
    MathUtil.rand = function(num1, num2)
    {
        return Math.floor((num2 - num1 + 1) * Math.random() + num1);
    }

    /**
     * @param start   start value
     * @param end     end value
     * @param percent [0 <= percent <= 1]
     */
    MathUtil.getRange = function(start, end, percent)
    {
        if(percent < 0) percent = 0;
        if(percent > 1) percent = 1;

        return start + (end - start) * percent;
    }

    /**
     * At the startPos and use the endPos to decide the direction, then shoot a distance which begin at the endPos.<br/>
     * The distance is range which from endPos to (endPos + range).
     */
    MathUtil.getShootPoint = function(startPos, endPos, range)
    {
        var x1 = startPos.x;
        var y1 = startPos.y;
        var x2 = endPos.x;
        var y2 = endPos.y;

        var len = Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2)) + range;
        var a = Math.atan2(Math.abs(y2 - y1), Math.abs(x2 - x1));
        var dx = len * Math.cos(a);
        var dy = len * Math.sin(a);

        var x3, y3;
        if(x2 < x1)
        {
            x3 = x1 - dx;
        }
        else
        {
            x3 = x1 + dx;
        }

        if(y2 < y1)
        {
            y3 = y1 - dy;
        }
        else
        {
            y3 = y1 + dy;
        }
        return new pinetree.Point(x3, y3);
    }

    MathUtil.parseFloatByFixed = function(number, fixed)
    {
        if(fixed == undefined)
            return number;

        var largeNum = Math.floor(number);

        if(fixed == 0)
            return largeNum;

        var littleNum = number - largeNum;
        var times = Math.pow(10, fixed);
        return Math.round((largeNum + littleNum) * times) / times;
    }

    pinetreecom.MathUtil = MathUtil;
}());

(function(){

	var DrawUtil = {};
    
    DrawUtil.drawRect = function(target, w, h, color, alpha, thickness, lineColor, lineAlpha, x, y, clear)
    {
        if(!(target instanceof pinetree.Shape) && !(target instanceof pinetree.Sprite)
            && !(target instanceof pinetree.MovieClip)) return;

        clear && target.graphics.clear();
        target.graphics.lineStyle(thickness || 0, lineColor || 0x000000, lineAlpha || 0);
        target.graphics.beginFill(color || 0x000000, alpha || 0);
        target.graphics.drawRect(x || 0, y || 0, w || 100, h || 100);
        target.graphics.endFill();
        target.graphics.stroke();
    }

    DrawUtil.drawRoundRect = function(target, w, h, radius, color, alpha, thickness, lineColor, lineAlpha, x, y, clear)
    {
        if(!(target instanceof pinetree.Shape) && !(target instanceof pinetree.Sprite)
            && !(target instanceof pinetree.MovieClip)) return;

        if(radius == undefined) radius = 5;

        clear && target.graphics.clear();
        target.graphics.lineStyle(thickness || 0, lineColor || 0x000000, lineAlpha || 0);
        target.graphics.beginFill(color || 0x000000, alpha || 0);
        target.graphics.drawRoundRect(x || 0, y || 0, w || 100, h || 100, radius, radius, radius, radius);
        target.graphics.endFill();
        target.graphics.stroke();
    }

    DrawUtil.drawExactRoundRect = function(target, w, h, radiusTL, radiusTR, radiusBL, radiusBR, color, alpha, thickness,
                                           lineColor, lineAlpha, x, y, clear)
    {
        if(!(target instanceof pinetree.Shape) && !(target instanceof pinetree.Sprite)
            && !(target instanceof pinetree.MovieClip)) return;

        if(radiusTL == undefined) radiusTL = 5;
        if(radiusTR == undefined) radiusTR = 5;
        if(radiusBL == undefined) radiusBL = 5;
        if(radiusBR == undefined) radiusBR = 5;

        clear && target.graphics.clear();
        target.graphics.lineStyle(thickness || 0, lineColor || 0x000000, lineAlpha || 0);
        target.graphics.beginFill(color || 0x000000, alpha || 0);
        target.graphics.drawRoundRect(x || 0, y || 0, w || 100, h || 100, radiusTL, radiusTR, radiusBL, radiusBR);
        target.graphics.endFill();
        target.graphics.stroke();
    }

    DrawUtil.drawCircle = function(target, radius, color, alpha, thickness, lineColor, lineAlpha, x, y, clear)
    {
        if(!(target instanceof pinetree.Shape) && !(target instanceof pinetree.Sprite)
            && !(target instanceof pinetree.MovieClip)) return;

        clear && target.graphics.clear();
        target.graphics.lineStyle(thickness || 0, lineColor || 0x000000, lineAlpha || 0);
        target.graphics.beginFill(color || 0x000000, alpha || 0);
        target.graphics.drawCircle(x || 0, y || 0, radius || 100);
        target.graphics.endFill();
        target.graphics.stroke();
    }

    pinetreecom.DrawUtil = DrawUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-30.
 */
(function()
{
    var ColorTweener = function(target, startColor, color, time, delay, callback, ease)
    {
        this._target = target;
        this._startColor = startColor;
        this._color = color;
        this._time = time == undefined ? 0.5 : time;
        this._delay = delay || 0;
        this._callback = callback || null;
        this.ease = ease || Quad.easeOut;
        this.percent = 0;

        this._start();
    }

    ColorTweener.addTween = function(target, startColor, color, time, delay, callback, ease)
    {
        return new pinetreecom.ColorTweener(target, startColor, color, time, delay, callback, ease);
    }

    var p = ColorTweener.prototype;

    p._start = function()
    {
        if(!this._target)
        {
            trace("Error: at pinetreecom.ColorTweener::start(), target is null!");
            return;
        }

        this.percent = 0;
        TweenMax.to(this, this._time, {percent:1, time:this._time, delay:this._delay, ease:this._ease,
            onUpdate:this._onUpdate, onUpdateParams:[this],
            onComplete:this._onComplete, onCompleteParams:[this]});
    }

    p._onUpdate = function(owner)
    {
        var color = pinetree.getOffsetColor(owner._startColor, owner._color, owner.percent);
        pinetreecom.ColorUtil.setColor(owner._target, color);
    }

    p._onComplete = function(owner)
    {
        owner._callback && owner._callback();
        owner.dispose();
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        this._target = null;
        this._callback = null;
        this._ease = null;
    }

    pinetreecom.ColorTweener = ColorTweener;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-29.
 */
(function()
{
    var ColorUtil = function()
    {
        //
    }

    var p = ColorUtil.prototype;

    p.setColor = function(target, color)
    {
        if(!target || !target.dynamicData)
        {
            return;
        }

        var context, w, h, imageData;
        if((target instanceof pinetree.Shape) || (target instanceof pinetree.Sprite))
        {
            context = target.graphics.context;
            w = target.graphics.canvas.width;
            h = target.graphics.canvas.height;
        }
        else if(target instanceof pinetree.Bitmap)
        {
            context = target.context;
            w = target.getHtmlElement().width;
            h = target.getHtmlElement().height;
        }
        else if(target instanceof pinetree.TextureImage)
        {
            context = target.context;
            w = target.originWidth;
            h = target.originHeight;
        }

        if(!target.dynamicData.imageData)
        {
            imageData = context.getImageData(0, 0, w, h);
            target.dynamicData.imageData = imageData;
        }
        else
        {
            imageData = target.dynamicData.imageData;
        }

        var canvas = pinetree.createCanvas(w, h);
        var ctx = canvas.getContext("2d");
        ctx.putImageData(imageData, 0, 0);

        context.globalCompositeOperation = "copy";
        context.globalAlpha = 1;
        context.fillStyle = pinetree.getRGBA(color, 1);
        context.fillRect(0, 0, w, h);
        context.globalCompositeOperation = "destination-in";
        context.globalAlpha = 1;
        context.drawImage(canvas, 0, 0);
    }

    p.tweenColor = function(target, startcolor, color, time, delay, callback, ease)
    {
        return pinetreecom.ColorTweener.addTween(target, startcolor, color, time, delay, callback, ease);
    }

    pinetreecom.ColorUtil = new ColorUtil();//singleton instance
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-12.
 */
(function(){
    var ArrayUtil = {};

    ArrayUtil.kick = function(arr, obj)
    {
        var i;
        for (i = 0; i < arr.length; i++)
        {
            if (arr[i] == obj)
            {
                arr.splice(i, 1);
                break;
            }
        }
    }

    /**
     * use "===" while "abs == true"
     * @param arr
     * @param obj
     * @returns {boolean}
     */
    ArrayUtil.contains = function(arr, obj, abs)
    {
        if(!arr)
        {
            trace("Error: at pinetreecom.ArrayUtil::contains(), arr is Null!");
            return false;
        }

        if(!this.isArray(arr))
        {
            trace("Error: at pinetreecom.ArrayUtil::contains(), arr is not an Array!");
            return false;
        }

        var i = arr.length;
        if(abs)
        {
            while(i --)
            {
                if(arr[i] === obj)
                {
                    return true;
                }
            }
        }
        else
        {
            while(i --)
            {
                if(arr[i] == obj)
                {
                    return true;
                }
            }
        }
        return false;
    }

    ArrayUtil.isArray = function(obj)
    {
        return Object.prototype.toString.call(obj) === '[object Array]';
    }

    pinetreecom.ArrayUtil = ArrayUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-15.
 */
(function()
{
    var AlignUtil = {};

    AlignUtil.ALIGN_HORIZONTAL = "horizontal";
    AlignUtil.ALIGN_VERTICAL = "vertical";

    AlignUtil.align = function(item, alignDirection, width, height, gapX, gapY, index, rowColumn)
    {
        if(!item) return;

        if(alignDirection == this.ALIGN_VERTICAL)
        {
            item.originX = (width + gapX) * Math.floor(index % rowColumn);
            item.originY = (height + gapY) * Math.floor(index / rowColumn);
        }
        else
        {
            item.originX = (width + gapX) * Math.floor(index / rowColumn);
            item.originY = (height + gapY) * Math.floor(index % rowColumn);
        }
    }

    AlignUtil.getMaxColumn = function(width, itemWidth, gap)
    {
        return (width + gap) / (itemWidth + gap);
    }

    AlignUtil.alignVMixVerticalFit = function(items, cols, column, gapX, gapY, itemWidth)
    {

        if(cols.length < column) return;

        var biggerArr = [], i, j, len, index, colArr;

        var total = 0;
        for(i = 0; i < column; i ++)
        {
            j = cols[i].length;
            while(j --)
            {
                total += cols[i][j].currentHeight + gapY;
            }
        }
        var average = Math.floor(total / column);

        len = items.length;
        biggerArr.splice(0, biggerArr.length);
        for(i = 0; i < len; i ++)
        {
            if(items[i].y + items[i].currentHeight > average)
            {
                biggerArr.push(items[i]);
                index = -1;
                for(j = 0; j < column; j ++)
                {
                    index = cols[j].indexOf(items[i]);
                    if(index > -1)
                    {
                        cols[j].splice(index, 1);
                        break;
                    }
                }
            }
        }
        biggerArr.sort(this.compareHandler);

        if(biggerArr.length < 1) return;

        var isDifferentHeight = false;
        var itemH = items[0].currentHeight;
        len = items.length;
        for(i = 1; i < len; i ++)
        {
            if(itemH != items[i].currentHeight)
            {
                isDifferentHeight = true;
                break;
            }
        }

        if(!isDifferentHeight) return;

        var n = biggerArr.length;
        var minCol = 0, obj, newObj, minValue = 0xffffff, h = 0;
        while(n --)
        {
            minValue = 0xffffff;
            for(i = 0; i < column; i ++)
            {
                h = 0;
                j = cols[i].length;
                while(j --)
                {
                    h += cols[i][j].currentHeight + gapY;
                }

                if(h < minValue)
                {
                    minValue = h;
                    minCol = i;
                }
            }

            colArr = cols[minCol];
            obj = colArr[colArr.length - 1];
            newObj = biggerArr.pop();
            if(obj)
            {
                newObj.x = newObj.originX = obj.x;
                newObj.y = newObj.originY = obj.y + obj.currentHeight + gapY;
            }
            else
            {
                newObj.x = newObj.originX = minCol * (gapX + itemWidth) + gapX;
                newObj.y = newObj.originY = gapY;
            }
            cols[minCol].push(newObj);
        }
    }

    AlignUtil.alignVMixHorizontalFit = function(items, gapX, gapY, itemHeight)
    {
        //
    }

    AlignUtil.compareHandler = function(obj1, obj2)
    {
        return obj1.y > obj2.y ? 1 : obj1.y < obj2.y ? -1 : 0;
    }

    pinetreecom.AlignUtil = AlignUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-20.
 */
(function()
{
    var DelayCaller = function()
    {
        this._handlers = {};
    }
    var p = DelayCaller.prototype;

    /**
     * delay call
     * @param handler
     * @param delay, seconds
     * @param params, array
     * @param isSingleton, if it's true, it will remove the registered handler by this owner.
     * @returns {number}
     */
    p.delayCall = function(owner, handler, delay, params, isSingleton)
    {
        if(!params) params = [];
        if(isSingleton)
        {
            this.removeByHandler(owner, handler);
        }

        var intervalId = setTimeout(Delegate.create(this, this._onTimeOutHandler, owner, handler, delay, params), delay * 1000);
        this._handlers[intervalId] = {owner:owner, handler:handler, delay:delay, params:params};

        return intervalId;
    }

    p.delayAfterFrames = function(owner, handler, frames, params, isSingleton)
    {
        if(!frames) frames = 1;
        var delay = frames / 60;
        return this.delayCall(owner, handler, delay, params, isSingleton);
    }

    p._onTimeOutHandler = function(owner, handler, delay, params)
    {
        handler.apply(owner, params);

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId])
            {
                if(    this._handlers[intervalId].owner == owner
                    && this._handlers[intervalId].handler == handler
                    && this._handlers[intervalId].delay == delay
                    && this._handlers[intervalId].params == params
                )
                {
                    this._clearById(intervalId);
                    break;
                }
            }
            else if(this._handlers.hasOwnProperty(intervalId))
            {
                delete this._handlers[intervalId];
            }
        }
    }

    p.removeByOwner = function(owner)
    {
        if(!owner) return;

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId]
                && this._handlers[intervalId].owner == owner
            )
            {
                this._clearById(intervalId);
            }
        }
    }

    p.removeByHandler = function(owner, handler)
    {
        if(!handler) return;

        for(var intervalId in this._handlers)
        {
            if(this._handlers.hasOwnProperty(intervalId)
                && this._handlers[intervalId]
                && this._handlers[intervalId].owner == owner
                && this._handlers[intervalId].handler == handler
            )
            {
                this._clearById(intervalId);
            }
        }
    }

    p.removeById = function(intervalId)
    {
        if(intervalId < 0) return;

        if(this._handlers.hasOwnProperty(intervalId) && this._handlers[intervalId])
        {
            this._clearById(intervalId);
        }
    }

    p._clearById = function(intervalId)
    {
        clearInterval(intervalId);
        this._handlers[intervalId].owner = null;
        this._handlers[intervalId].handler = null;
        this._handlers[intervalId].delay = null;
        this._handlers[intervalId].params = null;
        this._handlers[intervalId] = null;
        delete this._handlers[intervalId];
    }

    pinetreecom.DelayCaller = new DelayCaller();
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/10/30.
 */
(function()
{
    var KeyboardUtil = function()
    {
        this._data = new pinetree.Dictionary();
    }

    var p = KeyboardUtil.prototype;

    p._onKeyUp = function(evt)
    {
        var keyCode = evt.keyCode;
        var arr = this._data.get(keyCode);
        if(arr)
        {
            var i = arr.length, obj;
            while(i --)
            {
                obj = arr[i];
                if(obj && obj.listener)
                {
                    obj.listener.call(obj.owner, keyCode);
                }
            }
        }
    }

    p.listen = function(owner, key, listener)
    {
        this._checkAddKeyListener();

        if(typeof(key) == "number")
        {
            this._add(owner, key, listener);
        }
        else
        {
            var i = key.length;
            while(i --)
            {
                this._add(owner, key[i], listener);
            }
        }
    }

    p.cancel = function(owner, key, listener)
    {
        if(typeof(key) == "number")
        {
            this._remove(owner, key, listener);
        }
        else
        {
            var i = key.length;
            while(i --)
            {
                this._remove(owner, key[i], listener);
            }
        }
    }

    p.cancelByOwnerKey = function(owner, key)
    {
        if(typeof(key) == "number")
        {
            this._remove(owner, key, null);
        }
        else
        {
            var i = key.length;
            while(i --)
            {
                this._remove(owner, key[i], null);
            }
        }
    }

    p.cancelByKey = function(key)
    {
        var arr;
        if(typeof(key) == "number")
        {
            arr = this._data.get(key);
            if(arr)
            {
                arr.length = 0;
            }
            this._data.remove(key);
        }
        else
        {
            var i = key.length;
            while(i --)
            {
                arr = this._data.get(key[i]);
                if(arr)
                {
                    arr.length = 0;
                }
                this._data.remove(key[i]);
            }
        }

        this._checkRemoveKeyListener();
    }

    p.cancelByOwner = function(owner)
    {
        var i = this._data.length, j, keyCode, arr, obj;
        while(i --)
        {
            keyCode = this._data.getKeyByIndex(i);
            arr = this._data.get(keyCode);
            j = arr.length;
            while(j --)
            {
                obj = arr[j];
                if(obj && obj.owner == owner)
                {
                    arr.splice(j, 1);
                }
            }
            if(arr.length == 0)
            {
                this._data.remove(keyCode);
            }
        }

        this._checkRemoveKeyListener();
    }

    p.cancelAll = function()
    {
        var i = this._data.length, arr;
        while(i --)
        {
            arr = this._data.getValueByIndex(i);
            if(arr)
            {
                arr.length = 0;
            }
        }
        this._data.removeAll();
        this._checkRemoveKeyListener();
    }

    p._add = function(owner, keyCode, listener)
    {
        var i, obj, hasListened = false;

        var arr = this._data.get(keyCode);
        if(!arr)
        {
            arr = [];
            this._data.set(keyCode, arr);
        }

        i = arr.length;
        while(i --)
        {
            obj = arr[i];
            if(obj.owner == owner && obj.listener == listener)
            {
                hasListened = true;
                break;
            }
        }

        if(!hasListened)
        {
            arr.push({owner:owner, listener:listener});
        }
    }

    p._remove = function(owner, keyCode, listener)
    {
        var arr = this._data.get(keyCode);
        if(!arr) return;

        var i = arr.length, obj;
        while(i --)
        {
            obj = arr[i];
            if(obj)
            {
                if((owner == null || obj.owner == owner) && (listener == null || obj.listener == listener))
                {
                    arr.splice(i, 1);
                }
            }
        }

        if(arr.length == 0)
        {
            this._data.remove(keyCode);
        }

        this._checkRemoveKeyListener();
    }

    p._checkAddKeyListener = function()
    {
        if(!pinetree.stage.hasEventListener(pinetree.KeyboardEvent.KEYUP))
        {
            pinetree.stage.addEventListener(pinetree.KeyboardEvent.KEYUP, this._onKeyUp, this);
        }
    }

    p._checkRemoveKeyListener = function()
    {
        if(this._data.length == 0)
        {
            pinetree.stage.removeEventListener(pinetree.KeyboardEvent.KEYUP, this._onKeyUp, this);
        }
    }

    pinetreecom.KeyboardUtil = new KeyboardUtil();//singleton instance
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/10/30.
 */
(function()
{
    var StorageManager = function()
    {
        this._storage = window.localStorage;
    }

    var p = StorageManager.prototype;

    p.get = function(key)
    {
        if(!this._storage) return null;
        return this._storage.getItem(key);
    }

    p.set = function(key, value)
    {
        if(!this._storage) return;
        this._storage.setItem(key, value);
    }

    p.remove = function(key)
    {
        if(!this._storage) return;
        this._storage.removeItem(key);
    }

    p.removeAll = function()
    {
        if(!this._storage) return;
        this._storage.clear();
    }

    p.getKeyByIndex = function(index)
    {
        if(!this._storage) return null;
        return this._storage.key(index);
    }

    p.getAllData = function()
    {
        if(!this._storage) return null;

        var obj = {};
        var i = this._storage.length, key;
        while(i --)
        {
            key = this.getKeyByIndex(i);
            obj[key] = this.get(key);
        }
        return obj;
    }

    pinetreecom.StorageManager = new StorageManager();
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-11.
 */
(function()
{
    var PoolBase = function()
    {
        pinetree.Sprite.call(this);

        __defineGetterSetter(this, ["isBusy"]);
    }

    var p = __extends(PoolBase, pinetree.Sprite);

    p.getIsBusy = function()
    {
        return this._isBusy;
    }

    p.setIsBusy = function(value)
    {
        this._isBusy = value;
    }

    p.init = function(data)
    {

    }

    p.reset = function()
    {

    }

    pinetreecom.PoolBase = PoolBase;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-11.
 */
(function()
{
	var PoolUtil = function()
    {
    }
    
    PoolUtil._instances = new pinetree.Dictionary();

    PoolUtil.getMultiple = function(pClass, count)
    {
        var data = [];
        while(count -- > 0)
        {
            data.push(this.get(pClass));
        }
        return data;
    }

    PoolUtil.get = function(pClass)
    {
        if(!this._instances.get(pClass))
        {
            this._instances.set(pClass, []);
        }

        var arr = this._instances.get(pClass);
        var i, len = arr.length, instance;
        var result;
        for (i = 0; i < len; i ++)
        {
            instance = arr[i];
            if(!instance)
            {
                arr.splice(i, 1);
                i --;
                len --;
                continue;
            }
            else if(!instance.isBusy)
            {
                result = instance;
                result.isBusy = true;
                break;
            }
        }

        if(!result)
        {
            result = new pClass();
            if(result instanceof pinetreecom.PoolBase)
            {
                result.isBusy = true;
                arr.push(result);
            }
            else
            {
                result = null;
                trace("Error:The class does not extend from pinetreecom.PoolBase!!!")
            }
        }

        return result;
    }

    PoolUtil.remove = function(pClass, needDispose)
    {
        needDispose = __defaultSet(needDispose, true);

        var arr = this._instances.get(pClass);
        if(arr)
        {
            if(needDispose)
            {
                var instance;
                for (var key in arr)
                {
                    instance = arr[key];
                    instance && instance.dispose();
                }
            }

            arr.splice(0, arr.length);
            this._instances.remove(pClass);
        }
    }

    PoolUtil.resetAll = function()
    {
        var instance, i = 0, len, data;
        for (var key in this._instances)
        {
            data = this._instances.get(key);
            if(data)
            {
                len = data.length;
                for (i = 0; i < len; i ++)
                {
                    instance = data[i];

                    if(!instance)
                    {
                        data.splice(i, 1);
                        i --;
                        len --;
                        continue;
                    }

                    instance.reset();
                    instance.isBusy = false;
                }
            }
        }
    }

    PoolUtil.resetExcept = function(pClass, excepts)
    {
        var instance, i, len;
        var data = this._instances.get(pClass);
        if(data && data.length > 0)
        {
            len = data.length;
            for (i = 0; i < len; i ++)
            {
                instance = data[i];

                if(!instance)
                {
                    data.splice(i, 1);
                    i --;
                    len --;
                    continue;
                }

                if(excepts.indexOf(instance) > -1)
                    continue;

                instance.reset();
                instance.isBusy = false;
            }
        }
    }

    PoolUtil.reset = function(data)
    {
        if(data && data.length > 0)
        {
            var len = data.length, instance;
            for (var i = 0; i < len; i ++)
            {
                instance = data[i];

                if(!instance)
                {
                    data.splice(i, 1);
                    i --;
                    len --;
                    continue;
                }

                instance.reset();
                instance.isBusy = false;
            }
        }
    }

    PoolUtil.removeAll = function(needDispose)
    {
        needDispose = __defaultSet(needDispose, true);

        var instance, data, len = this._instances.length, key, subKey;
        for (var i = 0; i < len; i ++)
        {
            key = this._instances.getKeyByIndex(i);
            data = this._instances.get(key);
            if(data)
            {
                if(needDispose)
                {
                    for (subKey in data)
                    {
                        instance = data[subKey];
                        instance && instance.dispose();
                    }
                }
                data.splice(0, data.length);
            }
            this._instances.remove(key);
        }
    }

    pinetreecom.PoolUtil = PoolUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-10-28.
 */
(function()
{
    var LinkManager = {};
    LinkManager.to = function(link)
    {
        if(link.indexOf("http:") > -1)
        {
            navigateToURL(link, "_blank");
        }
        else
        {
            pinetreesite.siteController.gotoPage(link);
        }
    }

    pinetreecom.LinkManager = LinkManager;
})();

/**
 * Created by pinetree on 2015/4/27.
 */
(function()
{
    var DragPrevNextUtil = function(enabled)
    {
        this._enabled = enabled;

        this._target = null;
        this._owner = null;
        this._prevHandler = null;
        this._nextHandler = null;
        this._backHandler = null;
        this._direction = "x";
        this._autoRemove = false;//remove the target when go to prev or next

        this._mouseX = 0;
        this._mouseY = 0;

        this._currentX = 0;
        this._currentY = 0;
        this._mouseDownTargetX = 0;
        this._mouseDownTargetY = 0;
        this._originX = 0;
        this._originY = 0;

        this.distanceScale = 0.5;
        this.edgeX = 50;
        this.edgeY = 50;

        this.tweenTime = 0.5;
        this.transition = Quart.easeOut;
    }

    var p = DragPrevNextUtil.prototype;

    p.listen = function(target, owner, prevHandler, nextHandler, backHandler, direction, autoRemove, originX, originY)
    {
        if(!target || !this._enabled) return;

        if(this._target)
        {
            this._target.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onMouseDown, this);
        }

        this._target = target;
        this._owner = owner || null;
        this._prevHandler = prevHandler;
        this._nextHandler = nextHandler;
        this._backHandler = backHandler;
        this._direction = direction || this._direction || "x";
        this._autoRemove = autoRemove || false;//default is false
        this._originX = originX == undefined ? this._target.x : originX;
        this._originY = originY == undefined ? this._target.y : originY;

        this._target.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onMouseDown, this);
        this._target.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onMouseDown, this);
    }

    p._onMouseDown = function(evt)
    {
        evt.preventDefault();

        TweenMax.killTweensOf(this._target, false, {"x":true, "y":true});

        this._mouseX = evt.mouseX;
        this._mouseY = evt.mouseY;

        this._mouseDownTargetX = this._target.x;
        this._mouseDownTargetY = this._target.y;

        this._currentX = this._target.x;
        this._currentY = this._target.y;

        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onStageMouseUp, this);
        pinetree.stage.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onStageMouseUp, this);

        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onStageMouseMove, this);
        pinetree.stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onStageMouseMove, this);
    }

    p._onStageMouseMove = function(evt)
    {
        evt.preventDefault();
        if(this._direction == "x")
        {
            var offsetX = evt.mouseX - this._mouseX;
            this._currentX += offsetX;
            this._mouseX = evt.mouseX;

            this._target.x = this._currentX * this.distanceScale;
        }
        else
        {
            var offsetY = evt.mouseY - this._mouseY;
            this._currentY += offsetY;
            this._mouseY = evt.mouseY;

            this._target.y = this._currentY * this.distanceScale;
        }
    }

    p._onStageMouseUp = function(evt)
    {
        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onStageMouseUp, this);
        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onStageMouseMove, this);

        var distance = 0;
        if(this._direction == "x")
        {
            distance = this._target.x - this._mouseDownTargetX;
            if(Math.abs(distance) < this.edgeX)
            {
                if(this._backHandler)
                {
                    this._backHandler.call(this._owner, this._target);
                }
                else
                {
                    this.back();
                }
                return;
            }
        }
        else
        {
            distance = this._target.y - this._mouseDownTargetY;
            if(Math.abs(distance) < this.edgeY)
            {
                if(this._backHandler)
                {
                    this._backHandler.call(this._owner, this._target);
                }
                else
                {
                    this.back();
                }
                return;
            }
        }

        if(distance < 0)
        {
            this._nextHandler && this._nextHandler.call(this._owner, this._target);
        }
        else
        {
            this._prevHandler && this._prevHandler.call(this._owner, this._target);
        }

        if(this._autoRemove)
        {
            this.remove();
        }
    }

    p.back = function()
    {
        if(!this._target || !this._enabled) return;

        if(this._direction == "x")
        {
            TweenMax.to(this._target, this.tweenTime, {x:this._originX, ease:this.transition});
        }
        else
        {
            TweenMax.to(this._target, this.tweenTime, {y:this._originY, ease:this.transition});
        }
    }

    p.remove = function()
    {
        if(!this._enabled) return;

        this._prevHandler = null;
        this._nextHandler = null;
        this._backHandler = null;

        if(this._target)
        {
            TweenMax.killTweensOf(this._target, false, {"x":true, "y":true});

            this._target.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onMouseDown, this);
            this._target = null;

            pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onStageMouseUp, this);
            pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onStageMouseMove, this);
        }

        this._owner = null;
    }

    pinetreecom.DragPrevNextUtil = DragPrevNextUtil;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-11.
 * foreverpinetree@gmail.com
*/
(function()
{
    var UIComponent = function()
    {
        pinetree.Sprite.call(this);

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;
        this.tweenDelay = 0.5;

        this.resizePriority = 0;

        __defineGetterSetter(this, ["stageX", "stageY"]);
    }

    var p = __extends(UIComponent, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);
        pinetree.stage.addEventListener(pinetree.Event.RESIZE, this._onResize, this, this.resizePriority);
    }

    p.removedFromStage = function()
    {
        pinetree.Sprite.prototype.removedFromStage.call(this);
        pinetree.stage.removeEventListener(pinetree.Event.RESIZE, this._onResize, this);
    }

    p._onResize = function(evt)
    {
        this.resize(pinetree.stage.stageWidth, pinetree.stage.stageHeight);
    }

    p.resize = function(sw, sh)
    {
        //
    }

    p.redraw = function()
    {
        this.stage && this._onResize(null);
    }

    p.linkTo = function(url, window)
    {

    }

    p.show = function()
    {
        this.visible = true;
    }

    p.hide = function()
    {
        this.visible = false;
    }

    p.getStageX = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageX(this);
        }

        return 0;
    }

    p.getStageY = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageY(this);
        }

        return 0;
    }

    /**
     * once call this function, this instance should not be used any more!
     */
    p.dispose = function()
    {
        pinetree.stage.removeEventListener(pinetree.Event.RESIZE, this._onResize, this);
        pinetree.Sprite.prototype.dispose.call(this);
    }
    pinetreecom.UIComponent = UIComponent;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-15.
 */
(function()
{
    var TriggerRect = function(w, h, color, pAlpha)
    {
        pinetree.Sprite.call(this);

        this._isEnabled = true;
        this._isOver = false;

        this._triggerRect = new pinetree.Quad();
        this._triggerRect.color = color || 0x000000;
        this._triggerRect.alpha = pAlpha || 0;
        if(pAlpha != undefined && pAlpha > 0)//just for test, set it to 0 while release.
            this.addChild(this._triggerRect);

        this.ON_ROLL_OVER = new pinetree.Signal();
        this.ON_ROLL_OUT = new pinetree.Signal();
        this.ON_MOVING = new pinetree.Signal();
        this.ON_MOUSE_WHEEL = new pinetree.Signal();

        this.width = w;
        this.height = h;

        this.mouseEnabled = this.mouseChildren = false;

        __defineGetterSetter(this, ["isEnabled"]);
    }

    var p = __extends(TriggerRect, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);

        this.stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMoveHandler, this);
        this.stage.addEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheelHandler, this);
    }

    p.removedFromStage = function()
    {
        pinetree.Sprite.prototype.removedFromStage.call(this);

        this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMoveHandler, this);
        this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheelHandler, this);
    }

    p._onMouseMoveHandler = function(evt)
    {
        if(!this._isEnabled || !this.stage) return;

        if(this.hitTestPoint(this.stage.mouseX, this.stage.mouseY))
        {
            if(!this._isOver)
            {
                this._isOver = true;
                this.ON_ROLL_OVER.dispatch(evt);
            }

            this.ON_MOVING.dispatch(evt);
        }
        else
        {
            if(this._isOver)
            {
                this._isOver = false;
                this. ON_ROLL_OUT.dispatch(evt);
            }
        }
    }

    p._onMouseWheelHandler = function(evt)
    {
        if(!this._isEnabled || !this.stage) return;

        if(this.hitTestPoint(this.stage.mouseX, this.stage.mouseY))
        {
            this.ON_MOUSE_WHEEL.dispatch(evt);
        }
    }

    p.getIsEnabled = function() { return this._isEnabled; };
    p.setIsEnabled = function(value)
    {
        this._isEnabled = value;
    }

    p.getIsOver = function() { return this._isOver; };

    p.setWidth = function(value)
    {
        pinetree.Sprite.prototype.setWidth.call(this, value);
        this._triggerRect.width = value;
    }

    p.setHeight = function(value)
    {
        pinetree.Sprite.prototype.setHeight.call(this, value);
        this._triggerRect.height = value;
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._width, this._height);
    }

    p.dispose = function()
    {
        this.ON_ROLL_OVER && this.ON_ROLL_OVER.removeAll();
        this.ON_ROLL_OUT && this.ON_ROLL_OUT.removeAll();
        this.ON_MOVING && this.ON_MOVING.removeAll();
        this.ON_MOUSE_WHEEL && this.ON_MOUSE_WHEEL.removeAll();

        this.ON_ROLL_OVER = null;
        this.ON_ROLL_OUT = null;
        this.ON_MOVING = null;
        this.ON_MOUSE_WHEEL = null;

        if(this.stage)
        {
            this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMoveHandler, this);
            this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheelHandler, this);
            this.stage = null;
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.TriggerRect = TriggerRect;
}());


(function()
{
	var ScrollerCore = function(stage, isVertical, enableArrowKey)
	{
        pinetree.EventDispatcher.call(this);

		this._isVertical = __defaultSet(isVertical, true);//default is vertical

		this._disposed = false;
		this._isReady = false;
		this._stage = null;
		this._mouseWheelArea = null;
		this._base = null;
		this._slider = null;
		this._isBasePressed = false;
		this._isSliderPressed = false;
		this._contentSize = 0;
		this._maskSize = 0;
		this._isUnderFlow = false;
		this._content = null;
		this._key = "";
		this._upperBound = 0;
		this._lowerBound = 0;
		this._useSmoothScroll = true;
		this._smoothScrollEasing = 6;
		this._isScrolling = false;
		this._targetScroll = 0;
		this._prevProperty = 0;
		this._terminateScrollFlag = false;
		this._isStartedScroll = false;
		this._ticker = null;
		this._useFlexibleSlider = true;
		this._isScrollingByUser = false;
		this._useIgnoreSliderProperty = false;
		this._minSliderProperty = 10;
		this._sliderProperty = 0;
		this._isDragging = false;
		this._isScrollingByDrag = false;
		this._usePixelFittingSlider = false;
		this._useMouseWheel = true;
		this._usePixelFittingContent = false;
		this._useOvershoot = false;
		this._overshootPixels = 100;
		this._overshootEasing = 6;
		this._useAutoScrollCancelable = true;
		this._isOvershooting = false;
		this._overShootTargetScroll = 0;
		this._isAutoScrolling = false;
		this._useOvershootDeformationSlider = true;
		this._useAutoScrollUsingRatio = false;
		this._autoScrollAmount = 6;
		this._autoScrollDirection = false;
		this._autoScrollVelocity = 0;
		this._calledFromUpdateAutoScroll = false;
		this._arrowScrollAmount = 200;

        this._isMouseDown = false;

        this._enableArrowKey = enableArrowKey;
        this._keyEnabled = true;

        this.ON_MOUSE_UP = new pinetree.Signal();
        this.ON_MOUSE_DOWN = new pinetree.Signal();
		
		this.stage = stage;

        __defineGetterSetter(this, ["isReady", "stage", "mouseWheelArea", "base", "slider", "isBasePressed",
            "isSliderPressed", "contentSize", "maskSize", "isOverFlow", "isUnderFlow",
            "property", "upperBound", "lowerBound", "useSmoothScroll", "smoothScrollEasing",
            "isScrolling", "targetScroll", "useFlexibleSlider","minSliderProperty",
            "useIgnoreSliderProperty", "sliderProperty", "usePixelFittingSlider",
            "usePixelFittingContent", "buttonEnabled", "sliderEnabled", "baseEnabled",
            "useMouseWheel", "useOvershoot", "overshootPixels", "overshootEasing",
            "useOvershootDeformationSlider", "isOvershooting", "useAutoScrollCancelable",
            "isAutoScrolling", "useAutoScrollUsingRatio", "autoScrollAmount", "autoScrollDirection",
            "isMouseDown", "keyEnabled"
        ]);
	}

    var p = __extends(ScrollerCore, pinetree.EventDispatcher);
		
    p.setup = function(content, key, contentSize, maskSize,
                          upperBound, lowerBound)
    {

        if (this._isReady)
        {
            this._stopUserActionScroll();
            this.stopAutoScroll();
        }

        this._isReady = true;

        this._content     = content;
        this._key         = key;
        this._contentSize = contentSize;
        this._maskSize    = maskSize;
        this._upperBound  = upperBound;
        this._lowerBound  = lowerBound;

        if (!this._ticker)
        {
            this._ticker = new pinetree.Shape();
        }
        this._targetScroll = this.property;
        this._isScrolling = false;
        this._isAutoScrolling = false;
        this._isDragging = false;
        this._isScrollingByDrag = false;
        this._isScrollingByUser = false;
        this._isOvershooting = false;
        this._isStartedScroll = false;
        this._isUnderFlow = (this._contentSize <= this._maskSize) ? true : false;
        this._calledFromUpdateAutoScroll = false;
        this._isBasePressed   = false;
        this._isSliderPressed = false;

        if (this._stage)
        {
            this._bindBaseButton(true);
            this._bindSliderButton(true);

            if(this._enableArrowKey)
            {
                this._stage.addEventListener(pinetree.KeyboardEvent.KEYDOWN, this._onKeyDown, this);
            }
        }
        this.buttonEnabled = true;

        this.resizeSlider();
    }

    p._onKeyDown = function(evt)
    {
        if(!this._keyEnabled)
        {
            return;
        }

        var keyCode = evt.keyCode;
        switch (keyCode)
        {
            case pinetree.Keyboards.LEFT:
            case pinetree.Keyboards.UP:
                this.scrollUp();
                break;
            case pinetree.Keyboards.RIGHT:
            case pinetree.Keyboards.DOWN:
                this.scrollDown();
                break;
        }
    }

    p.scrollUp = function()
    {
        if (!this._isReady) return;

        this._isScrollingByDrag = false;
        this.scrollByRelativePixel(this._arrowScrollAmount);
    }

    p.scrollDown = function()
    {
        if (!this._isReady) return;

        this._isScrollingByDrag = false;

        this.scrollByRelativePixel(- this._arrowScrollAmount);
    }

    p.scrollByRelativeRatio = function(ratio, fromTargetPosition)
    {
        if (!this._isReady) return;

        if(fromTargetPosition == undefined) fromTargetPosition = true;
        var o = (fromTargetPosition) ? this._targetScroll : this.property;

        var pixel = o - (this._lowerBound - this._upperBound) * ratio;

        this.scrollByAbsolutePixel(pixel);
    }

    p.scrollByAbsoluteRatio = function(ratio)
    {
        if (!this._isReady) return;

        var pixel = (this._lowerBound - this._upperBound) * ratio + this._upperBound;

        this.scrollByAbsolutePixel(pixel);
    }

    p.scrollByRelativePixel = function(pixel, fromTargetPosition)
    {
        if (!this._isReady) return;
        if(fromTargetPosition == undefined) fromTargetPosition = true;
        var o = (fromTargetPosition) ? this._targetScroll : this.property;

        this.scrollByAbsolutePixel(o + pixel);
    }

    p.scrollByAbsolutePixel = function(pixel)
    {
        if (!this._isReady) return;

        this._targetScroll = pixel;

        this._overShootTargetScroll = (this._targetScroll > this._upperBound) ? this._upperBound :
            (this._targetScroll < this._lowerBound) ? this._lowerBound : this._targetScroll;

        if (this._useOvershoot && this._useSmoothScroll && !this._calledFromUpdateAutoScroll)
        {
            this._targetScroll = (this._targetScroll > this._upperBound + this._overshootPixels) ?
                this._upperBound + this._overshootPixels :
                (this._targetScroll < this._lowerBound - this._overshootPixels) ?
                this._lowerBound - this._overshootPixels : this._targetScroll;
        }
        else
        {
            this._targetScroll = this._overShootTargetScroll;
        }

        this._startScroll();
    }

    p.startAutoScroll = function(isDown)
    {
        if(isDown == undefined) isDown = true;
        if (!this._isReady) return;

        this._autoScrollDirection = isDown;

        this._autoScrollVelocity = ((isDown) ? -1 : 1) * this._autoScrollAmount;

        if(!this._isAutoScrolling)
        {
            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateAutoScroll, this);
            this._ticker.addEventListener(pinetree.Event.ENTER_FRAME, this._updateAutoScroll, this);
        }

        this._isAutoScrolling = true;
    }

    p.stopAutoScroll = function()
    {
        if (!this._isReady || !this._isAutoScrolling) return;

        this._isAutoScrolling = false;

        this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateAutoScroll, this);
    }

    p.resizeSlider = function()
    {
        this._isUnderFlow = (this._contentSize <= this._maskSize) ? true : false;

        if (!this._isReady || !this._slider) return;

        if (this._useIgnoreSliderProperty)
        {
            this._sliderProperty = 0;
            this._updateSlider();
            return;
        }

        if (!this._useFlexibleSlider)
        {
            this._sliderProperty = this._isVertical ? this._slider.height : this._slider.width;
            this._updateSlider();
            return;
        }

        if (!this.base) return;

        var contentRatio = this._maskSize / this._contentSize;
        contentRatio = pinetreecom.MathUtil.parseFloatByFixed(contentRatio, 3);

        if (this._isUnderFlow)
        {
			if(this._isVertical)
	        {
			    this._slider.height = this._base.height;
	            this._sliderProperty = this._base.height;
			}
			else
			{
				this._slider.width = this._base.width;
	            this._sliderProperty = this._base.width;
			}

            this._updateSlider();
            return;
        }

        var p = this._isVertical ? contentRatio * this._base.height : contentRatio * this._base.width;
        this._sliderProperty = Math.round((p < this._minSliderProperty) ? this._minSliderProperty : p );

        if(this._isVertical)
			this._slider.height = this._sliderProperty;
		else
			this._slider.width = this._sliderProperty;
        this._updateSlider();
    }

    p._bindBaseButton = function(bind)
    {
        if (this._base)
        {
            if (bind)
            {
                this._base.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._baseButtonMouseDownHandler, this);
                this._base.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._baseButtonMouseDownHandler, this);
                if (this._stage)
                {
                    this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP , this._baseButtonMouseUpHandler, this);
                    this._stage.addEventListener(pinetree.MouseEvent.MOUSE_UP , this._baseButtonMouseUpHandler, this);
                }

                this.baseEnabled = this._isReady;
            }
            else
            {
                this._base.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._baseButtonMouseDownHandler, this);
                if (this._stage) this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP , this._baseButtonMouseUpHandler, this);

                this.baseEnabled = false;
            }
        }
    }

    p._bindSliderButton = function(bind)
    {
        if (this._slider)
        {
            if (bind)
            {
                this._slider.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._sliderButtonMouseDownHandler, this);
                this._slider.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._sliderButtonMouseDownHandler, this);
                if (this._stage)
                {
                    this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._sliderButtonMouseUpHandler, this);
                    this._stage.addEventListener(pinetree.MouseEvent.MOUSE_UP , this._sliderButtonMouseUpHandler, this);
                }

                this.sliderEnabled = this._isReady;

            }
            else
            {
                this._slider.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._sliderButtonMouseDownHandler, this);
                if (this._stage) this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._sliderButtonMouseUpHandler, this);

                this.sliderEnabled = false;
            }
        }
    }

    p._pressBase = function(e)
    {
        if (this._useAutoScrollCancelable) this.stopAutoScroll();
        this._isScrollingByUser = true;
        this._isScrollingByDrag = false;

        var baseStageX = pinetreecom.CommonUtil.getStageX(this._base);
        var baseStageY = pinetreecom.CommonUtil.getStageY(this._base);
        var stagePos = pinetree.getStagePosition(e);
        var currentMouseX = stagePos.x - baseStageX;
        var currentMouseY = stagePos.y - baseStageY;

        var ratio = 0;
		if(this._slider && !this._useIgnoreSliderProperty)
		{
			if(this._isVertical)
				ratio = currentMouseY / (this._base.height - this._slider.height);
			else
				ratio = currentMouseX / (this._base.width - this._slider.width);
		}
		else
		{
			if(this._isVertical)
				ratio = currentMouseY / (this._base.height - 1);
			else
				ratio = currentMouseX / (this._base.width - 1);
		}

        this.scrollByAbsoluteRatio(ratio);
    }

    p._pressSlider = function()
    {
        if (!this._base) return;
        if (this._useAutoScrollCancelable) this.stopAutoScroll();
        this._isScrollingByUser = true;

        this._isDragging = true;

		var prop = this._isVertical ? this._base.height : this._base.width;
        var boundProperty = (this._useIgnoreSliderProperty) ? prop :
                (prop - (this._isVertical ? this._slider.height : this._slider.width));

        var bound;
		if(this._isVertical)
			bound = new pinetree.Rectangle(this._base.x, this._base.y, 0, boundProperty);
		else
			bound = new pinetree.Rectangle(this._base.x, this._base.y, boundProperty, 0);

        this._slider.startDrag(false, bound);

        this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._moveSliderHandler, this);
        this._stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._moveSliderHandler, this);
        this._stage.selectable = false;

    }

    p._releaseSlider = function()
    {
        this._isDragging = false;

        this._slider.stopDrag();

        this._moveSliderHandler(null);

        this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._moveSliderHandler, this);
        this._stage.selectable = true;
    }

    p._startScroll = function()
    {
        if (this._usePixelFittingContent) this._targetScroll = Math.round(this._targetScroll);

        if (this._useSmoothScroll)
        {
            this._prevProperty = NaN;
            this._terminateScrollFlag = false;
            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);
            this._ticker.addEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);

        }
        else
        {
            if (this._isScrolling) this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);
            if (this._isOvershooting)
            {
                this._targetScroll = this._overShootTargetScroll;
                this._isOvershooting = false;
            }

            if (this.property != this._targetScroll)
            {
                this.dispatchWith("scroll_start");
                this.dispatchWith("scroll_progress");
                this.dispatchWith("scroll_complete");
            }

            this._isScrolling = false;
            this._isScrollingByUser = false;
            this._isScrollingByDrag = false;
            this.property = this._targetScroll;
            this._updateSlider();
        }
    }

    p.stopScroll = function()
    {
        this._stopUserActionScroll();
        this.stopAutoScroll();
    }

    p.reset = function()
    {
        this._isDragging = false;
        this._isScrollingByDrag = false;
        this.stopScroll();
        this.property = 0;
        this._updateSlider();
        this.dispatchWith("scroll_progress");
        this.dispatchWith("scroll_complete");
    }

    p._stopUserActionScroll = function()
    {
        this._targetScroll =  (this._usePixelFittingContent) ? Math.round(this.property) : this.property;
        if (this._isScrolling)
        {
            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);
            this.dispatchWith("scroll_complete");
        }
        this._isScrolling = false;
        this._updateSlider();
    }

    p._updateTargetScroll = function()
    {
        var d = this._overShootTargetScroll - this._targetScroll;
        var a = (d > 0) ? d : -d;

        if (a < 0.01)
        {
            this._targetScroll = this._overShootTargetScroll;
        }
        else
        {
            this._targetScroll += d / this._overshootEasing;
        }
    }

    p._updateSlider = function()
    {
        if (!this._slider || !this._base || !this._content) return;

        if (this._contentSize <= this._maskSize) return;
        var contentRatio = (this._upperBound - this.property) / (this._upperBound - this._lowerBound);
        contentRatio = pinetreecom.MathUtil.parseFloatByFixed(contentRatio, 3);

		var baseProp = this._isVertical ? this._base.height : this._base.width;
		var sliderProp = this._isVertical ? this._slider.height : this._slider.width;

        var prop = (this._useIgnoreSliderProperty) ? baseProp : (baseProp - sliderProp);

        var p = contentRatio * prop;

        if (this._useOvershoot && this._useOvershootDeformationSlider && !this._useIgnoreSliderProperty)
        {
            if (this._useSmoothScroll)
            {

                this._isOvershooting = false;

                if (contentRatio < 0)
                {
                    this._isOvershooting = true;
					if(this._isVertical)
                    	this._slider.height += ((this._sliderProperty + p) - this._slider.height) / 1;
					else
						this._slider.width += ((this._sliderProperty + p) - this._slider.width) / 1;
                }

                if (contentRatio > 1)
                {
                    this._isOvershooting = true;
					if(this._isVertical)
                    	this._slider.height += ((this._sliderProperty - p + prop) - this._slider.height) / 1;
					else
						this._slider.width += ((this._sliderProperty - p + prop) - this._slider.width) / 1;
                }

                if (contentRatio == 1)
                {
					if(this._isVertical)
                    	this._slider.height = this._sliderProperty;
					else
						this._slider.width = this._sliderProperty;
                }

                if (!this._isOvershooting)
                {
					if(this._isVertical)
                    	this._slider.height += (this._sliderProperty - this._slider.height) / 10;
					else
						this._slider.width += (this._sliderProperty - this._slider.width) / 10;
                }

            }
            else
            {
				if(this._isVertical)
                	this._slider.height = this._sliderProperty;
				else
					this._slider.width = this._sliderProperty;
            }

            baseProp = this._isVertical ? this._base.height : this._base.width;
            sliderProp = this._isVertical ? this._slider.height : this._slider.width;
            prop = baseProp - sliderProp;
            p = contentRatio * prop;

            if (this._isDragging)
            {
                var bound;
				if(this._isVertical)
					bound = new pinetree.Rectangle(this._base.x, this._base.y, 0, prop);
				else
					bound = new pinetree.Rectangle(this._base.x, this._base.y, prop, 0);
                this._slider.startDrag(false, bound);
                return;
            }

            if (this._isScrollingByDrag) return;
        }
        else
        {

            this._isOvershooting = false;

            if (contentRatio < 0)
            {
                this._isOvershooting = true;
            }

            if (contentRatio > 1)
            {
                this._isOvershooting = true;
            }
        }

        if (this._isDragging || this._isScrollingByDrag) return;

		if(this._isVertical)
        	this._slider.y = (p < 0) ? 0 : (p > prop) ? prop : p;
		else
			this._slider.x = (p < 0) ? 0 : (p > prop) ? prop : p;
    }

    p._baseButtonMouseDownHandler = function(e)
    {
        this._isMouseDown = true;
        this.ON_MOUSE_DOWN && this.ON_MOUSE_DOWN.dispatch();

        this._isBasePressed = true;
        if (!this._isReady) return;
        this._pressBase(e);
    }

    p._baseButtonMouseUpHandler = function(e)
    {
        this._isMouseDown = false;
        this.ON_MOUSE_UP && this.ON_MOUSE_UP.dispatch();

        if (!this._isBasePressed) return;
        this._isBasePressed = false;
    }

    p._sliderButtonMouseDownHandler = function(e)
    {
        this._isMouseDown = true;
        this.ON_MOUSE_DOWN && this.ON_MOUSE_DOWN.dispatch();

        this._isSliderPressed = true;
        if (!this._isReady) return;
        this._pressSlider();
    }

    p._sliderButtonMouseUpHandler = function(e)
    {
        this._isMouseDown = false;
        this.ON_MOUSE_UP && this.ON_MOUSE_UP.dispatch();

        if (!this._isSliderPressed) return;
        this._isSliderPressed = false;
        if (!this._isReady) return;
        this._releaseSlider();
    }

    p._mouseWheelHandler = function(e)
    {
        if (!this._isReady || !this._useMouseWheel || e.delta == 0) return;
        if (!this._useOvershoot)
        {
            if ( (this._targetScroll == this._upperBound && e.delta > 0) ||
                 (this._targetScroll == this._lowerBound && e.delta < 0) ) return;
        }

        if (this._useAutoScrollCancelable) this.stopAutoScroll();

        this._isScrollingByUser = true;
        this._isScrollingByDrag = false;

        if (e.delta > 0)
        {
            this.scrollByRelativePixel(this._arrowScrollAmount, true);

        }
        else
        {
            this.scrollByRelativePixel(-this._arrowScrollAmount, true);
        }
    }

    p._moveSliderHandler = function(e)
    {
        this._isScrollingByDrag = true;

        var ratio;
		if(this._isVertical)
		{
			var h = (this._useIgnoreSliderProperty) ? this._base.height : (this._base.height - this._slider.height);
        	ratio = this._slider.y / h;
		}
		else
		{
			var w = (this._useIgnoreSliderWidth) ? this._base.width : (this._base.width - this._slider.width);
        	ratio = this._slider.x / w;
		}

        this.scrollByAbsoluteRatio(ratio);
    }

    p._updateScroll = function(e)
    {
        if (!this._terminateScrollFlag && (this._useOvershoot || this._useSmoothScroll))
        {
            this._updateTargetScroll();
        }

        this.dispatchWith("scroll_progress");

        var d = this._targetScroll - this.property;
        if (this._terminateScrollFlag)
        {
            this._isScrolling = false;
            this._isScrollingByUser = false;
            this._isScrollingByDrag = false;
            this._isOvershooting = false;

            this.property = this._targetScroll;

            this._updateSlider();

            if (this._slider && !this._useIgnoreSliderProperty)
            {
				if(this._isVertical)
				{
	                if (this._usePixelFittingSlider)
	                {
	                    this._slider.y = Math.round(this._slider.y);
	                }
	                this._slider.height = this._sliderProperty;
				}
				else
				{
					if (this._usePixelFittingSlider)
	                {
	                    this._slider.x = Math.round(this._slider.x);
	                }
	                this._slider.width = this._sliderProperty;
				}
            }

            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);

            this.dispatchWith("scroll_progress");
            this.dispatchWith("scroll_complete");
        }
        else
        {
            this._prevProperty = this.property;
            this.property += d / this._smoothScrollEasing;

            this._updateSlider();

            var flag = Math.floor(this.property * 1000) == Math.floor(this._prevProperty * 1000);
            this._terminateScrollFlag = (flag && !this._isOvershooting) ? true : false;

            if (!this._isScrolling && !this._terminateScrollFlag )
            {
                this._isStartedScroll = true;
                this.dispatchWith("scroll_start");
                this.dispatchWith("scroll_progress");
            }

            if (this._isScrolling && !this._terminateScrollFlag )
            {
                this.dispatchWith("scroll_progress");
            }

            if (this._isScrolling && this._terminateScrollFlag )
            {
                this._isStartedScroll = false;
                this.dispatchWith("scroll_progress");
                this.dispatchWith("scroll_complete");
            }

            this._isScrolling = !this._terminateScrollFlag;
        }
    }

    p._updateAutoScroll = function(e)
    {
        if (this._isScrollingByUser || this.isBasePressed) return;

        this._isScrollingByDrag = false;

        this._calledFromUpdateAutoScroll = true;

        (this._useAutoScrollUsingRatio) ? this.scrollByRelativeRatio(this._autoScrollVelocity) :
            this.scrollByRelativePixel(this._autoScrollVelocity);

        this._calledFromUpdateAutoScroll = false;
    }

    p.setKeyEnabled = function (value)
    {
        this._keyEnabled = value;
    }

    p.getKeyEnabled = function ()
    {
        return this._keyEnabled;
    }

    p.getIsReady = function() { return this._isReady; }

    p.getStage = function() { return this._stage; }
    p.setStage = function(value)
    {
        if (this._stage || value == null) return;
        this._stage = value;

        if (this._stage)
        {
            if (this._mouseWheelArea == null) this.mouseWheelArea = this._stage;
            this.base   = this.base;
            this.slider = this.slider;
        }
    }

    p.getMouseWheelArea = function() { return this._mouseWheelArea; }
    p.setMouseWheelArea = function(value)
    {
        if (this._mouseWheelArea)
        {
            if(this._mouseWheelArea instanceof pinetree.Stage)
                this._mouseWheelArea.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._mouseWheelHandler, this);
            else if(this._mouseWheelArea instanceof pinetreecom.TriggerRect)
                this.mouseWheelArea.ON_MOUSE_WHEEL.removeAll();
        }
        this._mouseWheelArea = value;
        if (this._mouseWheelArea)
        {
            if(this._mouseWheelArea instanceof pinetree.Stage)
            {
                this._mouseWheelArea.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._mouseWheelHandler, this);
                this._mouseWheelArea.addEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._mouseWheelHandler, this);
            }
            else if(this._mouseWheelArea instanceof pinetreecom.TriggerRect)
            {
                this._mouseWheelArea.ON_MOUSE_WHEEL.add(this, this._mouseWheelHandler);
            }
        }
    }

    p.getBase = function() { return this._base; }
    p.setBase = function(value)
    {
        this._bindBaseButton(false);
        this._base = value;
        this._bindBaseButton(true);
        this.resizeSlider();
    }

    p.getSlider = function(){ return this._slider; }
    p.setSlider = function(value)
    {
        this._bindSliderButton(false);
        this._slider = value;
        this._bindSliderButton(true);
        this.resizeSlider();
    }

    p.getIsBasePressed = function() { return this._isBasePressed; }

    p.getIsSliderPressed = function() { return this._isSliderPressed; }

    p.getContentSize = function() { return this._contentSize; }
    p.setContentSize = function(value)
    {
        this._contentSize = value;
        this.resizeSlider();
    }

    p.getMaskSize = function() { return this._maskSize; }
    p.setMaskSize = function(value)
    {
        this._maskSize = value;
        this.resizeSlider();
    }

    p.getIsOverFlow = function() { return !this._isUnderFlow; }

    p.getIsUnderFlow = function() { return this._isUnderFlow; }

    p.getProperty = function() { return this._content[this._key]; }
    p.setProperty = function(value) { this._content[this._key] = value; }

    p.getUpperBound = function() { return this._upperBound; }
    p.setUpperBound = function(value)
    {
        this._upperBound = value;
        this.resizeSlider();
        if ((this._upperBound - this.property) / (this._upperBound - this._lowerBound) > 1)
        {
            this._terminateScrollFlag = true;
            this._targetScroll = this._lowerBound;
            this.property = this._lowerBound;
        }
    }

    p.getLowerBound = function() { return this._lowerBound; }
    p.setLowerBound = function(value)
    {
        this._lowerBound = value;
        this.resizeSlider();
        if ((this._upperBound - this.property) / (this._upperBound - this._lowerBound) > 1)
        {
            this._terminateScrollFlag = true;
            this._targetScroll = this._lowerBound;
            this.property = this._lowerBound;
        }
    }

    p.getUseSmoothScroll = function() { return this._useSmoothScroll; }
    p.setUseSmoothScroll = function(value)
    {
        this._useSmoothScroll = value;
        if (!value && this._isScrolling) this._startScroll();
    }

    p.getSmoothScrollEasing = function() { return this._smoothScrollEasing; }
    p.setSmoothScrollEasing = function(value) { this._smoothScrollEasing = (value < 1) ? 1 : value; }

    p.getIsScrolling = function() { return this._isScrolling; }

    p.getTargetScroll = function() { return this._targetScroll; }

    p.getUseFlexibleSlider = function() { return this._useFlexibleSlider; }
    p.setUseFlexibleSlider = function(value)
    {
        this._useFlexibleSlider = value;
        this.resizeSlider();
    }

    p.getMinSliderProperty = function() { return this._minSliderProperty; }
    p.setMinSliderProperty = function(value)
    {
        this._minSliderProperty = value;
        this.resizeSlider();
    }

    p.getUseIgnoreSliderProperty = function() { return this._useIgnoreSliderProperty; }
    p.setUseIgnoreSliderProperty = function(value)
    {
        this._useIgnoreSliderProperty = value;
        this.resizeSlider();
    }

    p.getSliderProperty = function() { return this._sliderProperty; }

    p.getUsePixelFittingSlider = function() { return this._usePixelFittingSlider; }
    p.setUsePixelFittingSlider = function(value)
    {
        this._usePixelFittingSlider = value;
        if (value && !this._isScrolling && !this._useIgnoreSliderProperty)
        {
			if(this._isVertical)
			{
				this._slider.y = Math.round(this._slider.y);
	            this._slider.height = Math.round(this._sliderProperty);
			}
            else
			{
				this._slider.x = Math.round(this._slider.x);
	            this._slider.width = Math.round(this._sliderProperty);
			}
        }
    }

    p.getUsePixelFittingContent = function() { return this._usePixelFittingContent; }
    p.setUsePixelFittingContent = function(value)
    {
        this._usePixelFittingContent = value;
        if (value && !this._isScrolling) this.property = Math.round(this.property);
    }

    p.setButtonEnabled = function(value)
    {
        this.sliderEnabled = this.baseEnabled = value;
    }

    p.setSliderEnabled = function(value)
    {
        if (this._slider) {
            this._slider.mouseEnabled = this._slider.buttonMode = value;
            if (!value) this._slider.stopDrag();
        }
    }

    p.setBaseEnabled = function(value)
    {
        if (this._base) this._base.mouseEnabled = this._base.buttonMode = value;
    }

    p.getUseMouseWheel = function() { return this._useMouseWheel; }
    p.setUseMouseWheel = function(value) { this._useMouseWheel = value; }

    p.getUseOvershoot = function() { return this._useOvershoot; }
    p.setUseOvershoot = function(value) { this._useOvershoot = value; }

    p.getOvershootPixels = function() { return this._overshootPixels; }
    p.setOvershootPixels = function(value) { this._overshootPixels = value; }

    p.getOvershootEasing = function() { return this._overshootEasing; }
    p.setOvershootEasing = function(value) { this._overshootEasing = value; }

    p.getUseOvershootDeformationSlider = function() { return this._useOvershootDeformationSlider; }
    p.setUseOvershootDeformationSlider = function(value) { this._useOvershootDeformationSlider = value; }

    p.getIsOvershooting = function() { return this._isOvershooting; }

    p.getUseAutoScrollCancelable = function() { return this._useAutoScrollCancelable; }
    p.setUseAutoScrollCancelable = function(value) { this._useAutoScrollCancelable = value; }

    p.getIsAutoScrolling = function() { return this._isAutoScrolling; }

    p.getUseAutoScrollUsingRatio = function() { return this._useAutoScrollUsingRatio; }
    p.setUseAutoScrollUsingRatio = function(value) { this._useAutoScrollUsingRatio = value; }

    p.getAutoScrollAmount = function() { return this._autoScrollAmount; }
    p.setAutoScrollAmount = function(value) { this._autoScrollAmount = value; }

    p.getAutoScrollDirection = function() { return this._autoScrollDirection; }

    p.getIsMouseDown = function() { return this._isMouseDown; }

    p.dispose = function()
    {
        if(this._disposed) return;
        this._disposed = true;

        this.buttonEnabled = false;

        this.base = null;
        this.slider = null;

        if (this._stage)
        {
            this._stage.removeEventListener(pinetree.KeyboardEvent.KEYDOWN, this._onKeyDown, this);

            this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._moveSliderHandler, this);
            this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._baseButtonMouseUpHandler, this);
            this._stage.removeEventListener(pinetree.MouseEvent.MOUSE_UP , this._sliderButtonMouseUpHandler, this);
            this._stage.selectable = true;
            this._stage = null;
        }

        if (this._ticker)
        {
            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateAutoScroll, this);
            this._ticker.removeEventListener(pinetree.Event.ENTER_FRAME, this._updateScroll, this);
            this._ticker = null;
        }

        if(this._mouseWheelArea)
        {
            if(this._mouseWheelArea instanceof pinetree.Stage)
                this._mouseWheelArea.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._mouseWheelHandler, this);
            else if(this._mouseWheelArea instanceof pinetreecom.TriggerRect)
                this._mouseWheelArea.dispose();
            this._mouseWheelArea = null;
        }

        this.ON_MOUSE_UP && this.ON_MOUSE_UP.removeAll();
        this.ON_MOUSE_UP = null;

        this.ON_MOUSE_DOWN && this.ON_MOUSE_DOWN.removeAll();
        this.ON_MOUSE_DOWN = null;

        this._content = null;

        this._isScrolling = false;
        this._isDragging = false;
        this._isScrollingByDrag = false;
        this._isScrollingByUser = false;
        this._isOvershooting = false;
        this._isStartedScroll = false;
        this._isAutoScrolling = false;
        this._isBasePressed = false;
        this._isSliderPressed = false;
        this._terminateScrollFlag = false;
        this._prevProperty = NaN;
        this._isReady = false;
    }

    pinetreecom.ScrollerCore = ScrollerCore;
})();

/**
 * Created by pinetrees on 14-6-3.
 */
(function()
{
    var VScroller = function(w, h, contentHeight, maskHeight,
        onOverColor, onOutColor,
        onOverAlpha, onOutAlpha,
        baseColor, baseAlpha,
        baseTileTexture, clipContent,
        useMouseWheel, autoHideScroller, enableArrowKey)
    {
        pinetree.Sprite.call(this);

        this._bar = null;

        this._scrollMC = null;
        this._base = null;
        this._slider = null;
        this._content = null;

        this._clipContent = __defaultSet(clipContent, true);
        this._autoHideScroller = !!autoHideScroller;

        this._enabled = true;

        this._useMouseWheel = __defaultSet(useMouseWheel, true);

        this._enableArrowKey = !!enableArrowKey;

        this._keyEnabled = true;

        this._target = null;

        this._valueStore = NaN;
        this._value = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this._width = w;
        this._height = h;
        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onOverAlpha = onOverAlpha;
        this._onOutAlpha = onOutAlpha;
        this._baseColor = baseColor == undefined ? 0xffffff : baseColor;
        this._baseAlpha = baseAlpha == undefined ? 1.0 : baseAlpha;

        this._baseTileTexture = baseTileTexture && (baseTileTexture instanceof pinetree.Texture) ? baseTileTexture : null;

        this._contentHeight = contentHeight;
        this._maskWidth = 0;
        this._maskHeight = maskHeight;
        this._upperBound = 0;
        this._lowerBound = - (this._contentHeight - this._maskHeight);

        this._colorTweener = null;

        this._startMouseY = 0;

        this.ON_SCROLL_START = new pinetree.Signal();
        this.ON_SCROLL_END = new pinetree.Signal();
        this.ON_CHANGE = new pinetree.Signal();

        this.ON_SLIDER_MOUSE_DOWN = new pinetree.Signal();
        this.ON_SLIDER_MOUSE_UP = new pinetree.Signal();

        this._init();

        __defineGetterSetter(this, ["scrollBar", "enabled", "value", "scrollMC", "scrollerX", "scrollerY",
            "isShowingScroller", "scrollerHeight", "scrollAreaWidth", "mouseWheelArea", "target", "keyEnabled"
        ]);
    }

    var p = __extends(VScroller, pinetree.Sprite);

    p._init = function()
    {
        this._content = new pinetree.Sprite();
        this.addChild(this._content);

        this._scrollMC = new pinetree.Sprite();
        this.addChild(this._scrollMC);

        this._scrollMC.selectable = false;

        if(this._autoHideScroller)
        {
            this._scrollMC.alpha = 0;
        }
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._base = new pinetree.Sprite();
            this._scrollMC.addChild(this._base);

            if(this._baseTileTexture)
            {
                this._base.graphics.beginBitmapFill(this._baseTileTexture);
            }
            else
            {
                this._base.graphics.beginFill(this._baseColor, 1);
            }

            this._base.graphics.canvas.height = this._height;
            this._base.graphics.drawRect(0, 0, this._width, this._height);
            this._base.graphics.endFill();

            this._slider = new pinetree.Sprite();
            this._scrollMC.addChild(this._slider);
            this._slider.graphics.beginFill(this._onOutColor, 1);
            this._slider.graphics.drawRect(0, 0, this._width, this._height);
            this._slider.graphics.endFill();

            this.scrollAreaWidth = this._width;
            this._slider.alpha = this._onOutAlpha;

            this._slider.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverSlider, this);
            this._slider.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOutSlider, this);

            this._base.alpha = this._baseAlpha;

            this._bar = new pinetreecom.ScrollerCore(null, true, this._enableArrowKey);
            this._bar.ON_MOUSE_DOWN.add(this, this._onScrollerMouseDown);
            this._bar.ON_MOUSE_UP.add(this, this._onScrollerMouseUp);
            this._bar.stage = this.stage;
            this._bar.useOvershoot = false;
            this._bar.useMouseWheel = this._useMouseWheel;
            this._bar.useSmoothScroll = true;
            this._bar.keyEnabled = this._keyEnabled;

            this._bar.base = this._base;
            this._bar.slider = this._slider;

            this._bar.addEventListener("scroll_start", this._onScrollStart, this);
            this._bar.addEventListener("scroll_progress", this._onScrollProgress, this);
            this._bar.addEventListener("scroll_complete", this._onScrollComplete, this);

            this._bar.setup(this, 'value', this._contentHeight, this._maskHeight, this._upperBound, this._lowerBound);
            this._bar.useOvershoot = true;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setMouseWheelArea = function(value)
    {
        if(!value) return;

        if(this._bar)
        {
            this._bar.mouseWheelArea = value;
        }

        if(this._autoHideScroller && value instanceof pinetreecom.TriggerRect)
        {
            value.ON_ROLL_OVER.add(this, this._onOverRect);
            value.ON_ROLL_OUT.add(this, this._onOutRect);
        }
    }

    p._onOverRect = function()
    {
        TweenMax.to(this._scrollMC, this.tweenTime / 2, {alpha:1, ease:this.transition});
    }

    p._onOutRect = function()
    {
        TweenMax.to(this._scrollMC, this.tweenTime / 2, {alpha:0, ease:this.transition});
    }

    p._onOverSlider = function(evt)
    {
        TweenMax.to(this._slider, this.tweenTime / 2, {alpha:this._onOverAlpha,
            ease:this.transition});

        this._colorTweener && this._colorTweener.dispose();
        this._colorTweener = pinetreecom.ColorTweener.addTween(this._slider, this._onOutColor, this._onOverColor,
            this.tweenTime / 2, 0, null, this.transition);
    }

    p._onOutSlider = function(evt)
    {
        TweenMax.to(this._slider, this.tweenTime / 2, {alpha:this._onOutAlpha,
            ease:this.transition});

        this._colorTweener && this._colorTweener.dispose();
        this._colorTweener = pinetreecom.ColorTweener.addTween(this._slider, this._onOverColor, this._onOutColor,
            this.tweenTime / 2, 0, null, this.transition);
    }

    p._onScrollerMouseDown = function()
    {
        pinetree.enableGlobalSelect(false);
        this.ON_SLIDER_MOUSE_DOWN.dispatch();
    }

    p._onScrollerMouseUp = function()
    {
        pinetree.enableGlobalSelect(true);
        this.ON_SLIDER_MOUSE_UP.dispatch();
    }

    p._onScrollStart = function(evt)
    {
        this.ON_SCROLL_START.dispatch();
    }

    p._onScrollComplete = function(evt)
    {
        this.ON_SCROLL_END.dispatch();

        if(this._target)
        {
            this._target.y = Math.round(this._target.y);
        }
    }

    p._onScrollProgress = function(evt)
    {
        if(!this._enabled) return;

        if(this._valueStore == this._value) return;
        this._valueStore = this._value;

        var percent = -1 * this._value / (this._contentHeight - this._maskHeight);

        if(this._target && this._scrollMC.visible)
        {
            this._target.y = Math.round(percent * (this._maskHeight - this._contentHeight));
        }

        this.ON_CHANGE.dispatch(percent);
    }

    p.reset = function()
    {
        if(this._bar)
        {
            this._bar.reset();
            //pinetree.enableGlobalSelect(true);
        }
    }

    p.getScrollBar = function()
    {
        return this._bar;
    }

    p.setKeyEnabled = function (value)
    {
        this._keyEnabled = value;
        if(this._bar)
        {
            this._bar.keyEnabled = this._keyEnabled;
        }
    }

    p.getKeyEnabled = function ()
    {
        return this._keyEnabled;
    }

    p.setEnabled = function(value)
    {
        this._enabled = value;
    }

    p.getEnabled = function()
    {
        return this._enabled;
    }

    p.getValue = function()
    {
        return this._value;
    }

    p.setValue = function(number)
    {
        this._value = number;
    }

    p.getScrollMC = function()
    {
        return this._scrollMC;
    }

    p.getTarget = function()
    {
        return this._target;
    }

    p.setScrollerX = function(value)
    {
        this._scrollMC.x = value;
    }

    p.setScrollerY = function(value)
    {
        this._scrollMC.y = value;
    }

    p.getIsShowingScroller = function()
    {
        if(!this._bar) return false;
        return this._bar.maskSize < this._bar.contentSize;
    }

    p.addTarget = function(target, contentWidth, scrollerX, scrollerY)
    {
        if(!target) return;

        if(this._target)
        {
            this.removeTarget();
        }

        this._target = target;
        this._content.addChild(this._target);

        if(target.height <= this._maskHeight)
        {
            this._scrollMC.visible = false;
            return;
        }
        else
        {
            this._scrollMC.visible = true;
        }

        this._maskWidth = contentWidth;
        if(this._clipContent)
        {
            this._content.clip = new pinetree.Rectangle(0, 0, contentWidth, this._maskHeight);
        }

        this._scrollMC.x = scrollerX;
        this._scrollMC.y = scrollerY;
    }

    p.removeTarget = function()
    {
        if(this._target && this._content.contains(this._target))
        {
            this._content.removeChild(this._target);
        }

        this._target = null;
    }

    p.setSize = function(contentWidth, contentHeight, maskHeight, scrollerX, scrollerY)
    {
        this._contentHeight = contentHeight;
        this._maskWidth = contentWidth;
        this._maskHeight = maskHeight;

        this._lowerBound = - (this._contentHeight - this._maskHeight);

        this._bar.contentSize = this._contentHeight;
        this._bar.maskSize = this._maskHeight;
        this._bar.lowerBound = this._lowerBound;

        if(this._clipContent)
        {
            this._content.clip = new pinetree.Rectangle(0, 0, contentWidth, this._maskHeight);
        }

        this._scrollMC.x = scrollerX;
        this._scrollMC.y = scrollerY;

        if(contentHeight <= maskHeight)
        {
            if(this._target) this._target.y = 0;
            this._scrollMC.visible = false
        }
        else
        {
            this._scrollMC.visible = true;
        }

        this._onScrollProgress(null);

    }

    p.setScrollerHeight = function(value)
    {
        this._height = value;

        this._base.graphics.clear();
        this._base.graphics.canvas.height = this._height;
        if(this._baseTileTexture)
            this._base.graphics.beginBitmapFill(this._baseTileTexture);
        else
            this._base.graphics.beginFill(this._baseColor, 1);
        this._base.graphics.drawRect(0, 0, this._width, this._height);
        this._base.graphics.endFill();

        this.setSize(this._maskWidth, this._contentHeight, this._maskHeight, this._scrollMC.x, this._scrollMC.y);
    }

    p.setScrollAreaWidth = function(value)
    {
        this._slider.width = value;
        this._slider.x = - (value - this._width) >> 1;
    }

    p.tweenScrollerAlpha = function(alpha, time, delay, transition)
    {
        if(this._autoHideScroller) return;

        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = Linear.easeNone;
        TweenMax.to(this._scrollMC, time, {alpha:alpha, delay:delay, ease:transition});
    }

    p.dispose = function()
    {
        this._slider.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverSlider, this);
        this._slider.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOutSlider, this);

        if(this._bar)
        {
            this._bar.removeEventListener("scroll_start", this._onScrollStart, this);
            this._bar.removeEventListener("scroll_progress", this._onScrollProgress, this);
            this._bar.removeEventListener("scroll_complete", this._onScrollComplete, this);

            try
            {
                this._bar.dispose();
                this._bar = null;
            }
            catch(error)
            {
                //
            }
        }

        this._target = null;

        TweenMax.killTweensOf(this._scrollMC);
        TweenMax.killTweensOf(this._slider);

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        this.ON_SCROLL_START && this.ON_SCROLL_START.removeAll();
        this.ON_SCROLL_START = null;

        this.ON_SCROLL_END && this.ON_SCROLL_END.removeAll();
        this.ON_SCROLL_END = null;

        this.ON_SLIDER_MOUSE_DOWN && this.ON_SLIDER_MOUSE_DOWN.removeAll();
        this.ON_SLIDER_MOUSE_DOWN = null;

        this.ON_SLIDER_MOUSE_UP && this.ON_SLIDER_MOUSE_UP.removeAll();
        this.ON_SLIDER_MOUSE_UP = null;

        pinetree.enableGlobalSelect(true);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.VScroller = VScroller;
}());

/**
 * Created by pinetrees on 14-6-3.
 */
(function()
{
    var HScroller = function(w, h, contentWidth, maskWidth,
        onOverColor, onOutColor,
        onOverAlpha, onOutAlpha,
        baseColor, baseAlpha,
        baseTileTexture, clipContent,
        useMouseWheel, autoHideScroller, enableArrowKey)
    {
        pinetree.Sprite.call(this);

        this._bar = null;

        this._scrollMC = null;
        this._base = null;
        this._slider = null;
        this._content = null;

        this._clipContent = __defaultSet(clipContent, true);
        this._autoHideScroller = !!autoHideScroller;

        this._enabled = true;

        this._useMouseWheel = __defaultSet(useMouseWheel, true);

        this._enableArrowKey = !!enableArrowKey;

        this._keyEnabled = true;

        this._target = null;

        this._valueStore = NaN;
        this._value = 0;

        this._isStretch = false;
        this._unstretchHeight = 8;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this._width = w;
        this._height = h;
        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onOverAlpha = onOverAlpha;
        this._onOutAlpha = onOutAlpha;
        this._baseColor = baseColor == undefined ? 0xffffff : baseColor;
        this._baseAlpha = baseAlpha == undefined ? 1.0 : baseAlpha;

        this._baseTileTexture = baseTileTexture && (baseTileTexture instanceof pinetree.Texture) ? baseTileTexture : null;

        this._contentWidth = contentWidth;
        this._maskWidth = maskWidth;
        this._maskHeight = 0;
        this._upperBound = 0;
        this._lowerBound = - (this._contentWidth - this._maskWidth);

        this._tweenPercent = 0;

        this._colorTweener = null;

        this.ON_SCROLL_START = new pinetree.Signal();
        this.ON_SCROLL_END = new pinetree.Signal();
        this.ON_CHANGE = new pinetree.Signal();

        this.ON_SLIDER_MOUSE_DOWN = new pinetree.Signal();
        this.ON_SLIDER_MOUSE_UP = new pinetree.Signal();

        this._init();

        __defineGetterSetter(this, ["scrollBar", "enabled", "value", "scrollMC", "scrollerX", "scrollerY",
            "isShowingScroller", "scrollerWidth", "scrollAreaHeight", "mouseWheelArea", "target", "keyEnabled"
        ]);
    }

    var p = __extends(HScroller, pinetree.Sprite);

    p._init = function()
    {
        this._content = new pinetree.Sprite();
        this.addChild(this._content);

        this._scrollMC = new pinetree.Sprite();
        this.addChild(this._scrollMC);

        this._scrollMC.selectable = false;

        if(this._autoHideScroller)
        {
            this._scrollMC.alpha = 0;
        }
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._base = new pinetree.Sprite();
            this._scrollMC.addChild(this._base);

            if(this._baseTileTexture)
            {
                this._base.graphics.beginBitmapFill(this._baseTileTexture);
            }
            else
            {
                this._base.graphics.beginFill(this._baseColor, 1);
            }

            this._base.graphics.canvas.width = this._width;
            this._base.graphics.canvas.height = this._height;
            this._base.graphics.drawRect(0, 0, this._width, this._height);
            this._base.graphics.endFill();

            this._slider = new pinetree.Sprite();
            this._scrollMC.addChild(this._slider);
            this._slider.graphics.beginFill(this._onOutColor, 1);
            this._slider.graphics.drawRect(0, 0, this._width, this._height);
            this._slider.graphics.endFill();
            this._slider.setTransformOrigin("0%", "0%", "0");
            this._slider.scaleX = 0;

            this._slider.height = this._unstretchHeight;
            this._slider.alpha = this._onOutAlpha;

            this._slider.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverSlider, this);
            this._slider.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOutSlider, this);

            this._base.alpha = this._baseAlpha;

            this._bar = new pinetreecom.ScrollerCore(null, false, this._enableArrowKey);
            this._bar.ON_MOUSE_DOWN.add(this, this._onScrollerMouseDown);
            this._bar.ON_MOUSE_UP.add(this, this._onScrollerMouseUp);
            this._bar.stage = this.stage;
            this._bar.useOvershoot = false;
            this._bar.useMouseWheel = this._useMouseWheel;
            this._bar.useSmoothScroll = true;
            this._bar.keyEnabled = this._keyEnabled;

            this._bar.base = this._base;
            this._bar.slider = this._slider;

            this._bar.addEventListener("scroll_start", this._onScrollStart, this);
            this._bar.addEventListener("scroll_progress", this._onScrollProgress, this);
            this._bar.addEventListener("scroll_complete", this._onScrollComplete, this);

            this._bar.setup(this, 'value', this._contentWidth, this._maskWidth, this._upperBound, this._lowerBound);
            this._bar.useOvershoot = true;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setMouseWheelArea = function(value)
    {
        if(!value) return;

        if(this._bar)
        {
            this._bar.mouseWheelArea = value;
        }

        if(this._autoHideScroller && value instanceof pinetreecom.TriggerRect)
        {
            value.ON_ROLL_OVER.add(this, this._onOverRect);
            value.ON_ROLL_OUT.add(this, this._onOutRect);
        }
    }

    p._onOverRect = function()
    {
        TweenMax.to(this._scrollMC, this.tweenTime / 2, {alpha:1, ease:this.transition});
    }

    p._onOutRect = function()
    {
        TweenMax.to(this._scrollMC, this.tweenTime / 2, {alpha:0, ease:this.transition});
    }

    p._onOverSlider = function(evt)
    {
        TweenMax.to(this._slider, this.tweenTime / 2, {alpha:this._onOverAlpha,
            ease:this.transition});

        this._colorTweener && this._colorTweener.dispose();
        this._colorTweener = pinetreecom.ColorTweener.addTween(this._slider, this._onOutColor, this._onOverColor,
            this.tweenTime / 2, 0, null, this.transition);
    }

    p._onOutSlider = function(evt)
    {
        TweenMax.to(this._slider, this.tweenTime / 2, {alpha:this._onOutAlpha,
            ease:this.transition});

        this._colorTweener && this._colorTweener.dispose();
        this._colorTweener = pinetreecom.ColorTweener.addTween(this._slider, this._onOverColor, this._onOutColor,
            this.tweenTime / 2, 0, null, this.transition);
    }

    p._onScrollerMouseDown = function()
    {
        pinetree.enableGlobalSelect(false);
        this.ON_SLIDER_MOUSE_DOWN.dispatch();
    }

    p._onScrollerMouseUp = function()
    {
        pinetree.enableGlobalSelect(true);
        this.ON_SLIDER_MOUSE_UP.dispatch();
    }

    p._onScrollStart = function(evt)
    {
        this.ON_SCROLL_START.dispatch();
    }

    p._onScrollComplete = function(evt)
    {
        this.ON_SCROLL_END.dispatch();

        if(this._target)
        {
            this._target.x = Math.round(this._target.x);
        }
    }

    p._onScrollProgress = function(evt)
    {
        if(!this._enabled) return;

        if(this._valueStore == this._value) return;
        this._valueStore = this._value;

        var percent = -1 * this._value / (this._contentWidth - this._maskWidth);

        if(this._target && this._scrollMC.visible)
        {
            this._target.x = Math.round(percent * (this._maskWidth - this._contentWidth));
        }

        this.ON_CHANGE.dispatch(percent);
    }

    p.stretchIn = function()
    {
        if(this._isStretch) return;
        this._isStretch = true;

        TweenMax.to(this._slider, 0.5, {height:this._height, ease:Quart.easeOut});
    }

    p.stretchOut = function()
    {
        if(!this._isStretch) return;
        this._isStretch = false;

        TweenMax.to(this._slider, 0.5, {height:this._unstretchHeight, ease:Quart.easeOut});
    }

    p.reset = function()
    {
        TweenMax.killTweensOf(this._scrollMC);
        TweenMax.killTweensOf(this._slider);
        TweenMax.killTweensOf(this);

        if(this._bar)
        {
            this._bar.reset();
            //pinetree.enableGlobalSelect(true);
        }
    }

    p.getScrollBar = function()
    {
        return this._bar;
    }

    p.setKeyEnabled = function (value)
    {
        this._keyEnabled = value;
        if(this._bar)
        {
            this._bar.keyEnabled = this._keyEnabled;
        }
    }

    p.getKeyEnabled = function ()
    {
        return this._keyEnabled;
    }

    p.setEnabled = function(value)
    {
        this._enabled = value;
    }

    p.getEnabled = function()
    {
        return this._enabled;
    }

    p.getValue = function()
    {
        return this._value;
    }

    p.setValue = function(number)
    {
        this._value = number;
    }

    p.getScrollMC = function()
    {
        return this._scrollMC;
    }

    p.getTarget = function()
    {
        return this._target;
    }

    p.setScrollerX = function(value)
    {
        this._scrollMC.x = value;
    }

    p.setScrollerY = function(value)
    {
        this._scrollMC.y = value;
    }

    p.getIsShowingScroller = function()
    {
        if(!this._bar) return false;
        return this._bar.maskSize < this._bar.contentSize;
    }

    p.addTarget = function(target, contentHeight, scrollerX, scrollerY)
    {
        if(!target) return;

        if(this._target)
        {
            this.removeTarget();
        }

        this._target = target;
        this._content.addChild(this._target);

        if(target.width <= this._maskWidth)
        {
            this._scrollMC.visible = false;
            return;
        }
        else
        {
            this._scrollMC.visible = true;
        }

        this._maskHeight = contentHeight;
        if(this._clipContent)
        {
            this._content.clip = new pinetree.Rectangle(0, 0, this._maskWidth, contentHeight);
        }

        this._scrollMC.x = scrollerX;
        this._scrollMC.y = scrollerY;
    }

    p.removeTarget = function()
    {
        if(this._target && this._content.contains(this._target))
        {
            this._content.removeChild(this._target);
        }

        this._target = null;
    }

    p.setSize = function(contentWidth, contentHeight, maskWidth, scrollerX, scrollerY)
    {
        this._contentWidth = contentWidth;
        this._maskWidth = maskWidth;
        this._maskHeight = contentHeight;

        this._lowerBound = - (this._contentWidth - this._maskWidth);

        this._bar.contentSize = this._contentWidth;
        this._bar.maskSize = this._maskWidth;
        this._bar.lowerBound = this._lowerBound;

        if(this._clipContent)
        {
            this._content.clip = new pinetree.Rectangle(0, 0, this._maskWidth, this._maskHeight);
        }

        this._scrollMC.x = scrollerX;
        this._scrollMC.y = scrollerY;

        if(contentWidth <= maskWidth)
        {
            if(this._target) this._target.x = 0;
            this._scrollMC.visible = false
        }
        else
        {
            this._scrollMC.visible = true;
        }

        this._onScrollProgress(null);

    }

    p.setScrollerWidth = function(value)
    {
        this._width = value;

        this._base.graphics.clear();
        this._base.graphics.canvas.width = this._width;
        if(this._baseTileTexture)
            this._base.graphics.beginBitmapFill(this._baseTileTexture);
        else
            this._base.graphics.beginFill(this._baseColor, 1);
        this._base.graphics.drawRect(0, 0, this._width, this._height);
        this._base.graphics.endFill();

        this.setSize(this._contentWidth, this._maskHeight, this._maskWidth, this._scrollMC.x, this._scrollMC.y);
    }

    p.setScrollAreaHeight = function(value)
    {
        this._slider.height = value;
        this._slider.y = - (value - this.height) >> 1;
    }

    p.tweenScrollerAlpha = function(alpha, time, delay, transition)
    {
        if(this._autoHideScroller) return;

        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = Linear.easeNone;
        TweenMax.to(this._scrollMC, time, {alpha:alpha, delay:delay, ease:transition});
    }

    p.show = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = Cubic.easeInOut;
        TweenMax.to(this._slider, time, {scaleX:1, delay:delay, ease:transition, onComplete:callback});
    }

    p.hide = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = Cubic.easeInOut;
        TweenMax.to(this._slider, time, {scaleX:0, delay:delay, ease:transition, onComplete:callback});
    }

    p.dispose = function()
    {
        this._slider.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverSlider, this);
        this._slider.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOutSlider, this);

        if(this._bar)
        {
            this._bar.removeEventListener("scroll_start", this._onScrollStart, this);
            this._bar.removeEventListener("scroll_progress", this._onScrollProgress, this);
            this._bar.removeEventListener("scroll_complete", this._onScrollComplete, this);

            try
            {
                this._bar.dispose();
                this._bar = null;
            }
            catch(error)
            {
                //
            }
        }

        this._target = null;

        TweenMax.killTweensOf(this._scrollMC);
        TweenMax.killTweensOf(this._slider);
        TweenMax.killTweensOf(this);

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        this.ON_SCROLL_START && this.ON_SCROLL_START.removeAll();
        this.ON_SCROLL_START = null;

        this.ON_SCROLL_END && this.ON_SCROLL_END.removeAll();
        this.ON_SCROLL_END = null;

        this.ON_SLIDER_MOUSE_DOWN && this.ON_SLIDER_MOUSE_DOWN.removeAll();
        this.ON_SLIDER_MOUSE_DOWN = null;

        this.ON_SLIDER_MOUSE_UP && this.ON_SLIDER_MOUSE_UP.removeAll();
        this.ON_SLIDER_MOUSE_UP = null;

        pinetree.enableGlobalSelect(true);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.HScroller = HScroller;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-30.
 */
(function()
{
    var InputText = function(w, h, defaultText, gapX, gapY,
                             txtOffsetX, txtOffsetY, radiusTL, radiusTR, radiusBL, radiusBR)
    {
        pinetree.Sprite.call(this);

		this.defaultText = "";

		this.normalBorderColor = 0xcccccc;
		this.selectBorderColor = 0xffffff;
		
		this.normalBgColor = 0x000000;
		this.selectBgColor = 0x000000;
		
		this.normalTextColor = 0xcccccc;
		this.selectTextColor = 0xffffff;
		
		this.border = 0;
		this.borderOverAlpha = 0;
		this.borderOutAlpha = 0;
		this.bgOverAlpha = 0;
		this.bgOutAlpha = 0;
		
        this._gapX = gapX == undefined ? 2 : gapX;
        this._gapY = gapY == undefined ? 2 : gapY;
        this._txtOffsetX = txtOffsetX == undefined ? 0 : txtOffsetX;
        this._txtOffsetY = txtOffsetY == undefined ? 0 : txtOffsetY;
        this._radiusTL = radiusTL == undefined ? 0 : radiusTL;
        this._radiusTR = radiusTR == undefined ? 0 : radiusTR;
        this._radiusBL = radiusBL == undefined ? 0 : radiusBL;
        this._radiusBR = radiusBR == undefined ? 0 : radiusBR;

        this._txtWidth = w - 3 * this._gapX;
        this._txtHeight = h - 3 * this._gapY;

        this.defaultText = defaultText;

        this._txt = new pinetree.InputTextField();
        this._txt.fontSize = pinetree.parseFontSize(12);
        this._txt.lineHeight = "120%";
        this._txt.addEventListener(pinetree.FocusEvent.FOCUS_IN, this._focusIn, this);
        this._txt.addEventListener(pinetree.FocusEvent.FOCUS_OUT, this._focusOut, this);

        this._bg = new pinetree.Shape();
        this.addChild(this._bg);
        this._normalBG = new pinetree.Shape();
        this.addChild(this._normalBG);
        this._border = new pinetree.Shape();
        this.addChild(this._border);

        this.addChild(this._txt);

        this._txt.text = defaultText;
        this._txt.width = this._txtWidth - 2 * this._txtOffsetX;
        this._txt.height = this._txtHeight - 2 * this._txtOffsetY;
        this._txt.x = this._gapX + this._txtOffsetX;
        this._txt.y = this._gapY + this._txtOffsetY;

        this._borderTweener = null;
        this._bgTweener = null;

        this.tweenTime = 1.0;
        this.transition = Quart.easeOut;

        __defineGetterSetter(this, ["txt", "text", "wordWrap"]);
    }

    var p = __extends(InputText, pinetree.Sprite);

    p.init = function()
    {
        var w = this._txtWidth + 3 * this._gapX;
        var h = this._txtHeight + 3 * this._gapY;
        this._border.graphics.lineStyle(this.border, this.normalBorderColor, 1);
        this._border.graphics.drawRoundRect(0, 0, w, h, this._radiusTL, this._radiusTR, this._radiusBL, this._radiusBR);
        this._border.graphics.stroke();
        this._border.alpha = this.borderOutAlpha;

        this._bg.graphics.beginFill(this.normalBgColor, 1);
        this._bg.graphics.drawRoundRect(0, 0, w, h, this._radiusTL, this._radiusTR, this._radiusBL, this._radiusBR);
        this._bg.graphics.endFill();
        this._bg.alpha = this.bgOutAlpha;

        if (this._txt.text == '')
        {
            this._txt.text = this.defaultText;
        }
        this._txt.textColor = this.normalTextColor;
    }

    p.setWordWrap = function(value)
    {
        this._txt.wordWrap = value;
    }

    p._focusIn = function(evt)
    {
        this._txt.textColor = this.selectTextColor;

        if (this.defaultText == this._txt.text)
        {
            this._txt.text = '';
        }

        TweenMax.to(this._bg, this.tweenTime / 2, {alpha:this.bgOverAlpha, ease:Quart.easeOut});
        this._bgTweener && this._bgTweener.dispose();
        this._bgTweener = pinetreecom.ColorUtil.tweenColor(this._bg, this.normalBgColor, this.selectBgColor, this.tweenTime / 2);

        TweenMax.to(this._border, this.tweenTime / 2, {alpha:this.borderOverAlpha, ease:Quart.easeOut});
        this._borderTweener && this._borderTweener.dispose();
        this._borderTweener = pinetreecom.ColorUtil.tweenColor(this._border, this.normalBorderColor, this.selectBorderColor, this.tweenTime / 2);
    }

    p._focusOut = function(evt)
    {
        this._txt.textColor = this.normalTextColor;

        if (this._txt.text == '')
        {
            this._txt.text = this.defaultText;
        }

        TweenMax.to(this._bg, this.tweenTime / 2, {alpha:this.bgOutAlpha, ease:Quart.easeOut});
        this._bgTweener && this._bgTweener.dispose();
        this._bgTweener = pinetreecom.ColorUtil.tweenColor(this._bg, this.selectBgColor, this.normalBgColor, this.tweenTime / 2);

        TweenMax.to(this._border, this.tweenTime / 2, {alpha:this.borderOutAlpha, ease:Quart.easeOut});
        this._borderTweener && this._borderTweener.dispose();
        this._borderTweener = pinetreecom.ColorUtil.tweenColor(this._border, this.selectBorderColor, this.normalBorderColor, this.tweenTime / 2);
    }

    p.focus = function()
    {
        if(this._txt)
        {
            this._txt.focus();
        }
    }

    p.reset = function()
    {
        this._txt.text = this.defaultText;
    }

    p.getText = function()
    {
        if(!this._txt) return "";
        return this._txt.text || "";
    }

    p.getTxt = function()
    {
        return this._txt;
    }

    p.update = function()
    {
        this._focusOut(null);
    }

    p.dispose = function()
    {
        if(this._txt)
        {
            this._txt.removeEventListener(pinetree.FocusEvent.FOCUS_IN, this._focusIn, this);
            this._txt.removeEventListener(pinetree.FocusEvent.FOCUS_OUT, this._focusOut, this);
            this._txt = null;
        }

        this._borderTweener && this._borderTweener.dispose();
        this._borderTweener = null;
	}

    pinetreecom.InputText = InputText;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-7.
 */
(function()
{
    var FormMessageBox = function(w, h, bgColor, bgAlpha, textColor)
    {
        pinetree.Sprite.call(this);

        this._bg = null;
        this._txt = null;
        this._closeBtn = null;

        this._bgWidth = __defaultSet(w, 200);
        this._bgHeight = __defaultSet(h, 100);
        this._bgColor = __defaultSet(bgColor, pt.bgColor);
        this._bgAlpha = __defaultSet(bgAlpha, 1.0);
        this._textColor = __defaultSet(textColor, pt.textColor);

        this.ON_CLOSE = new pinetree.Signal();

        this.selectable = false;
    }

    var p = __extends(FormMessageBox, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._bg = new pinetree.Quad();
            this._bg.className += " contact_form_status_bg";
            this.addChild(this._bg);
            this._bg.alpha = this._bgAlpha;
            this._bg.width = this._bgWidth;
            this._bg.height = this._bgHeight;

            this._txt = new pinetree.TextField();
            this._txt.className += " contact_form_status_information";
            this.addChild(this._txt);
            this._txt.selectable = false;
            this._txt.width = this._bgWidth;

            /*this._closeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.bgColor);
            var texture = pinetree.isDevice ? pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CLOSE_ICON)
                    : pt.getCommonTexture(pinetreepages.EnumTextures.CLOSE_MINI_ICON);
            this._closeBtn.setTextures(texture);
            this.addChild(this._closeBtn);
            var offset = pinetree.isDevice ? 0 : 10;
            this._closeBtn.x = this._bgWidth - this._closeBtn.width - offset;
            this._closeBtn.y = offset;*/

            this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

            this.visible = false;

            this.useMouseHand = true;
            this.buttonMode = true;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.showMessage = function(msg)
    {
        this.visible = true;
        this._txt.text = msg;
        this._txt.y = (this._bgHeight - this._txt.height) >> 1;

        pinetreecom.DelayCaller.delayCall(this, this._onDelayClose, 5, null, true);
    }

    p._onDelayClose = function()
    {
        this._onClick(null);
    }

    p.getWidth = function()
    {
        return this._bgWidth;
    }

    p.getHeight = function()
    {
        return this._bgHeight;
    }

    p._onClick = function(evt)
    {
        this.visible = false;
        this.ON_CLOSE.dispatch();

        pinetreecom.DelayCaller.removeByOwner(this);
    }

    p.dispose = function()
    {
        this.ON_CLOSE && this.ON_CLOSE.removeAll();
        this.ON_CLOSE = null;

        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        pinetreecom.DelayCaller.removeByOwner(this);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.FormMessageBox = FormMessageBox;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-6-30.
 */
(function()
{
    var ContactForm = function(url, contentWidth, defaultTextColor)
    {
        pinetreecom.UIComponent.call(this);

        this._url = url || "data/php/contact.php";

        this._contentWidth = contentWidth || 200;

        this._textHeight = 35;

        this._defaultTextColor = __defaultSet(defaultTextColor, pt.bgColor);
        this._defaultFontSize = 14;

        this._gap = 6;

        this._nameTxt = null;
        this._emailTxt = null;
        //this._phoneTxt = null;
        this._msgTxt = null;

        this._errorTxt = null;

        this._setting = null;
        this._isActive = false;

        this._resetBtn = null;
        this._sendBtn = null;

        this._urlLoader = null;

        this._msgBox = null;
    }

    var p = __extends(ContactForm, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        pinetreecom.UIComponent.prototype.addedToStage.call(this);

        var w = this._contentWidth;
        var h = pinetree.isDevice ? this._textHeight : this._textHeight;
        var r = 0;
        this._nameTxt = new pinetreecom.InputText(w, h, "", 3, 3, 4, 4, r, r, r, r);
        this._emailTxt = new pinetreecom.InputText(w, h, "", 3, 3, 4, 4, r, r, r, r);
        //this._phoneTxt = new pinetreecom.InputText(this._contentWidth, h, "", 3, 3, 0, 0, 0, 0);

        h = pinetree.isDevice ? (this._textHeight + 10) * 3 : (this._textHeight + 10) * 2 + 10;
        this._msgTxt = new pinetreecom.InputText(this._contentWidth, h, "", 3, 3, 4, 4, r, r, r, r);

        this._errorTxt = new pinetree.TextField();
        this._errorTxt.className += " error_info_text";

        this.addChild(this._nameTxt);
        this.addChild(this._emailTxt);
        //this.addChild(this._phoneTxt);
        this.addChild(this._msgTxt);
        this.addChild(this._errorTxt);

        this._urlLoader = new pinetree.URLLoader();
        this._urlLoader.addEventListener(pinetree.Event.COMPLETE, this._onSendComplete, this);
        this._urlLoader.dataFormat = pinetree.URLLoaderDataFormat.VARIABLES;

        this._msgBox = new pinetreecom.FormMessageBox(220, 100, 0x232323, 0.8, 0xffffff);
        this._msgBox.ON_CLOSE.add(this, this._onCloseMsgBox);
        this.parent.addChild(this._msgBox);
    }

    p.initWith = function(setting)
    {
        this._setting = setting;

        this._isActive = !!this._setting.active;

        this._setTextFormat(this._nameTxt, false, this._setting.name);
        this._setTextFormat(this._emailTxt, false, this._setting.email);
        //this._setTextFormat(this._phoneTxt, false, this._setting.phone);
        this._setTextFormat(this._msgTxt, true, this._setting.message);

        this._nameTxt.x = 0;

        this._emailTxt.y = this._nameTxt.y + this._nameTxt.height + this._gap;

        //this._phoneTxt.y = this._emailTxt.y + this._emailTxt.height + this._gap;

        this._msgTxt.y = this._emailTxt.y + this._emailTxt.height + this._gap;

        this._resetBtn = new pinetreecom.TextButton(this._contentWidth, this._textHeight + 10,
            0, 0, 0, 0, pinetree.parseFontSize(14), false, null, false, 0,
            pt.fromColorString(this._setting.buttonTextOverColor), pt.fromColorString(this._setting.buttonTextOutColor),
            pt.fromColorString(this._setting.buttonBgOverColor), pt.fromColorString(this._setting.buttonBgOutColor),
            1, 1, 1, 1, pt.onOverColor, pt.onOutColor, 0, 0);
        this.addChild(this._resetBtn);
        this._resetBtn.addEventListener(pinetree.MouseEvent.CLICK, this._reset, this);

        this._resetBtn.visible = false;

        this._sendBtn = new pinetreecom.TextButton(this._contentWidth + 1, this._textHeight + 10,
            0, 0, 0, 0, pinetree.parseFontSize(14), false, null, false, 0,
            pt.fromColorString(this._setting.buttonTextOverColor), pt.fromColorString(this._setting.buttonTextOutColor),
            pt.fromColorString(this._setting.buttonBgOverColor), pt.fromColorString(this._setting.buttonBgOutColor),
            1, 1, 1, 1, pt.onOverColor, pt.onOutColor, 0, 0);
        this.addChild(this._sendBtn);
        this._sendBtn.addEventListener(pinetree.MouseEvent.CLICK, this._send, this);

        this._resetBtn.text = this._setting.clearButtonLabel || "CLEAR";
        this._sendBtn.text = this._setting.sendButtonLabel;

        this._sendBtn.x = 0;
        this._resetBtn.x = 0;

        this._resetBtn.y = this._sendBtn.y = this._msgTxt.y + this._msgTxt.height + this._gap;

        this._errorTxt.x = 0;
        this._errorTxt.y = - 25;
        this._errorTxt.textColor = pt.onOverColor;

        //this._phoneTxt.txt.restrict = "0123456789";
    }

    p._setTextFormat = function(txt, wordWrap, defaultText)
    {
        txt.wordWrap = wordWrap || false;
        txt.border = 1;
        txt.defaultText = defaultText;
        txt.fontSize = this._defaultFontSize;
        txt.normalBgColor = this._setting.normalBgColor == undefined ? 0x000000 :
            pt.fromColorString(this._setting.normalBgColor);
        txt.selectBgColor = this._setting.selectBgColor == undefined ? pt.onOverColor :
            pt.fromColorString(this._setting.selectBgColor);
        txt.bgOverAlpha = __defaultSet(this._setting.bgOverAlpha, 1);
        txt.bgOutAlpha = __defaultSet(this._setting.bgOutAlpha, 0.1);
        txt.normalBorderColor = this._setting.normalBorderColor == undefined ? this._defaultTextColor :
            pt.fromColorString(this._setting.normalBorderColor);
        txt.selectBorderColor = this._setting.selectBorderColor == undefined ? pt.bgColor :
            pt.fromColorString(this._setting.selectBorderColor);
        txt.normalTextColor = this._setting.normalTextColor == undefined ? this._defaultTextColor :
            pt.fromColorString(this._setting.normalTextColor);
        txt.selectTextColor = this._setting.selectTextColor == undefined ? pt.bgColor :
            pt.fromColorString(this._setting.selectTextColor);
        txt.borderOverAlpha = __defaultSet(this._setting.borderOverAlpha, 1);
        txt.borderOutAlpha = __defaultSet(this._setting.borderOutAlpha, 1);
        txt.init();
    }

    p._reset = function()
    {
        this._nameTxt && this._nameTxt.reset();
        this._emailTxt && this._emailTxt.reset();
        //this._phoneTxt && this._phoneTxt.reset();
        this._msgTxt && this._msgTxt.reset();

        this._errorTxt && (this._errorTxt.text = "");
        pinetreecom.DelayCaller.removeByHandler(this, this._onDelayClearErrorText);
    }

    p._send = function()
    {
        var nameIsEmpty = pinetreecom.StringUtil.trimAll(this._nameTxt.text) == "" ||
            this._nameTxt.text == this._nameTxt.defaultText;
        var messageIsEmpty = pinetreecom.StringUtil.trimAll(this._msgTxt.text) == "" ||
            this._msgTxt.text == this._msgTxt.defaultText;
        var isValidEmail = pinetreecom.StringUtil.isValidEmail(this._emailTxt.text);

        pinetreecom.DelayCaller.removeByHandler(this, this._onDelayClearErrorText);

        if (nameIsEmpty)
        {
            this._errorTxt.text = this._setting.nameIsEmpty;
            this._nameTxt.focus();
            pinetreecom.DelayCaller.delayCall(this, this._onDelayClearErrorText, 3);
            return;
        }
        if (!isValidEmail)
        {
            this._errorTxt.text = this._setting.invalidEmail;
            this._emailTxt.focus();
            pinetreecom.DelayCaller.delayCall(this, this._onDelayClearErrorText, 3);
            return;
        }
        if (messageIsEmpty)
        {
            this._errorTxt.text = this._setting.messageIsEmpty;
            this._msgTxt.focus();
            pinetreecom.DelayCaller.delayCall(this, this._onDelayClearErrorText, 3);
            return;
        }

        if(this._isActive)
            this._startSend();
        else
            this._showMessage(this._setting.status.success)

        this._errorTxt.text = "";

        this.mouseEnabled = this.mouseChildren = false;
    }

    p._onDelayClearErrorText = function()
    {
        this._errorTxt.text = "";
    }

    p._startSend = function()
    {
        var sendData = new pinetree.URLVariables();
        sendData.from_email = this._emailTxt.text;
        //sendData.phone = this._phoneTxt.text;
        sendData.subject = this._nameTxt.text;
        sendData.message = this._msgTxt.text;

        var req = new pinetree.URLRequest();
        req.url = this._url;
        req.data = sendData;
        this._urlLoader.load(req);

        this._showMessage(this._setting.status.sending)
    }

    p._onSendComplete = function(evt)
    {
        var data = this._urlLoader.data;
        if(data == "1")
        {
            this._showMessage(this._setting.status.success)
        }
        else
        {
            this._showMessage(this._setting.status.error)
        }
    }

    p.updateMsgBoxPosition = function(x, y)
    {
        if(!this._msgBox) return;

        this._msgBox.x = x;
        this._msgBox.y = y;
    }

    p._showMessage = function(msg)
    {
        this._msgBox.showMessage(msg);
    }

    p._onCloseMsgBox = function()
    {
        this.mouseEnabled = this.mouseChildren = true;
    }

    p.getWidth = function()
    {
        return this._contentWidth;
    }

    p.getHeight = function()
    {
        return this._sendBtn.y + this._sendBtn.height;
    }

    p.dispose = function()
    {
        if(this._resetBtn)
        {
            this._resetBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._reset, this);
            this._resetBtn.dispose();
            this._resetBtn = null;
        }

        if(this._sendBtn)
        {
            this._sendBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._send, this);
            this._sendBtn.dispose();
            this._sendBtn = null;
        }

        this._nameTxt && this._nameTxt.dispose();
        this._emailTxt && this._emailTxt.dispose();
        //this._phoneTxt && this._phoneTxt.dispose();
        this._msgTxt && this._msgTxt.dispose();

        this._nameTxt = null;
        this._emailTxt = null;
        //this._phoneTxt = null;
        this._msgTxt = null;

        if(this._msgBox)
        {
            this._msgBox.removeFromParent(true);
            this._msgBox = null;
        }

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.ContactForm = ContactForm;
}());

/**
 * Created by pinetrees on 2014-6-3.
 */
(function()
{
    /**
     * @author foreverpinetree@gmail.com <br />
     * ------------------- <br />
     * sample: <br />
     * <code>
     * var txtContainer = new TextContainer(300, 100, 0x000000, 0.2, true, true, true);
     * txtContainer.padding = 20;
     * txtContainer.init();
     * this.addChild(txtContainer);
     * txtContainer.title = "my title";
     * txtContainer.information = "my information";
     * txtContainer.show(1.0, 0);//tweenTime, tweenDelay
     * </code>
     */
	var TextContainer = function(w, h, bgColor, bgAlpha, useScroll, useHtmlText, hasTitle)
	{
        pinetree.Sprite.call(this);

        this._width = w;
        this._height = h;

        this._originWidth = w;
        this._originHeight = h;

        this._bgColor = bgColor == undefined ? 0xffffff : bgColor;
        this._bgAlpha = bgAlpha == undefined ? 1.0 : bgAlpha;

        if(pinetree.isDevice) useScroll = false;

        this._useScroll = useScroll == undefined ? true : useScroll;
        this._useHtmlText = useHtmlText == undefined ? true : useHtmlText;

		this._ui = null;

		this._scroll = null;
		this._infoTxt = null;

        this._hasTitle = __defaultSet(hasTitle, true);

		this._scrollerX = 0;
		this._scrollerY = 0;
		this._scrollerHeight = 150;

		this._info = "";
		this._title = "";

        this._textContainer = null;
        this._titleTxt = null;
        this._bg = null;

        this._enabled = true;

		this._triggerRect = null;

		this.autoHideScroller = pt.autoHideScrollbar;

		this.sliderWidth = 10;
		this.sliderOverColor = pt.onOverColor;
		this.sliderOutColor = pt.onOverColor;
		this.sliderOverAlpha = 1.0;
		this.sliderOutAlpha = 0.8;
		this.sliderBGColor = 0x666666;
		this.sliderBGAlpha = 0.3;

		this.paddingLeft = 20;
		this.paddingRight = 20;
		this.paddingTop = 20;
		this.paddingBottom = 20;
		this.gapBetweenTitleAndInfo = 10;

        this.useMouseWheel = true;

        this.titleTextColor = null;
        this.infoTextColor = null;

		this.index = 0;

		this.originX = 0;
		this.originY = 0;

		this.tweenTime = 1.0;

        __defineGetterSetter(this, ["information", "title", "padding", "contentWidth", "contentHeight", "scrollGapX",
            "scrollX", "scrollY", "scrollerHeight", "scrollAreaWidth", "useScroll", "titleHeight", "infoScrollHeight",
            "enabled"
        ]);
	}

    var p = __extends(TextContainer, pinetree.Sprite);

    p.init = function()
    {
        this._ui = new pinetree.Sprite();
        this.addChild(this._ui);

        this._textContainer = new pinetree.Sprite();
        this._ui.addChild(this._textContainer);

        this._infoTxt = new pinetree.TextField();
        this._infoTxt.className += " textcontainer_content";
        this._textContainer.addChild(this._infoTxt);

        if(this._hasTitle)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " textcontainer_title";
            this._textContainer.addChild(this._titleTxt);
            this._titleTxt.selectable = false;
        }

        this._bg = new pinetree.Quad();
        this._bg.color = this._bgColor;
        this._bg.alpha = this._bgAlpha;
        this._bg.width = this._width;
        this._bg.height = this._height;
        this.addChildAt(this._bg, 0);

        this._textContainer.x = this.paddingLeft;
        this._textContainer.y = this.paddingTop;

        this._triggerRect = new pinetreecom.TriggerRect(this._width + 20, this._height + 20, 0x00ff00, 0);
        this._triggerRect.ON_ROLL_OVER.add(this, this._onOverRect);
        this._triggerRect.ON_ROLL_OUT.add(this, this._onOutRect);
        this._triggerRect.x = -10;
        this._triggerRect.y = -10;
        this.addChildAt(this._triggerRect, 0);

        if(this._useScroll)
        {
            //var img = pt.getCommonTexture(pinetreepages.EnumTextures.SCROLLER_BASE_TILE);
            this._scroll = new pinetreecom.VScroller(this.sliderWidth, 100, 1, 1, this.sliderOverColor, this.sliderOutColor,
                this.sliderOverAlpha, this.sliderOutAlpha, this.sliderBGColor, this.sliderBGAlpha, null, true, true, pt.autoHideScrollbar);
            this._textContainer.addChild(this._scroll);
            this._scroll.mouseWheelArea = this._triggerRect;

            this._scroll.scrollMC.visible = false;
        }
    }

    p.getEnabled = function() { return this._enabled; }
    p.setEnabled = function(value)
    {
        this._enabled = value;
    }

    p._onOverRect = function()
    {
        if(!this._useScroll || !this._enabled) return;
        pt.isOverTextContainer = true;
    }

    p._onOutRect = function()
    {
        if(!this._useScroll || !this._enabled) return;
        pt.isOverTextContainer = false;
    }

    p.setTitle = function(value)
    {
        if(!this._hasTitle) return;

        this._title = value;

        this._titleTxt.width = this._width - this.paddingLeft - this.paddingRight;

        if(this._useHtmlText)
            this._titleTxt.htmlText = value;
        else
            this._titleTxt.text = value;

        this._titleTxt.visible = true;
    }

    p.setVisible = function(value)
    {
        // this._htmlElement.style.visibility = value ? "visible" : "hidden";
        this._htmlElement.style.display = value ? "block" : "none";
    }

    p.setInformation = function(value)
    {
        var titleHeight = this.getTitleHeight();
        var titleGap = this.getGapBetweenTitleAndInfo();

        //this._height = this._originHeight;

        if(this._info == value)
        {
            if(this._useScroll && this._scroll && this._scroll.target)
            {
                this._infoTxt.width = this._width - this.paddingLeft - this.paddingRight;
                this._infoTxt.height = 1;
                if(this._useHtmlText)
                    this._infoTxt.htmlText = value;
                else
                    this._infoTxt.text = value;

                this._scroll.setSize(this._width - this.paddingLeft - this.paddingRight, this._infoTxt.height,
                    this._height - titleHeight - titleGap - this.paddingTop - this.paddingBottom,
                    this._scrollerX || this._width - this.paddingLeft - this.paddingRight,
                    this._scrollerY || 0);
                var contentHeight = this.getInfoScrollHeight();
                var scrollerHeight = this._scrollerHeight || contentHeight;
                if(scrollerHeight > contentHeight) scrollerHeight = contentHeight;
                this._scroll.scrollerHeight = scrollerHeight;

                this._infoTxt.height = this._infoTxt.htmlElement.scrollHeight;

                this._triggerRect.height = this._height;
                this._bg.height = this._height;
                return;
            }
        }

        this._info = value;

        if(this._useScroll && this._scroll)
        {
            this._infoTxt.width = this._width - this.paddingLeft - this.paddingRight;

            if(this._useHtmlText)
                this._infoTxt.htmlText = value;
            else
                this._infoTxt.text = value;

            if(this._hasTitle)
            {
                this._titleTxt.height = 10;
                this.setTitle(this._title);
            }

            this._scroll.visible = true;
            this._scroll.scrollBar.useMouseWheel = this.useMouseWheel;
            this._scroll.y = titleHeight + titleGap;
            this._scroll.removeTarget();
            this._scroll.addTarget(this._infoTxt, 0, 0, 0);
            this._scroll.setSize(this._width - this.paddingLeft - this.paddingRight, this._infoTxt.height,
                this._height - titleHeight - titleGap - this.paddingTop - this.paddingBottom,
                this._scrollerX || this._width - this.paddingLeft - this.paddingRight,
                this._scrollerY || 0);
            this._scroll.scrollerHeight = this._scrollerHeight || this._height - titleHeight
                - titleGap - this.paddingTop - this.paddingBottom;
            this._scroll.reset();
            this._infoTxt.y = 0;

            this._bg.height = this._height;
        }
        else
        {
            if(this._scroll)
            {
                this._scroll.visible = false;
                this._scroll.removeTarget();
            }

            this._textContainer.addChild(this._infoTxt);

            this._infoTxt.width = this._width - this.paddingLeft - this.paddingRight;
            this._infoTxt.height = 1;

            if(this._useHtmlText)
                this._infoTxt.htmlText = value;
            else
                this._infoTxt.text = value;

            this._infoTxt.y = titleHeight + titleGap;

            this._bg.height = Math.floor(this._infoTxt.height + this._infoTxt.y + this.paddingTop + this.paddingBottom);
            this._height = this._bg.height;
        }

        this._bg.visible = true;

        this._triggerRect.height = this._height;
    }

    p.setUseScroll = function(value)
    {
        if(this._useScroll == value) return;

        this._useScroll = value;
        this.information = this._info;
    }

    p.getInformation = function()
    {
        return this._info;
    }

    p.getTitle = function()
    {
        return this._title;
    }

    p.setPadding = function(value)
    {
        this.paddingLeft = this.paddingRight = this.paddingTop = this.paddingBottom = value;
    }

    p.getInfoScrollHeight = function()
    {
        var titleHeight = this.getTitleHeight();
        var titleGap = this.getGapBetweenTitleAndInfo();
        return this._height - titleHeight - titleGap - this.paddingTop - this.paddingBottom;
    }

    p.getRealHeight = function()
    {
        return this.getTitleHeight() + this.getGapBetweenTitleAndInfo() + this._infoTxt.height;
    }

    p.getTitleHeight = function()
    {
        return this._hasTitle ? this._titleTxt.height : 0;
    }

    p.getGapBetweenTitleAndInfo = function()
    {
        return this._hasTitle ? this.gapBetweenTitleAndInfo : 0;
    }

    p.getContentWidth = function() { return this._width; };
    p.setContentWidth = function(w)
    {
        if(this._width == w) return;

        this._width = w;
        this._bg.width = this._width;
        this.title = this._title;
        this.information = this._info;

        if(this._triggerRect)
            this._triggerRect.width = this._width + 20;
    }

    p.getContentHeight = function() { return this._height; };
    p.setContentHeight = function(h)
    {
        if(this._height == h) return;

        this._height = h;
        this._bg.height = this._height;
        this.information = this._info;
    }

    /**
     * useful<br/>
     * the gap bettwen the right side of scroller and the right side of bg.
     */
    p.setScrollGapX = function(value)
    {
        this.scrollX = this._width - this._textContainer.x - this.sliderWidth - value;
    }

    p.setScrollX = function(value)
    {
        if(!this._useScroll) return;

        this._scrollerX = value;
        this._scroll.setScrollerX(value);
    }

    p.setScrollY = function(value)
    {
        if(!this._useScroll) return;

        this._scrollerY = value;
        this._scroll.setScrollerY(value);
    }

    p.setScrollerHeight = function(value)
    {
        if(!this._useScroll) return;

        this._scrollerHeight = value;
        this._scroll.scrollerHeight = value;
    }

    p.setScrollAreaWidth = function(value)
    {
        if(!this._useScroll) return;

        this._scroll.scrollAreaWidth = value;
    }

    p.show = function(time, delay, transition, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = Quad.easeOut;

        this._triggerRect.isEnabled = true;

        if (this._textContainer.visible) return;

        if(time == 0 && delay == 0)
        {
            this._textContainer.alpha = 1;
            this._textContainer.visible = true;
            callback && callback();
            return;
        }

        this._textContainer.alpha = 0;
        this._textContainer.visible = true;
        TweenMax.to(this._textContainer, time, { alpha:1, delay:delay, onComplete:callback, ease:transition } );
    }

    p.hide = function(time, delay, transition, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;

        this._triggerRect.isEnabled = false;
        pt.isOverTextContainer = false;

        if(time == 0 && delay == 0)
        {
            this._textContainer.alpha = 0;
            this._textContainer.visible = false;
            callback && callback();
            return;
        }

        TweenMax.to(this._textContainer, time, { alpha: 0, delay:delay,
            onComplete:this._hideComplete,
            onCompleteParams:[this, callback], ease:this.transition } );
    }

    p._hideComplete = function(owner, callback)
    {
        owner._textContainer.visible = false;
        callback && callback();
    }

    p.reset = function()
    {
        this._info = "";
        this._title = "";
        this._infoTxt.htmlText = "";
        this._infoTxt.height = 1;
        this._width = this._originWidth;
        if(this._triggerRect)
            this._triggerRect.width = this._width + 20;
        this._height = this._originHeight;
        this._scroll && this._scroll.reset();

        pt.isOverTextContainer = false;
    }

    p.dispose = function()
    {
        this._scroll && this._scroll.dispose();
        this._scroll = null;

        pt.isOverTextContainer = false;

        this._triggerRect && this._triggerRect.removeFromParent();
        this._triggerRect && this._triggerRect.dispose();
        this._triggerRect = null;

        TweenMax.killTweensOf(this._textContainer);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.TextContainer = TextContainer;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-11.
 */
(function()
{
    var ExImage = function()
    {
        pinetree.InteractiveObject.call(this);

        this._disposed = false;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        this._img = new Image();
        this._img.style.position = "absolute";
        this._img.owner = this;
        this._img.onload = this.onLoadImgComplete;
        this._img.onerror = this.onLoadImgError;
        this._htmlElement.appendChild(this._img);

        this._bitmapData = null;

        this._isLoaded = false;

        __defineGetterSetter(this, ["originWidth", "originHeight", "isLoaded", "bitmapData"]);
    }

    var p = __extends(ExImage, pinetree.InteractiveObject);

    p.load = function(url)
    {
        if(this._disposed) return;

        this._isLoaded = false;

        if(url instanceof pinetree.URLRequest)
            this._img.src = url.url;
        else
            this._img.src = url;
    }

    p.onLoadImgComplete = function(evt)
    {
        var owner = this.owner;
        if(owner._disposed) return;

        owner.dispatchWith(pinetree.Event.COMPLETE);
        owner.ON_LOAD_COMPLETE && owner.ON_LOAD_COMPLETE.dispatch(owner);

        owner._isLoaded = true;
    }

    p.onLoadImgError = function(evt)
    {
        var owner = this.owner;
        if(owner._disposed) return;

        owner.dispatchWith(pinetree.Event.IO_ERROR);
        owner.ON_IO_ERROR && owner.ON_IO_ERROR.dispatch(owner);
    }

    p.getIsLoaded = function()
    {
        return this._isLoaded;
    }

    p.setWidth = function(value)
    {
        this._img.style.width = value + "px";
        pinetree.InteractiveObject.prototype.setWidth.call(this, value);
    }

    p.setHeight = function(value)
    {
        this._img.style.height = value + "px";
        pinetree.InteractiveObject.prototype.setHeight.call(this, value);
    }

    p.getOriginWidth = function()
    {
        return this._img.naturalWidth;
    }

    p.getOriginHeight = function()
    {
        return this._img.naturalHeight;
    }

    p.getImageElement = function()
    {
        return this._img;
    }

    /**
     * this method will eat up much of cpu while be called the first time, pls use it carefully.
     * @returns BitmapData
     */
    p.getBitmapData = function()
    {
        if(this._disposed) return null;

        if(!this._img)
            return null;

        if(this._bitmapData)
            return this._bitmapData;

        this._bitmapData = new pinetree.BitmapData(this.getOriginWidth(), this.getOriginHeight());
        this._bitmapData.draw(this._img);

        return this._bitmapData;
    }

    p.dispose = function()
    {
        if(this._disposed) return;

        if(this._img)
        {
            this._img.owner = null;
            this._img.onload = null;
            this._img.onerror = null;
            if(this._img.parentNode == this._htmlElement)
            {
                this._htmlElement.removeChild(this._img);
            }
            this._img = null;
        }

        if(this._bitmapData)
        {
            this._bitmapData.dispose();
            this._bitmapData = null;
        }

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_IO_ERROR = null;

        this._disposed = true;

        pinetree.InteractiveObject.prototype.dispose.call(this);
    }

    pinetreecom.ExImage = ExImage;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-1.
 */
(function()
{
    var CircleImage = function(radius, annulusWidth, borderWidth, borderColor, borderAlpha, bgFillColor, bgFillAlpha,
                               needLoading, loadingClass)
    {
        pinetree.Sprite.call(this);

        this._disposed = false;

        this._radius = radius;
        this._annulusWidth = __defaultSet(annulusWidth, 1.0);
        this._borderWidth = __defaultSet(borderWidth, 1.0);
        this._borderColor = __defaultSet(borderColor, 0xffffff);
        this._borderAlpha = __defaultSet(borderAlpha, 0);
        this._bgFillColor = __defaultSet(bgFillColor, 0xffffff);
        this._bgFillAlpha = __defaultSet(bgFillAlpha, 0);
        this._needLoading = !!needLoading;
        this._loadingClass = loadingClass || null;

        this.loading = null;

        this.tweenTime = 1.0;
        this.transition = Linear.easeNone;

        this._loader = new pinetreecom.ExImage();
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);

        this._htmlElement = document.createElement("div");
        this._htmlElement.style.position = "absolute";

        this._bg = new pinetree.CanvasCircle(radius + annulusWidth + borderWidth, true);
        this.addChild(this._bg);
        this._bg.color = this._bgFillColor;
        this._bg.alpha = this._bgFillAlpha;
        this._bg.x = this._bg.radius;
        this._bg.y = this._bg.radius;

        this._canvasBorder = document.createElement("canvas");
        this._canvasBorder.width = (this._radius + this._annulusWidth + this._borderWidth) * 2;
        this._canvasBorder.height = (this._radius + this._annulusWidth + this._borderWidth) * 2;
        this._canvasBorder.style.position = "absolute";
        this._htmlElement.appendChild(this._canvasBorder);
        this._graphicsBorder = new pinetree.Graphics(this._canvasBorder);

        this._isLoaded = false;

        this._canvas = document.createElement("canvas");
        this._canvas.width = (this._radius + this._annulusWidth + this._borderWidth) * 2;
        this._canvas.height = (this._radius + this._annulusWidth + this._borderWidth) * 2;
        this._canvas.style.position = "absolute";
        this._htmlElement.appendChild(this._canvas);
        this._graphics = new pinetree.Graphics(this._canvas);

        this._canvas.style.opacity = 0;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        __defineGetterSetter(this, ["isLoaded", "bg"]);
    }

    var p = __extends(CircleImage, pinetree.Sprite);

    p.load = function(url)
    {
        this._loader.load(url);

        if(this._needLoading)
        {
            var c = this._loadingClass ? this._loadingClass : pinetreecom.CommonLoading;
            this.loading = new c();
            this.loading.x = this._radius + this._annulusWidth + this._borderWidth;
            this.loading.y = this._radius + this._annulusWidth + this._borderWidth;
            this.addChild(this.loading);
            this.loading.show();
        }
    }

    p.onLoadComplete = function(evt)
    {
        if(this._disposed) return;

        if(this.loading)
        {
            this.loading.dispose();
            this.loading.removeFromParent();
            this.loading = null;
        }

        var loader = evt.customTarget;
        var imgElement = loader.getImageElement();
        if(imgElement)
        {
            var w = this._radius * 2;
            var h = this._radius * 2;

            var ow = imgElement.naturalWidth;
            var oh = imgElement.naturalHeight;

            var scale = Math.max(w / ow, h / oh);
            var newWidth = Math.ceil(ow * scale);
            var newHeight = Math.ceil(oh * scale);

            var newX = (w - newWidth) >> 1;
            var newY = (h - newHeight) >> 1;

            this._graphics.beginFill(0xff0000, 1);
            this._graphics.drawCircle(this._radius + this._annulusWidth + this._borderWidth, this._radius + this._annulusWidth + this._borderWidth, this._radius);
            this._graphics.endFill();
            this._graphics.context.globalCompositeOperation = 'source-in';
            this._graphics.context.drawImage(imgElement, newX + this._annulusWidth + this._borderWidth, newY + this._annulusWidth + this._borderWidth, newWidth, newHeight);

            this._graphicsBorder.lineStyle(this._borderWidth, this._borderColor, this._borderAlpha);
            this._graphicsBorder.beginFill(this._borderColor, 0);
            this._graphicsBorder.drawCircle(this._radius + this._annulusWidth + this._borderWidth,
                this._radius + this._annulusWidth + this._borderWidth, this._radius + this._annulusWidth);
            this._graphicsBorder.endFill();
            this._graphicsBorder.stroke();
        }

        this._isLoaded = true;

        TweenMax.to(this._canvas.style, this.tweenTime / 2, {opacity:1, ease:this.transition});

        this.dispatchWith(pinetree.Event.COMPLETE);
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.dispatch(this);
    }

    p.onIOError = function(evt)
    {
        trace("Warning: IOError at CircleImage::onIOError()");

        if(this._disposed) return;

        if(this.loading)
        {
            this.loading.dispose();
            this.loading.removeFromParent();
            this.loading = null;
        }

        this.dispatchWith(pinetree.Event.IO_ERROR);
        this.ON_IO_ERROR && this.ON_IO_ERROR.dispatch(this);
    }

    p.getBg = function()
    {
        return this._bg;
    }

    p.getIsLoaded = function()
    {
        return this._isLoaded;
    }

    p.dispose = function()
    {
        if(this._disposed) return;
        this._disposed = true;

        TweenMax.killTweensOf(this._canvas.style);

        if(this.loading)
        {
            this.loading.dispose();
            this.loading.removeFromParent();
            this.loading = null;
        }

        if(this._bg)
        {
            TweenMax.killTweensOf(this._bg);
            this._bg.dispose();
            this._bg = null;
        }

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_IO_ERROR = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.CircleImage = CircleImage;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-10.
 */
(function()
{
    var FullScreenImage = function(offsetWidth, offsetHeight)
    {
        pinetreecom.ExImage.call(this);

        this._offsetWidth = offsetWidth || 0;
        this._offsetHeight = offsetHeight || 0;

        this.overflow = "hidden";
    }

    var p = __extends(FullScreenImage, pinetreecom.ExImage);

    p.addedToStage = function()
    {
        this.stage.addEventListener(pinetree.Event.RESIZE, this.onResize, this);
        this.onResize(null);
    }

    p.removedFromStage = function()
    {
        this.stage.removeEventListener(pinetree.Event.RESIZE, this.onResize, this);
        pinetreecom.ExImage.prototype.removedFromStage.call(this);
    }

    p.onLoadImgComplete = function(evt)
    {
        pinetreecom.ExImage.prototype.onLoadImgComplete.call(this, evt);
        this.onResize(null);
    }

    p.onResize = function(evt)
    {
        if(!this.isLoaded || !this.stage) return;

        var rectWidth = this.stage.stageWidth - this._offsetWidth;
        var rectHeight = this.stage.stageHeight - this._offsetHeight;
        var scale = Math.min(this.originWidth / rectWidth, this.originHeight / rectHeight);
        var newWidth = this.originWidth / scale;
        var newHeight = this.originHeight / scale;
        this.width = newWidth;
        this.height = newHeight;
    }

    p.dispose = function()
    {
        pinetree.stage.removeEventListener(pinetree.Event.RESIZE, this._onResize, this);
        pinetreecom.ExImage.prototype.dispose.call(this);
    }

    pinetreecom.FullScreenImage = FullScreenImage;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-31.
 */
(function()
{
    var FullRectImage = function(w, h, align)
    {
        pinetree.Sprite.call(this);

        this._width = w;
        this._height = h;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._loader = null;
        this._loaderWidth = 0;
        this._loaderHeight = 0;

        this._tweenScale = 0;
        this.percent = 0;

        this._align = align || pinetreecom.FullRectImage.ALIGN_LEFTTOP;

        this._normalLoader = new pinetreecom.ExImage();
        this._normalLoader.addEventListener(pinetree.Event.COMPLETE, this.onLoadImgComplete, this);
        this._normalLoader.addEventListener(pinetree.Event.IO_ERROR, this.onLoadImgError, this);
        this._container.addChild(this._normalLoader);

        this._landscapeLoader = null;

        this._loadIndex = 0;
        this._loadCount = 1;

        this.index = 0;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        this.alpha = 0;

        __defineGetterSetter(this, ["imageWidth", "imageHeight", "isLoaded"]);
    }

    FullRectImage.ALIGN_LEFTTOP = "lt";
    FullRectImage.ALIGN_RIGHTTOP = "rt";
    FullRectImage.ALIGN_CENTER = "c";
    FullRectImage.ALIGN_CENTERTOP = "ct";
    FullRectImage.ALIGN_CENTERBOTTOM = "cb";
    FullRectImage.ALIGN_LEFTBOTTOM = "lb";
    FullRectImage.ALIGN_RIGHTBOTTOM = "rb";

    var p = __extends(FullRectImage, pinetree.Sprite);

    p.load = function(url, landscapeUrl)
    {
        if(landscapeUrl)
        {
            this._loadCount ++;
        }

        this._normalLoader.load(url);

        if(landscapeUrl)
        {
            this._landscapeLoader = new pinetreecom.ExImage();
            this._landscapeLoader.addEventListener(pinetree.Event.COMPLETE, this.onLoadImgComplete, this);
            this._landscapeLoader.addEventListener(pinetree.Event.IO_ERROR, this.onLoadImgError, this);
            this._container.addChild(this._landscapeLoader);

            this._landscapeLoader.load(landscapeUrl);
        }
    }

    p.onLoadImgComplete = function(evt)
    {
        this._loadIndex ++;
        if(this._loadIndex < this._loadCount)
        {
            return;
        }

        this.dispatchWith(pinetree.Event.COMPLETE);
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.dispatch(this);

        this._isLoaded = true;
    }

    p.onLoadImgError = function(evt)
    {
        trace("Warning: IOError at FullRectImage::onIOError()");

        this._loadIndex ++;
        if(this._loadIndex < this._loadCount)
        {
            return;
        }

        this.dispatchWith(pinetree.Event.IO_ERROR);
        this.ON_IO_ERROR && this.ON_IO_ERROR.dispatch(this);
    }

    p.getImageWidth = function()
    {
        return this._width;
    }

    p.getImageHeight = function()
    {
        return this._height;
    }

    p.setImageSize = function(w, h)
    {
        this._width = w;
        this._height = h;

        var scale = Math.max(w / this._loader.originWidth, h / this._loader.originHeight);

        this._loaderWidth = this._loader.originWidth * scale;
        this._loaderHeight = this._loader.originHeight * scale;

        this._loader.width = this._loaderWidth;
        this._loader.height = this._loaderHeight;

        this.align();
    }

    p.setMaskSize = function(w, h)
    {
        this.clip = new pinetree.Rectangle(0, 0, w, h);
		this.width = w;
		this.height = h;
    }

    p.redraw = function(w, h)
    {
        this._loader = this._landscapeLoader ? (w > h ? this._landscapeLoader : this._normalLoader) : this._normalLoader;

        if(this._landscapeLoader)
        {
            this._normalLoader.visible = w <= h;
            this._landscapeLoader.visible = !this._normalLoader.visible;
        }

        this.setImageSize(w, h);
        this.setMaskSize(w, h);
    }

    p.align = function()
    {
        if(this._align == pinetreecom.FullRectImage.ALIGN_LEFTTOP)
        {
            //
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_RIGHTTOP)
        {
            this._loader.x = this._width - this._loaderWidth;
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_CENTER)
        {
            this._loader.x = (this._width - this._loaderWidth) >> 1;
            this._loader.y = (this._height - this._loaderHeight) >> 1;
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_CENTERTOP)
        {
            this._loader.x = (this._width - this._loaderWidth) >> 1;
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_CENTERBOTTOM)
        {
            this._loader.x = (this._width - this._loaderWidth) >> 1;
            this._loader.y = this._height - this._loaderHeight;
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_LEFTBOTTOM)
        {
            this._loader.y = this._height - this._loaderHeight;
        }
        else if(this._align == pinetreecom.FullRectImage.ALIGN_RIGHTBOTTOM)
        {
            this._loader.x = this._width - this._loaderWidth;
            this._loader.y = this._height - this._loaderHeight;
        }
    }

    p.zoom = function(time, tweenOffset)
    {
        time = __defaultSet(time, 1.0);
        tweenOffset = __defaultSet(tweenOffset, 100);

        this._container.translate(0, 0);
        this._container.scale = 1.0;
        this._tweenScale = Math.min(tweenOffset / pt.stageWidth, tweenOffset / pt.stageHeight);

        this.percent = 0;
        TweenMax.to(this, time, {percent:1, ease:Linear.easeNone,
            onUpdate:this._onZoomUpdate, onUpdateParams:[this, tweenOffset]});
    }

    p._onZoomUpdate = function(owner, tweenOffset)
    {
        var scale = 1 + owner._tweenScale * owner.percent;
        var value = "scale(" + scale + ")";

        owner._loader.htmlStyle.transform = value;
        owner._loader.htmlStyle.msTransform = value;
        owner._loader.htmlStyle.webkitTransform = value;
        owner._loader.htmlStyle.oTransform = value;
        owner._loader.htmlStyle.mozTransform = value;
    }

    p.show = function(time, delay, ease, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(ease == undefined) ease = Quint.easeOut;

        this.alpha = 0;
        if(!pinetree.isSupportTransition)
        {
            TweenMax.to(this, time, {alpha:1, delay:delay, ease:ease, onComplete:callback});
        }
        else
        {
            this.tweenAlphaByCSS(1, time, delay, "linear", callback);
        }
    }

    p.hide = function(time, delay, ease, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(ease == undefined) ease = Linear.easeNone;

        if(!pinetree.isSupportTransition)
        {
            TweenMax.to(this, time, {alpha:0, delay:delay, ease:ease, onComplete:callback});
        }
        else
        {
            this.tweenAlphaByCSS(0, time, delay, "linear", callback);
        }
    }

    p.getIsLoaded = function()
    {
        return this._isLoaded;
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        if(this._normalLoader)
        {
            this._normalLoader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadImgComplete, this);
            this._normalLoader.removeEventListener(pinetree.Event.IO_ERROR, this.onLoadImgError, this);
            this._normalLoader.dispose();
            this._normalLoader = null;
        }

        if(this._landscapeLoader)
        {
            this._landscapeLoader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadImgComplete, this);
            this._landscapeLoader.removeEventListener(pinetree.Event.IO_ERROR, this.onLoadImgError, this);
            this._landscapeLoader.dispose();
            this._landscapeLoader = null;
        }

        this._loader = null;

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_IO_ERROR = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.FullRectImage = FullRectImage;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-10.
 */
(function()
{
    var LoaderBase = function(loading)
    {
        pinetree.EventDispatcher.call(this);

        this._data = null;
        this._url = null;
        this._loader = null;
        this._loading = loading || null;

        this.index = 0;

        this.ON_PROGRESS = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        __defineGetterSetter(this, ["url", "data", "loader", "loading"]);
    }

    var p = __extends(LoaderBase, pinetree.EventDispatcher);

    p.load = function(url)
    {
        if(url)
            this._url = url;

        if(this._url && this._loader)
        {
            if(this._url instanceof  pinetree.URLRequest)
            {
                this._loader.load(this._url);
            }
            else
            {
                this._loader.load(new pinetree.URLRequest(this._url));
            }
        }

        if(this._loading)
        {
            this._loading.enabled = true;
            this._loading.percent = 0;
        }
    }

    p.onLoadComplete = function(evt)
    {
        this.dispatchWith(pinetree.Event.COMPLETE);
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.dispatch(this);

        if(this._loading)
        {
            this._loading.percent = 1;
        }
    }

    p.onIOError = function(evt)
    {
        trace("Warning: IOError at LoaderBase::onIOError()");
        this.dispatchWith(pinetree.Event.IO_ERROR);
        this.ON_IO_ERROR && this.ON_IO_ERROR.dispatch(this);
    }

    p.getLoader = function()
    {
        return this._loader;
    }

    p.getLoading = function()
    {
        return this._loading;
    }

    p.setUrl = function(value)
    {
        this._url = value;
    }
    p.getUrl = function()
    {
        return this._url;
    }

    p.getData = function()
    {
        return this._data;
    }

    p.close = function()
    {
        if(this._loader)
        {
            this._loader.hasOwnProperty("close") && this._loader.close();
        }
    }

    p.dispose = function()
    {
        this.ON_PROGRESS && this.ON_PROGRESS.removeAll();
        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_PROGRESS = null;
        this.ON_IO_ERROR = null;
        this.ON_LOAD_COMPLETE = null;

        this._loader && this._loader.dispose();
        this._loader = null;

        this._loading = null;

        pinetree.EventDispatcher.prototype.dispose.call(this);
    }

    pinetreecom.LoaderBase = LoaderBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-8.
 */
(function()
{
    var BitmapLoader = function(loading)
    {
        pinetreecom.LoaderBase.call(this, loading);

        this._loader = new pinetreecom.ExImage();
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);

        __defineGetterSetter(this, ["bitmapData"]);
    }

    var p = __extends(BitmapLoader, pinetreecom.LoaderBase);

    p.onLoadComplete = function(evt)
    {
        pinetreecom.LoaderBase.prototype.onLoadComplete.call(this, evt);
    }

    /**
     * this method will eat up much of cpu while be called the first time, you should use it at the right time.
     * @returns BitmapData
     */
    p.getBitmapData = function()
    {
        if(!this._data)
            this._data = this._loader.bitmapData;
        return this._data;
    }

    p.dispose = function()
    {
        if(this._loader)
        {
            this._loader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
            this._loader.removeEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
            this._loader.dispose();
            this._loader = null;
        }

        pinetreecom.LoaderBase.prototype.dispose.call(this);
    }

    pinetreecom.BitmapLoader = BitmapLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var FileLoader = function(loading, total)
    {
        pinetreecom.LoaderBase.call(this, loading);

        this._total = __defaultSet(total, 0);

        this._loader = new pinetree.URLLoader();
        this._loader.addEventListener(pinetree.Event.PROGRESS, this.onLoadProgress, this);
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
    }

    var p = __extends(FileLoader, pinetreecom.LoaderBase);

    p.onLoadProgress = function(evt)
    {
        var percent;
        if(evt)
        {
            percent = this._total > 0 ? evt.loaded / this._total : 0;
        }
        this.ON_PROGRESS.dispatch(percent);

        if(this._loading)
        {
            this._loading.percent = percent;
        }
    }

    p.load = function(url)
    {
        if(url)
            this._url = url;

        var request = new pinetree.URLRequest();
        if(__global.isDebug)
        {
            request.url = (this._url instanceof pinetree.URLRequest) ? this._url.url : this._url;
        }
        else
        {
            this._loader.dataFormat = pinetree.URLLoaderDataFormat.VARIABLES;

            var variables = new pinetree.URLVariables();
            variables.file_url = (this._url instanceof pinetree.URLRequest) ? this._url.url : this._url;
            request.url = PARENT_URL + "data/php/proxy.php";
            request.data = variables;
        }

        if(this._loader)
        {
            this._loader.load(request);
        }

        if(this._loading)
        {
            this._loading.enabled = true;
            this._loading.percent = 0;
        }
    }

    p.onLoadComplete = function(evt)
    {
        this._data = this._loader.data;
        pinetreecom.LoaderBase.prototype.onLoadComplete.call(this, evt);
    }

    p.dispose = function()
    {
        if(this._loader)
        {
            this._loader.removeEventListener(pinetree.Event.PROGRESS, this.onLoadProgress, this);
            this._loader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
            this._loader.removeEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
            this._loader.dispose();
            this._loader = null;
        }

        pinetreecom.LoaderBase.prototype.dispose.call(this);
    }

    pinetreecom.FileLoader = FileLoader;
}());

/**
 * Created by pineree on 14-5-16.
 */
(function()
{
	var LoaderQueue = function(loaders, loading)
	{
		this._currentIndex = 0;
		
        this._loaders = [];
        this._loading = loading || null;

        this._percent = 0;
        this._fileCountPercent = 0;
        this._sectionPercent = 0;
        this._partConstPercent = 0;

        if(loaders)
        {
            this._loaders = loaders.concat();
        }

        this.ON_COMPLETE_ALL = new pinetree.Signal();
        this.ON_COMPLETE_ONE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();
        this.ON_PROGRESS = new pinetree.Signal();

        __defineGetterSetter(this, ["count", "sectionPercent", "fileCountPercent", "percent"]);
    }

    var p = LoaderQueue.prototype;

    p.add = function(loader)
    {
        this._loaders.push(loader);
    }

    p.addLoaders = function(loaders)
    {
        this._loaders = this._loaders.concat(loaders);
    }

    p.getCount = function()
    {
        return this._loaders.length;
    }

    p.getFileCountPercent = function()
    {
        return this._fileCountPercent;
    }

    p.getSectionPercent = function()
    {
        return this._sectionPercent;
    }

    p.getPercent = function()
    {
        return this._percent;
    }

    p.start = function()
    {
        this._currentIndex = 0;
        this._sectionPercent = 0;
        this._fileCountPercent = 0;
        this._percent = 0;
        this._partConstPercent = 1 / this.getCount();

        if(this._loading)
        {
            this._loading.enabled = true;
        }

        this._load();
    }

    p._load = function()
    {
        if(this._loaders.length < 1) return;

        this._sectionPercent = 0;

        var loader = this._loaders[this._currentIndex];
        loader.addEventListener(pinetree.Event.COMPLETE, this._onLoadComplete, this);
        loader.addEventListener(pinetree.Event.IO_ERROR, this._onIOError, this);

        loader.ON_PROGRESS.add(this, this._onLoadProgress);

        pinetreecom.DelayCaller.delayAfterFrames(loader, loader.load, 1);
    }

    p._onLoadProgress = function(percent)
    {
        this._sectionPercent = percent * this._partConstPercent;
        this._percent = this._fileCountPercent + this._sectionPercent;
        this.ON_PROGRESS.dispatch(this._percent);

        if(this._loading)
        {
            this._loading.percent = this._percent;
        }
    }

    p._onLoadComplete = function(evt)
    {
        var loader = evt.customTarget;
        loader.removeEventListener(pinetree.Event.COMPLETE, this._onLoadComplete, this);
        loader.removeEventListener(pinetree.Event.IO_ERROR, this._onIOError, this);

        this.ON_COMPLETE_ONE.dispatch(loader);

        this._currentIndex ++;

        this._fileCountPercent = this.getCount() > 0 ? this._currentIndex / this.getCount() : 0;
        this._percent = this._fileCountPercent;
        this.ON_PROGRESS.dispatch(this._percent);

        if(this._loading)
        {
            this._loading.percent = this._percent;
        }

        if(this._currentIndex < this.getCount())
        {
            this._load();
        }
        else
        {
            this.ON_COMPLETE_ALL.dispatch(this._loaders);
        }
    }

    p._onIOError = function(evt)
    {
        var loader = evt.customTarget;
        loader.removeEventListener(pinetree.Event.COMPLETE, this._onLoadComplete, this);
        loader.removeEventListener(pinetree.Event.IO_ERROR, this._onIOError, this);

        this.ON_IO_ERROR.dispatch(evt);

        this._currentIndex ++;

        if(this._currentIndex < this._loaders.length)
        {
            this._load();
        }
        else
        {
            this.ON_COMPLETE_ALL.dispatch(this._loaders);
        }
    }

    p.reset = function()
    {
        if(this._loaders.length > 0)
        {
            var key, loader;
            for (key in this._loaders)
            {
                loader = this._loaders[key];
                if(loader)
                {
                    loader.removeEventListener(pinetree.Event.COMPLETE, this._onLoadComplete, this);
                    loader.removeEventListener(pinetree.Event.IO_ERROR, this._onIOError, this);
                    loader.dispose();
                    loader = null;
                }
            }
        }

        this._loaders.splice(0, this._loaders.length);
    }

    p.dispose = function()
    {
        if(this._loaders)
        {
            this.reset();
        }
        this._loaders = null;

        if(this._loading)
        {
            this._loading.enabled = false;
            this._loading = null;
        }

        this.ON_COMPLETE_ALL && this.ON_COMPLETE_ALL.removeAll();
        this.ON_COMPLETE_ONE && this.ON_COMPLETE_ONE.removeAll();
        this.ON_IO_ERROR && this.ON_IO_ERROR.removeAll();
        this.ON_PROGRESS && this.ON_PROGRESS.removeAll();

        this.ON_COMPLETE_ALL = null;
        this.ON_COMPLETE_ONE = null;
        this.ON_IO_ERROR = null;
        this.ON_PROGRESS = null;
    }

    pinetreecom.LoaderQueue = LoaderQueue;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-6.
 */
(function()
{
    /**
     * @param isAuto, auto to decide show or hide, while percent > 0 && percent < 1,
     * it will show the loading, otherwise hide.
     * @constructor
     */
    var AssetLoading = function(iconColor, bgWidth, bgHeight, bgColor, bgAlpha, fontSize, textColor, isAuto)
    {
        pinetreecom.UIComponent.call(this);

        this._iconColor = iconColor;

        this._bgWidth = __defaultSet(bgWidth, 50);
        this._bgHeight = __defaultSet(bgHeight, 40);

        if(!pinetree.hasProgressEvent)
            this._bgWidth = Math.floor(1.5 * this._bgWidth);

        this._isAuto = __defaultSet(isAuto, true);
        this._isShowing = false;

        this.tweenTime = 1.0;
        this.transition = Quart.easeInOut;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._icon = null;

        this._loadingBg = new pinetree.CanvasQuad(2, 0, 2, 0);
        this._loadingBg.width = this._bgWidth;
        this._loadingBg.height = this._bgHeight;
        this._loadingBg.color = __defaultSet(bgColor, pt.bgColor);
        this._loadingBg.alpha = __defaultSet(bgAlpha, 1.0);
        pinetreecom.CommonUtil.setSimpleShadow(this._loadingBg);
        this._container.addChild(this._loadingBg);

        this._txt = new pinetree.TextField();
        this._txt.className += " loadingtext";
        //this._txt.fontFamily = "cantarellregular, Verdana, Arial, Tahoma";
        this._txt.selectable = false;
        this._txt.mouseEnabled = false;
        this._container.addChild(this._txt);

        __defineGetterSetter(this, ["percent", "enabled", "isShowing"]);
    }

    var p = __extends(AssetLoading, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            var tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_ICON_MINI);
            this._icon = new pinetree.TextureImage(tex);
            this._container.addChild(this._icon);
            pinetreecom.ColorUtil.setColor(this._icon, this._iconColor);
            this._icon.selectable = false;

            this._txt.width = this._bgWidth;
            this._txt.text = "Loading";

            var gap = 3;
            var ch = this._icon.height + this._txt.height + gap;
            var y = (this._bgHeight - ch) >> 1;

            this._icon.x = (this._bgWidth - this._icon.width) >> 1;
            this._icon.y = y;
            this._txt.x = 0;
            this._txt.y = y + this._icon.height + gap;
        }
        pinetreecom.UIComponent.prototype.addedToStage.call(this);
        this.redraw();
    }

    p.setPercent = function(value)
    {
        if(value < 0) value = 0;
        if(value > 1) value = 1;

        /*if(this._isShowing)
        {
            var count = Math.floor(value * 100);
            var str = count < 10 ? "0" + count : count.toString();
            this._txt.text = str + "%";
        }*/

        if(this._isAuto)
        {
            if(value < 1)
            {
                this.show();
            }
            else
            {
                this.hide();
            }
        }
    }

    p.setEnabled = function(value)
    {
        //
    }

    p.resize = function(w, h)
    {
        TweenMax.killTweensOf(this._container, false, {x:true});

        if(this._isShowing)
        {
            this._container.x = w - this._bgWidth;
        }
        else
        {
            this._container.x = w + 50;
        }
        this._container.y = pt.TOP_HEIGHT + ((h - pt.TOP_HEIGHT - this._bgHeight - pt.FOOTER_HEIGHT) >> 1);
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        this.percent = 0;

        TweenMax.killTweensOf(this._container, false, {x:true});
        TweenMax.to(this._container, this.tweenTime / 2, {x: pt.stageWidth - this._bgWidth, ease:this.transition});

        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
        this.addEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
    }

    p.hide = function()
    {
        this._isShowing = false;

        TweenMax.killTweensOf(this._container, false, {x:true});
        TweenMax.to(this._container, this.tweenTime / 2, {x: pt.stageWidth + 50, ease:this.transition,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
    }

    p._onEnterFrame = function(evt)
    {
        if(this._icon)
        {
            this._icon.rotation += 10;
        }
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);

        this._icon && this._icon.dispose();
        this._icon = null;

        this._loadingBg && this._loadingBg.dispose();
        this._loadingBg = null;

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.AssetLoading = AssetLoading;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-5-16.
 */
(function()
{
    var CommonLoading = function(type)
    {
        pinetree.Sprite.call(this);

        this._icon = null;
        this._bg = null;

        this._type = __defaultSet(type, "big");

        this.alpha = 0;
        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.iconColor = pt.onOverColor;
        this.bgColor = pt.bgColor;

        this.iconAlpha = 1;
        this.bgAlpha = 0.2;
    }

    var p = __extends(CommonLoading, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            var tex = null;

            if(this._type == "big")
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_BG);
            }
            else if(this._type == "middle")
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_BG_MIDDLE);
            }
            else
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_BG_MINI);
            }
            this._bg = new pinetree.TextureImage(tex);
            this._bg.x = - this._bg.width >> 1;
            this._bg.y = - this._bg.height >> 1;
            this._bg.alpha = this.bgAlpha;
            this.addChild(this._bg);

            pinetreecom.ColorUtil.setColor(this._bg, this.bgColor);

            if(this._type == "big")
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_ICON);
            }
            else if(this._type == "middle")
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_ICON_MIDDLE);
            }
            else
            {
                tex = pt.getCommonTexture(pinetreepages.EnumTextures.LOADING_CIRCLE_ICON_MINI);
            }
            this._icon = new pinetree.TextureImage(tex);
            this._icon.x = - this._icon.width >> 1;
            this._icon.y = - this._icon.height >> 1;
            this._icon.alpha = this.iconAlpha;
            this.addChild(this._icon);

            pinetreecom.ColorUtil.setColor(this._icon, this.iconColor);

            this.selectable = false;
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.show = function()
    {
        this.visible = true;
        TweenMax.to(this, this.tweenTime / 2, {alpha:1, ease:this.transition});
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
        this.addEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
    }

    p.hide = function()
    {
        /*TweenMax.to(this, this.tweenTime / 2, {alpha:0, ease:this.transition,
            onComplete:this._onHideComplete, onCompleteParams:[this]});*/
        this._onHideComplete(this);
    }

    p._onHideComplete = function(owner)
    {
        TweenMax.killTweensOf(owner, false, {alpha:true});
        owner.alpha = 0;
        owner.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);
    }

    p._onEnterFrame = function(evt)
    {
        if(this._icon)
        {
            this._icon.rotation += 5;
        }
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame, this);

        this._icon && this._icon.dispose();
        this._icon = null;

        this._bg && this._bg.dispose();
        this._bg = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.CommonLoading = CommonLoading;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-11.
 */
(function()
{
    var CircleLoading = function(radius, annularWidth, loadingColor, bgColor, loadingAlpha, bgAlpha, startAngle)
    {
        pinetree.Sprite.call(this);

        this._radius = radius;
        this._annularWidth = annularWidth;
        this._loadingColor = __defaultSet(loadingColor, 0xffffff);
        this._bgColor = __defaultSet(bgColor, 0xcccccc);
        this._loadingAlpha = __defaultSet(loadingAlpha, 1.0);
        this._bgAlpha = __defaultSet(bgAlpha, 1.0);
        this._startAngle = __defaultSet(startAngle, -90);

        this._bg = new pinetree.Shape();
        this._bg.x = - (Math.round(annularWidth >> 1) + radius);
        this._bg.y = - (Math.round(annularWidth >> 1) + radius);
        this.addChild(this._bg);
        this._bg.graphics.lineStyle(this._annularWidth, this._bgColor, this._bgAlpha);
        this._bg.graphics.drawCircle(this._radius, this._radius, this._radius);
        this._bg.graphics.stroke();

        this._loading = new pinetree.Shape();
        this._loading.x = - (Math.round(annularWidth >> 1) + radius);
        this._loading.y = - (Math.round(annularWidth >> 1) + radius);
        this.addChild(this._loading);

        this._percent = 0;

        __defineGetterSetter(this, ["percent"]);
    }

    var p = __extends(CircleLoading, pinetree.Sprite);

    p.setPercent = function(value)
    {
        this._percent = value < 0 ? 0 : value > 1 ? 1 : value;
        var angle = 360 * this._percent;

        this._loading.graphics.clear();
        this._loading.graphics.context.beginPath();
        this._loading.graphics.lineStyle(this._annularWidth, this._loadingColor, this._loadingAlpha);
        this._loading.graphics.drawCircle(this._radius, this._radius, this._radius, this._startAngle / 180 * Math.PI,
            (angle + this._startAngle) / 180 * Math.PI, true);
        this._loading.graphics.stroke();
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.CircleLoading = CircleLoading;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-19.
 */
(function()
{
    var ThumbnailTweenInTypes = function(target)
    {
        this.tweenPercent = 0;
        this._target = target;
    }

    ThumbnailTweenInTypes.TYPE_ALPHA = "type_alpha";
    ThumbnailTweenInTypes.TYPE_MASK_TOP2BOTTOM = "type_mask_top2bottom";

    var p = ThumbnailTweenInTypes.prototype;

    p.excute = function(type, paramsObj)
    {
        switch(type)
        {
            case ThumbnailTweenInTypes.TYPE_ALPHA:
                this._onTweenAlpha(paramsObj);
                break;
            case ThumbnailTweenInTypes.TYPE_MASK_TOP2BOTTOM:
                this._onTweenMaskTop2bottom(paramsObj);
                break;
        }
    }

    p._onTweenAlpha = function(paramsObj)
    {
        var time = paramsObj.tweenTime == undefined ? 1.0 : paramsObj.tweenTime;
        var delay = paramsObj.delay == undefined ? 0 : paramsObj.delay;
        var fromAlpha = paramsObj.fromAlpha == undefined ? 0 : paramsObj.fromAlpha;
        var toAlpha = paramsObj.toAlpha == undefined ? 1 : paramsObj.toAlpha;
        var transition = paramsObj.transition == undefined ? Quad.easeOut : paramsObj.transition;
        var callback = paramsObj.callback;
        var owner = paramsObj.owner;

        this._target.alpha = fromAlpha;

        TweenMax.killTweensOf(this._target, false, {alpha:true});
        TweenMax.to(this._target, time, {alpha:toAlpha, delay:delay, ease:transition,
            onComplete:callback || null, onCompleteParams:[owner]});
    }

    p._onTweenMaskTop2bottom = function(paramsObj)
    {
        var time = paramsObj.tweenTime == undefined ? 1.0 : paramsObj.tweenTime;
        var delay = paramsObj.delay == undefined ? 0 : paramsObj.delay;
        var transition = paramsObj.transition == undefined ? Quad.easeOut : paramsObj.transition;
        var callback = paramsObj.callback;
        var owner = paramsObj.owner;
        var originHeight = paramsObj.height == undefined ? this._target.height : paramsObj.height;

        TweenMax.killTweensOf(this);
        this.tweenPercent = 0;
        TweenMax.to(this, time, {tweenPercent:1, delay:delay, ease:transition,
            onUpdate:this._onTweenUpdate,
            onUpdateParams:[this, originHeight],
            onComplete:callback || null, onCompleteParams:[owner]});
    }

    p._onTweenUpdate = function(owner, originHeight)
    {
        var rect = owner._target.clip;
        rect.height = owner.tweenPercent * originHeight;
        owner._target.clip = rect;
    }

    p.reset = function()
    {
        this._target && TweenMax.killTweensOf(this._target, false, {alpha:true});
        TweenMax.killTweensOf(this);
    }

    p.dispose = function()
    {
        this.reset();
        this._target = null;
    }

    pinetreecom.ThumbnailTweenInTypes = ThumbnailTweenInTypes;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-15.
 */
(function()
{
    var Thumbnail = function(w, h, fgColor, bgColor,
        useLoading, loadingClass, needTween, tweenType, autoResetRealSize, loadingType)
    {
        pinetree.Sprite.call(this);

        this._tweenType = tweenType || pinetreecom.ThumbnailTweenInTypes.TYPE_ALPHA;

        this.index = 0;

        this._autoResetRealSize = __defaultSet(autoResetRealSize, false);

        this._width = w || 0;
        this._height = h || 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this._originWidth = this._width;
        this._originHeight = this._height;
        this._inputWidth = this._width;
        this._inputHeight = this._height;

        this._useLoading = useLoading || false;
        this._loadingClass = loadingClass || null;
        this._loadingType = __defaultSet(loadingType, "middle");

        this._isLoaded = false;
        this._isConnecting = false;

        this._needTween = __defaultSet(needTween, true);

        this.clip = new pinetree.Rectangle(0, 0, this._width, this._height);
        this.width = this._width;
        this.height = this._height;

        this.imageContainer = new pinetree.Sprite;
        this.imageContainer.x = this._width / 2;
        this.imageContainer.y = this._height / 2;
        this.addChild(this.imageContainer);

        this._loader = new pinetreecom.ExImage();
        this._loader.alpha = 0;
        this._loader.x = - this._width / 2;
        this._loader.y = - this._height / 2;
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
        this.imageContainer.addChild(this._loader);

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();
        this.ON_TWEEN_COMPLETE = new pinetree.Signal();
        this.ON_PROGRESS = new pinetree.Signal();

        this.backgroundColor = bgColor;

        this.fg = new pinetree.Quad();
        this.addChild(this.fg);
        this.fg.color = fgColor || 0x000000;
        this.fg.width = this._width;
        this.fg.height = this._height;
        this.fg.alpha = 0;

        this._tweenTypeProxy = new pinetreecom.ThumbnailTweenInTypes(this.imageContainer);

        __defineGetterSetter(this, ["image", "originWidth", "originHeight", "imageWidth", "imageHeight",
            "bitmapData", "clone", "imageElement"
        ]);
    }

    var p = __extends(Thumbnail, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);

        if(!this.loading && this._useLoading && this._isConnecting)
        {
            this.initLoading();
        }
    }

    p.initLoading = function()
    {
        if(this.loading) return;

        var clazz = this._loadingClass ? this._loadingClass : pinetreecom.CommonLoading;
        this.loading = new clazz(this._loadingType);
        this.loading.x = this._width >> 1;
        this.loading.y = this._height >> 1;
        this.addChild(this.loading);
        this.loading.show();
    }

    p.load = function(url)
    {
        this._isConnecting = true;

        if(!this.loading && this._useLoading && this.stage)
        {
            this.initLoading();
        }

        try
        {
            this._loader.load(url);
        }
        catch(e)
        {
            this.onIOError(null);
        }
    }

    p.onIOError = function(evt)
    {
        this._isConnecting = false;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        this.ON_IO_ERROR.dispatch(evt);
    }

    p.onLoadComplete = function(e)
    {
        this._isConnecting = false;
        this._isLoaded = true;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        if(this._originWidth <= 0)
            this._originWidth = this._loader.originWidth;
        if(this._originHeight <= 0)
            this._originHeight = this._loader.originHeight;

        if(this._autoResetRealSize)
        {
            this.resetRealSize();
        }

        this.ON_LOAD_COMPLETE.dispatch(this);

        this._loader.alpha = 1;

        if(this._needTween)
        {
            this._tweenTypeProxy.excute(this._tweenType, {fromAlpha:0, toAlpha:1, time:this.tweenTime / 2, delay:0,
                callback:this.tweenComplete, owner:this, transition:this.transition, originHeight:this._height
            })
        }
    }

    p.tweenComplete = function(owner)
    {
        owner.ON_TWEEN_COMPLETE.dispatch(owner);
    }

    p.onOver = function(time, transition, scale, rotation)
    {
        time = __defaultSet(time, this.tweenTime);
        scale = __defaultSet(scale, 1.05);
        rotation = __defaultSet(rotation, 0);
        transition = __defaultSet(transition, this.transition);

        TweenMax.to(this.imageContainer, time, {scale:scale, rotation:rotation, ease:transition});
    }

    p.onOut = function(time, transition)
    {
        time = __defaultSet(time, this.tweenTime);
        transition = __defaultSet(transition, this.transition);
        TweenMax.to(this.imageContainer, time, {scale:1.0, rotation:0, ease:transition});
    }

    p.tweenFrontground = function(fgAlpha, time, transition, callback)
    {
        if(transition == null) transition = this.transition;

        if(callback != null)
            TweenMax.to(this.fg, time, { alpha:fgAlpha, ease:transition } );
        else
            TweenMax.to(this.fg, time, { alpha:fgAlpha, ease:transition, onComplete:callback } );
    }

    p.getImage = function()
    {
        return this.imageContainer;
    }

    p.getImageElement = function()
    {
        if(!this._loader) return null;
        return this._loader.getImageElement();
    }

    /**
     * current width
     * */
    p.getImageWidth = function()
    {
        return this._width;
    }

    /**
     * current height
     * */
    p.getImageHeight = function()
    {
        return this._height;
    }

    /**
     * origin width which is set in the construct function.
     * */
    p.getOriginWidth = function()
    {
        return this._originWidth;
    }

    /**
     * origin height which is set in the construct function.
     * */
    p.getOriginHeight = function()
    {
        return this._originHeight;
    }

    /**
     * the width of viewport
     * */
    p.setImageWidth = function(value)
    {
        this._width = value;

        this.fg.width = this._width;

        this.imageContainer.x = this._width / 2;

        this._loader.width = value;
        this._loader.x = - this._width / 2;

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
        }

        this.updateClip();
    }

    /**
     * the height of viewport
     * */
    p.setImageHeight = function(value)
    {
        this._height = value;

        this.fg.height = this._height;

        this.imageContainer.y = this._height / 2;

        this._loader.height = value;
        this._loader.y = - this._height / 2;

        if(this.loading)
        {
            this.loading.y = this._height >> 1;
        }

        this.updateClip();
    }

    p.getStageX = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageX(this);
        }

        return 0;
    }

    p.getStageY = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageY(this);
        }

        return 0;
    }

    p.getClone = function()
    {
        if(! this._loader || ! this._loader.bitmapData) return null;
        return this._loader.bitmapData.clone();
    }

    p.getBitmapData = function()
    {
        if(! this._loader || ! this._loader.bitmapData) return null;
        return this._loader.bitmapData;
    }

    p.setMaxSize = function(w, h)
    {
        var isWidthFull;

        if(w >= this._originWidth && h >= this._originHeight)
        {
            this.setImageWidth(this._originWidth);
            this.setImageHeight(this._originHeight);
            return;
        }
        else
        {
            isWidthFull = w / this._originWidth < h / this._originHeight;
        }

        if(isWidthFull)
        {
            this._width = w;
            this._height = Math.floor(w / this._originWidth * this._originHeight);
        }
        else
        {
            this._height = h;
            this._width = Math.floor(h / this._originHeight * this._originWidth);
        }

        this.setImageWidth(this._width);
        this.setImageHeight(this._height);

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
            this.loading.y = this._height >> 1;
        }
    }

    /**
     * use the width and height of the bitmapdata to set the fit size
     */
    p.setRealFitSize = function(w, h)
    {
        if(this._loader)
        {
            var ow = this._loader.originWidth ? this._loader.originWidth : this._originWidth;
            var oh = this._loader.originHeight ? this._loader.originHeight : this._originHeight;
            this.setFitSize(w, h, ow, oh);
        }
    }

    p.resetRealSize = function()
    {
        var w = this._loader.originWidth ? this._loader.originWidth : this._originWidth;
        var h = this._loader.originHeight ? this._loader.originHeight : this._originHeight;
        this.setFitSize(w, h, w, h);
    }

    /**
     * use the input width and height to set the fit size
     */
    p.setFitSize = function(w, h, ow, oh)
    {
        this._width = w;
        this._height = h;

        if(ow == undefined || ow == 0) ow = this._originWidth;
        if(oh == undefined || oh == 0) oh = this._originHeight;

        var scale = Math.max(w / ow, h / oh);
        var newWidth = Math.ceil(ow * scale);
        var newHeight = Math.ceil(oh * scale);

        this.fg.width = this._width;

        this.fg.height = this._height;

        this.imageContainer.x = w >> 1;
        this.imageContainer.y = h >> 1;

        this._loader.width = newWidth;
        this._loader.height = newHeight;
        this._loader.x = - newWidth / 2;
        this._loader.y = - newHeight / 2;

        this.updateClip();

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
            this.loading.y = this._height >> 1;
        }
    }

    /**
     * set the rect size(full shown), if autoZoom is true, it will zoom the image to fit the rect,
     *  otherwise it won't zoom unless the image's size is smaller than it's origin size
     */
    p.setRectSize = function(w, h, edgeX, edgeY, autoZoom)
    {
        var currentWidth;
        var currentHeight;

        if(edgeX == undefined) edgeX = 0;
        if(edgeY == undefined) edgeY = 0;
        if(autoZoom == undefined) autoZoom = false;

        if(!autoZoom && this._originWidth < w - 2 * edgeX && this._originHeight < h - 2 * edgeY)
        {
            currentWidth = this._originWidth;
            currentHeight = this._originHeight;
        }
        else
        {
            var scale = Math.min((w - 2 * edgeX) / this._originWidth, (h - 2 * edgeY) / this._originHeight);
            currentWidth = scale * this._originWidth;
            currentHeight = scale * this._originHeight;
        }

        this.setImageWidth(currentWidth);
        this.setImageHeight(currentHeight);

        if(this.loading)
        {
            this.loading.x = currentWidth >> 1;
            this.loading.y = currentHeight >> 1;
        }
    }

    p.toStageCenter = function()
    {
        if(!this.stage) return;

        var sx = (this.stage.stageWidth - this._width) >> 1;
        var sy = (this.stage.stageHeight - this._height) >> 1;
    
        this.x = pinetreecom.CommonUtil.getCurrentX(this, sx);
        this.y = pinetreecom.CommonUtil.getCurrentY(this, sy);
    }

    p.toCenter = function(rectWidth, rectHeight, offsetX, offsetY)
    {
        if(offsetX == undefined) offsetX = 0;
        if(offsetY == undefined) offsetY = 0;
        this.x = Math.floor((rectWidth - this._width) / 2 + offsetX);
        this.y = Math.floor((rectHeight - this._height) / 2 + offsetY);
    }

    p.updateClip = function()
    {
        var rect = this.clip;
        if(rect)
        {
            rect.width = this._width;
            rect.height = this._height;
            this.clip = rect;

            this.width = this._width;
            this.height = this._height;
        }
    }

    p.reset = function()
    {
        this._width = this._originWidth = this._inputWidth;
        this._height = this._originHeight = this._inputHeight;

        this.imageContainer.x = this._width / 2;
        this.imageContainer.y = this._height / 2;
        this.imageContainer.removeAllChildren();

        var rect = this.clip;
        if(rect)
        {
            rect.width = this._width;
            rect.height = this._height;
            this.clip = rect;
        }

        TweenMax.killTweensOf(this._loader);
        TweenMax.killTweensOf(this.imageContainer);

        this._isLoaded = false;

        this.unload();

        this._loader && this._loader.dispose();
        this._loader = null;
        this._loader = new pinetreecom.ExImage();
        this._loader.alpha = 0;
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);

        this._loader.x = - this._width / 2;
        this._loader.y = - this._height / 2;
        this.imageContainer.addChild(this._loader);
    }

    p.unload = function()
    {
        this._isConnecting = false;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        if(this._loader)
        {
            this._loader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
            this._loader.removeEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
        }
    }

    p.setUseMouseHand = function(value)
    {
        pinetree.Sprite.prototype.setUseMouseHand.call(this, value);
        if(this.fg)
            this.fg.useMouseHand = value;
        if(this.imageContainer)
            this.imageContainer.useMouseHand = value;
    }

    p.dispose = function()
    {
        this.unload();

        this._tweenTypeProxy && this._tweenTypeProxy.dispose();
        this._tweenTypeProxy = null;

        TweenMax.killTweensOf(this);
        TweenMax.killTweensOf(this._loader);
        TweenMax.killTweensOf(this.imageContainer);

        this._loader && this._loader.dispose();
        this._loader = null;

        this.ON_TWEEN_COMPLETE.removeAll();
        this.ON_IO_ERROR.removeAll();
        this.ON_LOAD_COMPLETE.removeAll();
        this.ON_PROGRESS.removeAll();

        this.ON_TWEEN_COMPLETE = null;
        this.ON_IO_ERROR = null;
        this.ON_LOAD_COMPLETE = null;
        this.ON_PROGRESS = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.Thumbnail = Thumbnail;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-5-15.
 */
(function()
{
    var BitmapThumbnail = function(w, h, fgColor, bgColor,
        useLoading, loadingClass, needTween, tweenType, autoResetRealSize)
    {
        pinetree.Sprite.call(this);

        this._tweenType = tweenType || pinetreecom.ThumbnailTweenInTypes.TYPE_ALPHA;

        this.index = 0;

        this._autoResetRealSize = __defaultSet(autoResetRealSize, false);

        this._width = w || 0;
        this._height = h || 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this._originWidth = this._width;
        this._originHeight = this._height;
        this._inputWidth = this._width;
        this._inputHeight = this._height;

        this._useLoading = useLoading || false;
        this._loadingClass = loadingClass || null;

        this._isConnecting = false;

        this._needTween = __defaultSet(needTween, true);

        this.clip = new pinetree.Rectangle(0, 0, this._width, this._height);
        this.width = this._width;
        this.height = this._height;

        this.imageContainer = new pinetree.Sprite;
        this.imageContainer.x = this._width / 2;
        this.imageContainer.y = this._height / 2;
        this.addChild(this.imageContainer);

        this._loader = new pinetreecom.ExImage();
        this._loader.alpha = 0;
        this._loader.x = - this._width / 2;
        this._loader.y = - this._height / 2;
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
        this.imageContainer.addChild(this._loader);

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();
        this.ON_TWEEN_COMPLETE = new pinetree.Signal();
        this.ON_PROGRESS = new pinetree.Signal();

        this.backgroundColor = bgColor;

        this.fg = new pinetree.Quad();
        this.addChild(this.fg);
        this.fg.color = fgColor || 0x000000;
        this.fg.width = this._width;
        this.fg.height = this._height;
        this.fg.alpha = 0;

        this._tweenTypeProxy = new pinetreecom.ThumbnailTweenInTypes(this.imageContainer);

        __defineGetterSetter(this, ["image", "originWidth", "originHeight", "imageWidth", "imageHeight",
            "bitmapData", "clone", "imageElement"
        ]);
    }

    var p = __extends(BitmapThumbnail, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);

        if(!this.loading && this._useLoading && this._isConnecting)
        {
            this.initLoading();
        }
    }

    p.initLoading = function()
    {
        if(this.loading) return;

        var clazz = this._loadingClass ? this._loadingClass : pinetreecom.CommonLoading;
        this.loading = new clazz();
        this.loading.x = this._width >> 1;
        this.loading.y = this._height >> 1;
        this.addChild(this.loading);
        this.loading.show();
    }

    p.load = function(url)
    {
        this._isConnecting = true;

        if(!this.loading && this._useLoading && this.stage)
        {
            this.initLoading();
        }

        try
        {
            this._loader.load(url);
        }
        catch(e)
        {
            this.onIOError(null);
        }
    }

    p.onIOError = function(evt)
    {
        this._isConnecting = false;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        this.ON_IO_ERROR.dispatch(evt);
    }

    p.onLoadComplete = function(e)
    {
        this._isConnecting = false;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        if(this._originWidth <= 0)
            this._originWidth = this._loader.originWidth;
        if(this._originHeight <= 0)
            this._originHeight = this._loader.originHeight;

        if(this._autoResetRealSize)
        {
            this.resetRealSize();
        }

        this.ON_LOAD_COMPLETE.dispatch(this);

        this._loader.alpha = 1;

        if(this._needTween)
        {
            this._tweenTypeProxy.excute(this._tweenType, {fromAlpha:0, toAlpha:1, time:this.tweenTime / 2, delay:0,
                callback:this.tweenComplete, owner:this, transition:this.transition, originHeight:this._height
            })
        }
    }

    p.tweenComplete = function(owner)
    {
        owner.ON_TWEEN_COMPLETE.dispatch(owner);
    }

    p.onOver = function(time, transition, scale, rotation)
    {
        time = __defaultSet(time, this.tweenTime);
        scale = __defaultSet(scale, 1.05);
        rotation = __defaultSet(rotation, 0);
        transition = __defaultSet(transition, this.transition);

        TweenMax.to(this.imageContainer, time, {scale:scale, rotation:rotation, ease:transition});
    }

    p.onOut = function(time, transition)
    {
        time = __defaultSet(time, this.tweenTime);
        transition = __defaultSet(transition, this.transition);
        TweenMax.to(this.imageContainer, time, {scale:1.0, rotation:0, ease:transition});
    }

    p.tweenFrontground = function(fgAlpha, time, transition, callback)
    {
        if(transition == null) transition = this.transition;

        if(callback != null)
            TweenMax.to(this.fg, time, { alpha:fgAlpha, ease:transition } );
        else
            TweenMax.to(this.fg, time, { alpha:fgAlpha, ease:transition, onComplete:callback } );
    }

    p.getImage = function()
    {
        return this.imageContainer;
    }

    p.getImageElement = function()
    {
        if(!this._loader) return null;
        return this._loader.getImageElement();
    }

    /**
     * current width
     * */
    p.getImageWidth = function()
    {
        return this._width;
    }

    /**
     * current height
     * */
    p.getImageHeight = function()
    {
        return this._height;
    }

    /**
     * origin width which is set in the construct function.
     * */
    p.getOriginWidth = function()
    {
        return this._originWidth;
    }

    /**
     * origin height which is set in the construct function.
     * */
    p.getOriginHeight = function()
    {
        return this._originHeight;
    }

    /**
     * the width of viewport
     * */
    p.setImageWidth = function(value)
    {
        this._width = value;

        this.fg.width = this._width;

        this.imageContainer.x = this._width / 2;

        this._loader.width = value;
        this._loader.x = - this._width / 2;

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
        }

        this.updateClip();
    }

    /**
     * the height of viewport
     * */
    p.setImageHeight = function(value)
    {
        this._height = value;

        this.fg.height = this._height;

        this.imageContainer.y = this._height / 2;

        this._loader.height = value;
        this._loader.y = - this._height / 2;

        if(this.loading)
        {
            this.loading.y = this._height >> 1;
        }

        this.updateClip();
    }

    p.getStageX = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageX(this);
        }

        return 0;
    }

    p.getStageY = function()
    {
        if(this.stage)
        {
            return pinetreecom.CommonUtil.getStageY(this);
        }

        return 0;
    }

    p.getClone = function()
    {
        if(! this._loader || ! this._loader.bitmapData) return null;
        return this._loader.bitmapData.clone();
    }

    p.getBitmapData = function()
    {
        if(! this._loader || ! this._loader.bitmapData) return null;
        return this._loader.bitmapData;
    }

    p.setMaxSize = function(w, h)
    {
        var isWidthFull;

        if(w >= this._originWidth && h >= this._originHeight)
        {
            this.setImageWidth(this._originWidth);
            this.setImageHeight(this._originHeight);
            return;
        }
        else
        {
            isWidthFull = w / this._originWidth < h / this._originHeight;
        }

        if(isWidthFull)
        {
            this._width = w;
            this._height = Math.floor(w / this._originWidth * this._originHeight);
        }
        else
        {
            this._height = h;
            this._width = Math.floor(h / this._originHeight * this._originWidth);
        }

        this.setImageWidth(this._width);
        this.setImageHeight(this._height);

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
            this.loading.y = this._height >> 1;
        }
    }

    /**
     * use the width and height of the bitmapdata to set the fit size
     */
    p.setRealFitSize = function(w, h)
    {
        if(this._loader)
        {
            var ow = this._loader.originWidth ? this._loader.originWidth : this._originWidth;
            var oh = this._loader.originHeight ? this._loader.originHeight : this._originHeight;
            this.setFitSize(w, h, ow, oh);
        }
    }

    p.resetRealSize = function()
    {
        var w = this._loader.originWidth ? this._loader.originWidth : this._originWidth;
        var h = this._loader.originHeight ? this._loader.originHeight : this._originHeight;
        this.setFitSize(w, h, w, h);
    }

    /**
     * use the input width and height to set the fit size
     */
    p.setFitSize = function(w, h, ow, oh)
    {
        this._width = w;
        this._height = h;

        if(ow == undefined || ow == 0) ow = this._originWidth;
        if(oh == undefined || oh == 0) oh = this._originHeight;

        var scale = Math.max(w / ow, h / oh);
        var newWidth = Math.ceil(ow * scale);
        var newHeight = Math.ceil(oh * scale);

        this.fg.width = this._width;

        this.fg.height = this._height;

        this.imageContainer.x = w >> 1;
        this.imageContainer.y = h >> 1;

        this._loader.width = newWidth;
        this._loader.height = newHeight;
        this._loader.x = - newWidth / 2;
        this._loader.y = - newHeight / 2;

        this.updateClip();

        if(this.loading)
        {
            this.loading.x = this._width >> 1;
            this.loading.y = this._height >> 1;
        }
    }

    /**
     * set the rect size(full shown), if autoZoom is true, it will zoom the image to fit the rect,
     *  otherwise it won't zoom unless the image's size is smaller than it's origin size
     */
    p.setRectSize = function(w, h, edgeX, edgeY, autoZoom)
    {
        var currentWidth;
        var currentHeight;

        if(edgeX == undefined) edgeX = 0;
        if(edgeY == undefined) edgeY = 0;
        if(autoZoom == undefined) autoZoom = false;

        if(!autoZoom && this._originWidth < w - 2 * edgeX && this._originHeight < h - 2 * edgeY)
        {
            currentWidth = this._originWidth;
            currentHeight = this._originHeight;
        }
        else
        {
            var scale = Math.min((w - 2 * edgeX) / this._originWidth, (h - 2 * edgeY) / this._originHeight);
            currentWidth = scale * this._originWidth;
            currentHeight = scale * this._originHeight;
        }

        this.setImageWidth(currentWidth);
        this.setImageHeight(currentHeight);

        if(this.loading)
        {
            this.loading.x = currentWidth >> 1;
            this.loading.y = currentHeight >> 1;
        }
    }

    p.toStageCenter = function()
    {
        if(!this.stage) return;

        var sx = (this.stage.stageWidth - this._width) >> 1;
        var sy = (this.stage.stageHeight - this._height) >> 1;
    
        this.x = pinetreecom.CommonUtil.getCurrentX(this, sx);
        this.y = pinetreecom.CommonUtil.getCurrentY(this, sy);
    }

    p.toCenter = function(rectWidth, rectHeight, offsetX, offsetY)
    {
        if(offsetX == undefined) offsetX = 0;
        if(offsetY == undefined) offsetY = 0;
        this.x = Math.floor((rectWidth - this._width) / 2 + offsetX);
        this.y = Math.floor((rectHeight - this._height) / 2 + offsetY);
    }

    p.updateClip = function()
    {
        var rect = this.clip;
        if(rect)
        {
            rect.width = this._width;
            rect.height = this._height;
            this.clip = rect;

            this.width = this._width;
            this.height = this._height;
        }
    }

    p.reset = function()
    {
        this._width = this._originWidth = this._inputWidth;
        this._height = this._originHeight = this._inputHeight;

        this.imageContainer.x = this._width / 2;
        this.imageContainer.y = this._height / 2;
        this.imageContainer.removeAllChildren();

        var rect = this.clip;
        if(rect)
        {
            rect.width = this._width;
            rect.height = this._height;
            this.clip = rect;
        }

        TweenMax.killTweensOf(this._loader);
        TweenMax.killTweensOf(this.imageContainer);

        this.unload();

        this._loader && this._loader.dispose();
        this._loader = null;
        this._loader = new pinetreecom.ExImage();
        this._loader.alpha = 0;
        this._loader.addEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
        this._loader.addEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);

        this._loader.x = - this._width / 2;
        this._loader.y = - this._height / 2;
        this.imageContainer.addChild(this._loader);
    }

    p.unload = function()
    {
        this._isConnecting = false;

        if(this.loading)
        {
            this.loading.removeFromParent(true);
            this.loading = null;
        }

        if(this._loader)
        {
            this._loader.removeEventListener(pinetree.Event.COMPLETE, this.onLoadComplete, this);
            this._loader.removeEventListener(pinetree.Event.IO_ERROR, this.onIOError, this);
        }
    }

    p.dispose = function()
    {
        this.unload();

        this._tweenTypeProxy && this._tweenTypeProxy.dispose();
        this._tweenTypeProxy = null;

        TweenMax.killTweensOf(this);
        TweenMax.killTweensOf(this._loader);
        TweenMax.killTweensOf(this.imageContainer);

        this._loader && this._loader.dispose();
        this._loader = null;

        this.ON_TWEEN_COMPLETE.removeAll();
        this.ON_IO_ERROR.removeAll();
        this.ON_LOAD_COMPLETE.removeAll();
        this.ON_PROGRESS.removeAll();

        this.ON_TWEEN_COMPLETE = null;
        this.ON_IO_ERROR = null;
        this.ON_LOAD_COMPLETE = null;
        this.ON_PROGRESS = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.BitmapThumbnail = BitmapThumbnail;
}());


/**
 * Created by foreverpinetree@gmail.com on 2014/12/17.
 */
(function()
{
    /**
     * black-white thumbnail
     * @constructor
     */
    var BlackWhiteThumbnail = function(w, h, fgColor, bgColor,
                               useLoading, loadingClass, needTween, tweenType,
                               autoResetRealSize, isShowBlackWhiteFirst
    )
    {
        pinetreecom.Thumbnail.call(this, w, h, fgColor, bgColor,
            useLoading, loadingClass, needTween, tweenType, autoResetRealSize);

        this._isShowBlackWhiteFirst = __defaultSet(isShowBlackWhiteFirst, true);

        this._loader.visible = !this._isShowBlackWhiteFirst;

        this._blackWhiteBmp = new pinetree.Bitmap();
        this.imageContainer.addChild(this._blackWhiteBmp);

        this.imageContainer.swapChildren(this._loader, this._blackWhiteBmp);

        this._blackWhiteBmp.x = - this._width / 2;
        this._blackWhiteBmp.y = - this._height / 2;
        this._blackWhiteBmp.visible = false;

        this._bitmapData = null;
    }

    var p = __extends(BlackWhiteThumbnail, pinetreecom.Thumbnail);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            if(this._isShowBlackWhiteFirst && !this._bitmapData && this._isLoaded)
            {
                this._blackWhiteBmp.visible = true;
                this._bitmapData = pinetreecom.CommonUtil.getGrayBitmapData(this._loader.bitmapData);
                this._blackWhiteBmp.bitmapData = this._bitmapData;
            }
        }
        pinetreecom.Thumbnail.prototype.addedToStage.call(this);
    }

    p.onLoadComplete = function(e)
    {
        pinetreecom.Thumbnail.prototype.onLoadComplete.call(this, e);

        if(this._isShowBlackWhiteFirst && this.isInitialized)
        {
            this._blackWhiteBmp.visible = true;
            this._bitmapData = pinetreecom.CommonUtil.getGrayBitmapData(this._loader.bitmapData);
            this._blackWhiteBmp.bitmapData = this._bitmapData;
        }

        this.setRealFitSize(this.imageWidth, this.imageHeight);
    }

    /**
     * the width of viewport
     * */
    p.setImageWidth = function(value)
    {
        pinetreecom.Thumbnail.prototype.setImageWidth.call(this, value);

        this._blackWhiteBmp.width = value;
        this._blackWhiteBmp.x =  - this._width / 2;
    }

    /**
     * the height of viewport
     * */
    p.setImageHeight = function(value)
    {
        pinetreecom.Thumbnail.prototype.setImageHeight.call(this, value);

        this._blackWhiteBmp.height = value;
        this._blackWhiteBmp.y = - this._height / 2;
    }

    /**
     * use the input width and height to set the fit size
     */
    p.setFitSize = function(w, h, ow, oh)
    {
        pinetreecom.Thumbnail.prototype.setFitSize.call(this, w, h, ow, oh);

        var scale = Math.max(w / ow, h / oh);
        var newWidth = Math.ceil(ow * scale);
        var newHeight = Math.ceil(oh * scale);

        this._blackWhiteBmp.width = newWidth;
        this._blackWhiteBmp.height = newHeight;
        this._blackWhiteBmp.x = - newWidth / 2;
        this._blackWhiteBmp.y = - newHeight / 2;
    }

    p.toColorful = function(time, delay, transition)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this._loader.alpha = 0;
        this._loader.visible = true;
        TweenMax.to(this._loader, time, {alpha:1, delay:delay, ease:transition || this.transition});
    }

    p.toBlackWhite = function(time, delay, transition)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(!this._bitmapData)
        {
            this._bitmapData = pinetreecom.CommonUtil.getGrayBitmapData(this._loader.bitmapData);
            this._blackWhiteBmp.bitmapData = this._bitmapData;
            this._blackWhiteBmp.visible = true;
        }

        TweenMax.to(this._loader, time, {alpha:0, delay:delay, ease:transition || this.transition,
            onComplete:this._onToBlackWhiteComplete, onCompleteParams:[this._loader]});
    }

    p._onToBlackWhiteComplete = function(target)
    {
        target.visible = false;
    }

    p.reset = function()
    {
        pinetreecom.Thumbnail.prototype.reset.call(this);

        this._bitmapData && this._bitmapData.dispose();
        this._bitmapData = null;

        this._blackWhiteBmp.visible = false;
    }

    p.dispose = function()
    {
        pinetreecom.Thumbnail.prototype.dispose.call(this);

        this._bitmapData && this._bitmapData.dispose();
        this._bitmapData = null;
    }

    pinetreecom.BlackWhiteThumbnail = BlackWhiteThumbnail;
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/1/10.
 */
(function()
{
    /**
     * blur thumbnail
     * @constructor
     */
    var BlurThumbnail = function(w, h, fgColor, bgColor,
                               useLoading, loadingClass, needTween, tweenType,
                               autoResetRealSize
    )
    {
        pinetreecom.Thumbnail.call(this, w, h, fgColor, bgColor,
            useLoading, loadingClass, needTween, tweenType, autoResetRealSize);

        this._blurBmp = new pinetree.Bitmap();
        this.imageContainer.addChild(this._blurBmp);

        this.imageContainer.swapChildren(this._loader, this._blurBmp);

        this._blurBmp.x = - this._width / 2;
        this._blurBmp.y = - this._height / 2;
        this._blurBmp.visible = false;

        this._bitmapData = null;
    }

    var p = __extends(BlurThumbnail, pinetreecom.Thumbnail);

    /**
     * the width of viewport
     * */
    p.setImageWidth = function(value)
    {
        pinetreecom.Thumbnail.prototype.setImageWidth.call(this, value);

        this._blurBmp.width = value;
        this._blurBmp.x =  - this._width / 2;
    }

    /**
     * the height of viewport
     * */
    p.setImageHeight = function(value)
    {
        pinetreecom.Thumbnail.prototype.setImageHeight.call(this, value);

        this._blurBmp.height = value;
        this._blurBmp.y = - this._height / 2;
    }

    /**
     * use the input width and height to set the fit size
     */
    p.setFitSize = function(w, h, ow, oh)
    {
        pinetreecom.Thumbnail.prototype.setFitSize.call(this, w, h, ow, oh);

        var scale = Math.max(w / ow, h / oh);
        var newWidth = Math.ceil(ow * scale);
        var newHeight = Math.ceil(oh * scale);

        this._blurBmp.width = newWidth;
        this._blurBmp.height = newHeight;
        this._blurBmp.x = - newWidth / 2;
        this._blurBmp.y = - newHeight / 2;
    }

    p.unBlur = function(time, delay, transition)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this._loader.alpha = 0;
        this._loader.visible = true;
        TweenMax.to(this._loader, time, {alpha:1, delay:delay, ease:transition || this.transition});
    }

    p.blur = function(time, delay, transition)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(!this._bitmapData)
        {
            this._bitmapData = pinetreecom.CommonUtil.getBlurBitmapData(this._loader.bitmapData, 10);
            this._blurBmp.bitmapData = this._bitmapData;
            this._blurBmp.visible = true;
        }

        TweenMax.to(this._loader, time, {alpha:0, delay:delay, ease:transition || this.transition,
            onComplete:this._onBlurComplete, onCompleteParams:[this._loader]});
    }

    p._onBlurComplete = function(target)
    {
        target.visible = false;
    }

    p.reset = function()
    {
        pinetreecom.Thumbnail.prototype.reset.call(this);

        this._bitmapData && this._bitmapData.dispose();
        this._bitmapData = null;

        this._blurBmp.visible = false;
    }

    p.dispose = function()
    {
        pinetreecom.Thumbnail.prototype.dispose.call(this);

        this._bitmapData && this._bitmapData.dispose();
        this._bitmapData = null;
    }

    pinetreecom.BlurThumbnail = BlurThumbnail;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-3.
 */
(function()
{
    var ImageTextContainer = function(showWidth, showHeight, imageWidth, imageHeight, gapX, gapY,
                                      textPadding, useTextScroll, textContainerHeight, bgAlpha, hasTitle)
    {
        pinetreecom.UIComponent.call(this);

        this._showWidth = showWidth;
        this._showHeight = showHeight;
        this._imageWidth = imageWidth == undefined ? 0 : imageWidth;
        this._imageHeight = imageHeight == undefined ? 0 : imageHeight;
        this._gapX = gapX || 0;
        this._gapY = gapY || 0;
        this._textPadding = textPadding || 0;
        this._useTextScroll = !!useTextScroll;
        this._textContainerHeight = textContainerHeight == undefined ? 100 : textContainerHeight;
        this._bgAlpha = bgAlpha == undefined ? 0 : bgAlpha;
        this._hasTitle = hasTitle;

        this._title = "";
        this._information = "";

        this._textContainer = null;
        this._image = null;

        this._hasImage = true;

        this._startMousePos = 0;

        this._imageLoadError = false;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(ImageTextContainer, pinetreecom.UIComponent);

    ImageTextContainer.PREV_TYPE = "prev";
    ImageTextContainer.NEXT_TYPE = "next";

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._txtContainer = new pinetreecom.TextContainer(this._showWidth, this._textContainerHeight,
                pt.bgColor, this._bgAlpha, this._useTextScroll, true, this._hasTitle);
            this._txtContainer.padding = this._textPadding;
            this._txtContainer.paddingRight = this._textPadding + this._gapX;
            this._txtContainer.alpha = 0;
            this.addChild(this._txtContainer);
            this._txtContainer.init();
            this._txtContainer.scrollGapX = this._gapX;
            this._txtContainer.reset();

            this._image = new pinetreecom.Thumbnail(this._imageWidth, this._imageHeight, 0, 0, true, null, true);
            this._image.alpha = 0;
            this._image.x = this._gapX;
            this.addChild(this._image);

            if(this._imageHeight <= 0)
            {
                this._image.ON_LOAD_COMPLETE.add(this, this._onImageLoadComplete);
                this._image.ON_IO_ERROR.add(this, this._onImageLoadError);
            }
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p.startWith = function(imageurl, title, information)
    {
        this._hasImage = !!imageurl;

        this._title = title;
        this._information = information;

        if(this._hasImage)
        {
            this._image.load(imageurl);
        }
        else
        {
            this._onImageLoadComplete(null);
        }

        if(this._imageHeight > 0)
        {
            this._onImageLoadComplete(null);
        }
    }

    p._onImageLoadComplete = function(img)
    {
        if(this._imageWidth <= 0)
        {
            this._imageWidth = this._showWidth - 2 * this._gapX;
        }

        if(this._hasImage && this._imageHeight <= 0 && !this._imageLoadError)
        {
            if(this._imageWidth > 0)
            {
                this._imageHeight = Math.floor(this._image.originHeight / this._image.originWidth * this._imageWidth);
            }
            else
            {
                this._imageHeight = this._image.originHeight;
            }
        }
        else if(this._imageLoadError)
        {
            this._imageHeight = 0;
        }

        if(this._hasImage)
        {
            this._image.setRealFitSize(this._imageWidth, this._imageHeight);
            this._txtContainer.y = this._imageHeight + this._gapY;
        }
        else
        {
            this._txtContainer.y = 0;
        }

        this._txtContainer.title = this._title;
        this._txtContainer.information = this._information;

        this.ON_LOAD_COMPLETE.dispatch(this);

        pinetreecom.DelayCaller.delayCall(this, this._refresh, 0.1);
    }

    p._refresh = function()
    {
        this.setSize(this._showWidth, this._showHeight);
    }

    p._onImageLoadError = function(unused)
    {
        this._imageLoadError = true;
        this._onImageLoadComplete(null);
    }

    p.tweenIn = function(time, delay, ease, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(ease == undefined) ease = Quad.easeOut;

        if(time == 0 && delay == 0)
        {
            this._txtContainer.alpha = 1;
            this._hasImage && (this._image.alpha = 1);
            this._tweenInComplete(this, callback);
            return;
        }

        TweenMax.to(this._txtContainer, time, {alpha:1, delay:delay, ease:Quad.easeOut});
        this._hasImage && TweenMax.to(this._image, time, {alpha:1, delay:delay + 0.2, ease:Quad.easeOut,
            onComplete:this._tweenInComplete, onCompleteParams:[this, callback]});

        this.setSize(this._showWidth, this._showHeight);
    }

    p._tweenInComplete = function(owner, callback)
    {
        owner.resize(owner._showWidth, owner._showHeight);
        callback && callback();
    }

    p.tweenOut = function(time, delay, ease, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;
        if(ease == undefined) ease = Quad.easeOut;

        TweenMax.to(this._txtContainer, time, {alpha:0, delay:delay + 0.2, ease:Quad.easeOut,
            onComplete:this._tweenOutComplete, onCompleteParams:[this, callback]});
        this._hasImage && TweenMax.to(this._image, time, {alpha:0, delay:delay, ease:Quad.easeOut});
    }

    p._tweenOutComplete = function(owner, callback)
    {
        callback && callback();
    }

    p.setSize = function(w, h)
    {
        this._showWidth = w;
        this._showHeight = h;

        var txtHeight;
        if(this._hasImage)
        {
            this._image.setRealFitSize(this._imageWidth, this._imageHeight);
            this._txtContainer.y = this._imageHeight + this._gapY;
            txtHeight = this._showHeight - this._imageHeight - this._gapY + this._textPadding;
        }
        else
        {
            txtHeight = this._showHeight + this._textPadding;
        }

        this.setTextContainerHeight(txtHeight);
    }

    p.setTextContainerHeight = function(value)
    {
        this._textContainerHeight = value;
        this._txtContainer.contentHeight = value;
    }

    p.reset = function()
    {
        if(this._hasImage && this._image)
        {
            this._image.reset();
            this._image.alpha = 0;
        }

        if(this._txtContainer)
        {
            this._txtContainer.reset();
            this._txtContainer.alpha = 0;
        }

        this.height = 1;
    }

    p.dispose = function()
    {
        this._image && TweenMax.killTweensOf(this._image);
        this._image && this._image.dispose();
        this._image = null;

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        this._txtContainer && TweenMax.killTweensOf(this._txtContainer);
        this._txtContainer && this._txtContainer.dispose();
        this._txtContainer = null;

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.ImageTextContainer = ImageTextContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-20.
 */
(function()
{
    var ListItemBase = function()
    {
        pinetreecom.UIComponent.call(this);

        this._originX = 0;
        this._originY = 0;

        this._originParent = null;

        this._itemWidth = 0;
        this._itemHeight = 0;
        this._data = null;

        this._isFiltered = false;

        this._isOverState = false;

        this.index = 0;

        this._enabled = true;
        this._isAnimationIn = false;

        this._isShown = false;
        this._isFullShown = false;

        __defineGetterSetter(this, ["data", "originX", "originY", "originWidth", "originHeight",
            "thumbnail", "enable", "originParent", "currentWidth", "currentHeight", "isFiltered",
            "isOverState"
        ]);
    }

    var p = __extends(ListItemBase, pinetreecom.UIComponent);

    p.setUpWith = function(w, h, data)
    {
        this._itemWidth = w;
        this._itemHeight = h;
        this._data = data;
    };

    /**
     *
     * @param itemWidth
     * @param itemHeight
     */
    p.resetSize = function(itemWidth, itemHeight)
    {

    }

    /**
     *
     * @param w, showWidth, maybe the stage width
     * @param h, showHeight, maybe the stage height
     */
    p.resize = function(w, h)
    {

    }

    p.setOriginParent = function(value)
    {
        this._originParent = value;
    }

    p.addToParent = function()
    {
        if(this._originParent && !this._originParent.contains(this))
            this._originParent.addChild(this);
    }

    p.load = function()
    {

    };

    p.onMouseOver = function(evt)
    {

    }

    p.onMouseOut = function(evt)
    {

    }

    p.onMouseClick = function(evt)
    {

    }

    p.getOriginX = function() { return this._originX; }
    p.setOriginX = function(value)
    {
        this._originX = value;
    };

    p.getOriginY = function() { return this._originY; }
    p.setOriginY = function(value)
    {
        this._originY = value;
    };

    p.getData = function()
    {
        return this._data;
    }

    p.getIsFiltered = function()
    {
        return this._isFiltered;
    }

    p.updateFilterKey = function(key)
    {

    }

    p.updateFilterState = function(value)
    {

    }

    p.getThumbnail = function()
    {
        return null;
    };

    p.getOriginWidth = function()
    {
        return 0;
    }

    p.getOriginHeight = function()
    {
        return 0;
    }

    p.getCurrentWidth = function()
    {
        return 0;
    }

    p.getCurrentHeight = function()
    {
        return 0;
    }

    p.getIsOverState = function()
    {
        return this._isOverState;
    }

    p.animationIn = function(time, delay, transition, callback)
    {

    };

    p.animationOut = function(time, delay, transition, callback)
    {

    };

    p.getEnable = function() { return this._enabled; };
    p.setEnable = function(value)
    {
        this._enabled = value;

        this.mouseEnabled = this.mouseChildren = value;

        if(this._enabled)
        {
            this.addToParent();
        }
        else
        {
            //this.onSetEnableComplete();
        }
    };

    p.updateOverState = function(isOverState)
    {

    }

    /**
     * This method will be called only after the item has been animated in!
     * @param isShown
     * @param isFullShown
     */
    p.setState = function(isShown, isFullShown)
    {

    }

    /**
     * This method will be called all the time even if the item has not been animated in yet!
     * @param isShown
     * @param isFullShown
     */
    p.updateState = function(isShown, isFullShown)
    {
        this._isShown = isShown;
        this._isFullShown = isFullShown;
    }

    p.getStageX = function()
    {
        if(this._originParent)
        {
            var parentStageX = pinetreecom.CommonUtil.getStageX(this._originParent);
            return parentStageX + this.x;
        }

        return 0;
    }

    p.getStageY = function()
    {
        if(this._originParent)
        {
            var parentStageY = pinetreecom.CommonUtil.getStageY(this._originParent);
            return parentStageY + this.y;
        }

        return 0;
    }

    p.onSetEnableComplete = function()
    {
        this.removeFromParent();
    }

    p.dispose = function()
    {
        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.ListItemBase = ListItemBase;
})();

/**
 * Created by pineree on 14-5-20.
 */
(function()
{
	var ListBase = function()
	{
        pinetree.Sprite.call(this);

        this.isSetupInited = false;

		this._data = null;
		this._dataCount = 0;

		this._itemWidth = 0;
		this._itemHeight = 0;
		this._itemGapX = 0;
		this._itemGapY = 0;

		this._showWidth = 0;
		this._showHeight = 0;

		this._currentPos = 0;

		this._loadedIndex = 0;

		this._alignDirection = "";
		this._rowColumn = 0;

        this.loadOneByOne = false;

		this._clipContent = true;

		this._shownCount = 0;

		this._tweenIndex = 0;
		this._tweenCount = 0;

        this._loadCount = 0;
        this._loaders = null;

		this._items = null;

		this.animateTime = 1.0;
		this.animateDelay = 0.1;

        this.transition = Quad.easeOut;
        this.tweenTime = 1.0;

        this._isAnimationIn = false;
        this._firstCompleted = false;

        this._container = new pinetree.Sprite();
        this._itemContainer = new pinetree.Sprite();

        this._container.addChild(this._itemContainer);
        this.addChild(this._container);

        this._container.htmlStyle.webkitTransform = "translate3d(0, 0, 0)";

        this.ON_CLICK = new pinetree.Signal();
        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();
        this.ON_TWEEN_IN_COMPLETE = new pinetree.Signal();
        this.ON_TWEEN_OUT_COMPLETE = new pinetree.Signal();
        this.ON_LOAD_FIRST_PAGE_COMPLETE = new pinetree.Signal();
        this.ON_NEED_RESIZE = new pinetree.Signal();

        __defineGetterSetter(this, ["hasPreviousContent", "hasNextContent", "itemGapX", "itemGapY",
            "contentWidth", "contentHeight", "container", "isAnimationIn", "firstPageLoadCount"
        ]);
    }

    //static properties. you can only via Class.property or Class['property'] to read or write these properties.
    ListBase.ANI_DIRECTION_TOP2BOTTOM = "topToBottom";
    ListBase.ANI_DIRECTION_BOTTOM2TOP = "bottomToTop";
    ListBase.ANI_DIRECTION_LEFT2RIGHT = "leftToRight";
    ListBase.ANI_DIRECTION_RIGHT2LEFT = "rightToLeft";

    var p = __extends(ListBase, pinetree.Sprite);

    p.reset = function()
    {
        this._loadCount = 0;

        this._loaders && this._loaders.splice(0, this._loaders.length);
        this._loaders = null;

        if(this._items && this._items.length > 0)
        {
            var key, item;
            for(key in this._items)
            {
                item = this._items[key];
                if(item)
                {
                    TweenMax.killTweensOf(item);
                    item.removeEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
                    item.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
                    item.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
                    item.dispose();
                    item = null;
                }
            }

            this._items.splice(0, this._items.length);
            this._items = null;
        }
        this._itemContainer.removeAllChildren();

        this.isSetupInited = false;
    }

    p.setUpWith = function(itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
                              rowColumn, data, showWidth, showHeight, clipContent)
    {
        this.isSetupInited = true;

        this._itemWidth = itemWidth;
        this._itemHeight = itemHeight;
        this._itemGapX = gapX;
        this._itemGapY = gapY;
        this._rowColumn = rowColumn;
        this._showWidth = showWidth;
        this._showHeight = showHeight;
        this._alignDirection = alignDirection;
        this._clipContent = !!clipContent;

        if(this._clipContent)
        {
            this.clip = new pinetree.Rectangle(0, 0, this._showWidth, this._showHeight);
            this.width = this._showWidth;
            this.height = this._showHeight;
        }

        this._data = data;
        this._dataCount = this._data.length;

        this._items = [];
        this._loaders = [];
        this._loadCount = 0;

        this._itemContainer.removeAllChildren();

        this._firstCompleted = false;
        this._loadedIndex = 0;
    }

    p.onLoadNext = function()
    {
        if(this._loadedIndex < this._loadCount)
        {
            this._loaders[this._loadedIndex].load();
        }
    }

    p.onLoadComplete = function()
    {
        if(this._loadCount <= 0) return;

        if (this._loadedIndex >= this.firstPageLoadCount - 1 && !this._firstCompleted)
        {
            this.ON_LOAD_FIRST_PAGE_COMPLETE.dispatch();
            this._firstCompleted = true;
        }

        this._loadedIndex ++;
        this.onLoadNext();
    }

    p.onLoadError = function(unused)
    {
        if(this._loadCount <= 0) return;

        trace("warning: IOError at ListBase::onLoadError");

        if (this._loadedIndex >= this.firstPageLoadCount - 1 && !this._firstCompleted)
        {
            this.ON_LOAD_FIRST_PAGE_COMPLETE.dispatch();
            this._firstCompleted = true;
        }


        this._loadedIndex ++;
        this.onLoadNext();
    }

    p.onClickItem = function(evt)
    {
        var item = evt.customTarget;
        if(item)
        {
            this.ON_CLICK && this.ON_CLICK.dispatch(item.index);
            item.onMouseClick(evt);
        }
    }

    p.onOver = function(evt)
    {
        var item = evt.customTarget;
        if(item)
        {
            this.ON_OVER && this.ON_OVER.dispatch(item.index);
            item.onMouseOver(evt);
        }
    }

    p.onOut = function(evt)
    {
        var item = evt.customTarget;
        if(item)
        {
            this.ON_OUT && this.ON_OUT.dispatch(item.index);
            item.onMouseOut(evt);
        }
    }

    p.getItemByIndex = function(index)
    {
        if(!this._items) return null;

        return this._items[index];
    }

    p.getAllItems = function()
    {
        return this._items;
    }

    p.getFirstPageLoadCount = function()
    {
        return this._shownCount;
    }

    p.prev = function()
    {
        if(!this.hasPreviousContent) return;

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
        {
            this._currentPos += (this._itemHeight + this._itemGapY);
            if(this._currentPos > 0) this._currentPos = 0;

            TweenMax.to(this._itemContainer, this.tweenTime, {y:this._currentPos, ease:this.transition});
        }
        else
        {
            this._currentPos += (this._itemWidth + this._itemGapX);
            if(this._currentPos > 0) this._currentPos = 0;

            TweenMax.to(this._itemContainer, this.tweenTime, {x:this._currentPos, ease:this.transition});
        }

        this.ON_NEED_RESIZE.dispatch();
    }

    p.next = function()
    {
        if(! this.hasNextContent) return;

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
        {
            this._currentPos -= (this._itemHeight + this._itemGapY);
            TweenMax.to(this._itemContainer, this.tweenTime, {y: this._currentPos, ease: this.transition});
        }
        else
        {
            this._currentPos -= (this._itemWidth + this._itemGapX);
            TweenMax.to(this._itemContainer, this.tweenTime, {x: this._currentPos, ease: this.transition});
        }

        this.ON_NEED_RESIZE.dispatch();
    }

    p.getHasPreviousContent = function()
    {
        return  this._currentPos < 0;
    }

    p.getHasNextContent = function()
    {
        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            return  this._currentPos +  this.contentHeight > this._showHeight;

        return  this._currentPos +  this.contentWidth > this._showWidth;
    }

    p.getItemGapX = function()
    {
        return this._itemGapX;
    }

    p.getItemGapY = function()
    {
        return this._itemGapY;
    }

    p.getContainer = function()
    {
        return this._container;
    }

    p.getContentWidth = function()
    {
        var w =  this._items &&  this._items[0] ?  this._items[0].width : this._itemWidth;
        var column;
        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            column = this._rowColumn;
        else
            column = Math.ceil(this._dataCount / this._rowColumn);

        return column * (w + this._itemGapX) - this._itemGapX;
    }

    p.getContentHeight = function()
    {
        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            return Math.ceil(this._dataCount / this._rowColumn) * (this._itemHeight + this._itemGapY) - this._itemGapY;

        var len = this._dataCount < this._rowColumn ? this._dataCount : this._rowColumn;
        return len * (this._itemHeight + this._itemGapY) - this._itemGapY;
    }

    p.getIsAnimationIn = function()
    {
        return this._isAnimationIn;
    }

    p.resize = function(showWidth, showHeight)
    {
        this._showWidth = showWidth;
        this._showHeight = showHeight;

        if(this._clipContent)
        {
            this.clip = new pinetree.Rectangle(0, 0, this._showWidth, this._showHeight);
            this.width = this._showWidth;
            this.height = this._showHeight;
        }
    }

    p.animationIn = function(direction, time, transition, callback)
    {
        this._isAnimationIn = true;
    }

    p.onAnimationInComplete = function(callback)
    {
        this._tweenIndex ++;
        if(this._tweenIndex ==  this._tweenCount)
        {
            this.ON_TWEEN_IN_COMPLETE.dispatch();
            callback && callback();
        }
    }

    p.animationOut = function(direction, time, transition, callback)
    {
        this._isAnimationIn = false;
    }

    p.onAnimationOutComplete = function(callback)
    {
        this._tweenIndex ++;
        if(this._tweenIndex ==  this._tweenCount)
        {
            this.ON_TWEEN_OUT_COMPLETE.dispatch();
            callback && callback();
        }
    }

    p.dispose = function()
    {
        this._loadCount = 0;

        this._loaders && this._loaders.splice(0, this._loaders.length);
        this._loaders = null;

        if(this._items)
        {
            var key, item;
            for(key in this._items)
            {
                item = this._items[key];
                if(item)
                {
                    TweenMax.killTweensOf(item);
                    item.removeEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
                    item.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
                    item.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
                    item.dispose();
                    item = null;
                }
            }

            this._items.splice(0, this._items.length);
            this._items = null;
        }

        this._itemContainer.removeAllChildren();
        TweenMax.killTweensOf(this._itemContainer);

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_CLICK = null;

        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OVER = null;

        this.ON_OUT && this.ON_OUT.removeAll();
        this.ON_OUT = null;

        this.ON_NEED_RESIZE && this.ON_NEED_RESIZE.removeAll();
        this.ON_NEED_RESIZE = null;

        this.ON_TWEEN_IN_COMPLETE && this.ON_TWEEN_IN_COMPLETE.removeAll();
        this.ON_TWEEN_IN_COMPLETE = null;

        this.ON_TWEEN_OUT_COMPLETE && this.ON_TWEEN_OUT_COMPLETE.removeAll();
        this.ON_TWEEN_OUT_COMPLETE = null;

        this.ON_LOAD_FIRST_PAGE_COMPLETE && this.ON_LOAD_FIRST_PAGE_COMPLETE.removeAll();
        this.ON_LOAD_FIRST_PAGE_COMPLETE = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ListBase = ListBase;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-5-29.
 */
(function()
{
    var ButtonItemBase = function(onOverColor, onOutColor, onOverAlpha, onOutAlpha, size)
    {
        pinetree.Sprite.call(this);

        this.selectable = false;

        this._enabled = true;
        this._index = 0;

        this.tweenTime = 0.5;
        this.transition = Quad.easeOut;

        this.onOverColor = onOverColor == undefined ? 0xffffff : onOverColor;
        this.onOutColor = onOutColor == undefined ? 0xffffff : onOutColor;

        this.onOverAlpha = onOverAlpha == undefined ? 1.0 : onOverAlpha;
        this.onOutAlpha = onOutAlpha == undefined ? 0.8 : onOutAlpha;

        this.size = size == undefined ? 10 : size;

        this.disabledAlpha = 0.3;

        this.buttonMode = true;

        this.target = null;

        __defineGetterSetter(this, ["index", "isEnabled"]);
    }

    var p = __extends(ButtonItemBase, pinetree.Sprite);

    p.init = function()
    {

    }

    p.getIndex = function() { return this._index; };
    p.setIndex = function(value)
    {
        this._index = value;
    }

    p.getIsEnabled = function() { return this._enabled; };
    p.setIsEnabled = function(value)
    {
        this._enabled = value;
        if(this.target)
        {
            this.target.alpha = this._enabled ? 1 : this.disabledAlpha;
        }
    }

    p.animationIn = function(callback)
    {

    }
    
    p.animationOut = function(callback)
    {

    }
    
    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }
    
    pinetreecom.ButtonItemBase = ButtonItemBase;
})();



/**
 * Created by foreverpinetree@gmail.com on 14-5-29.
 */
(function()
{
    var MiniCircle = function(onOverColor, onOutColor, onOverAlpha, onOutAlpha, size, bgSize, bgAlpha)
    {
        pinetreecom.ButtonItemBase.call(this, onOverColor, onOutColor, onOverAlpha, onOutAlpha, size);

        this._btnContainer = new pinetree.Sprite();
        this.addChild(this._btnContainer);

        this._size = size;

        this._circle = new pinetree.CanvasCircle(size >> 1, true);
        this._btnContainer.addChild(this._circle);

        this._circleBg = new pinetree.CanvasCircle(bgSize == undefined ? (size >> 1) + 5 : bgSize, true);
        this._circleBg.alpha = bgAlpha || 0;
        this._btnContainer.addChildAt(this._circleBg, 0);

        this._btnContainer.visible = false;

        this.target = this._circle;

        this._btnContainer.buttonMode = true;
    }

    var p = __extends(MiniCircle, pinetreecom.ButtonItemBase);

    p.init = function()
    {
        this._circle.color = this.onOutColor;
        this._btnContainer.alpha = this.onOutAlpha;
        this._btnContainer.visible = true;
    }

    p.getWidth = function()
    {
        return this._size;
    }

    p.getHeight = function()
    {
        return this._size;
    }

    p.setIsEnabled = function(value)
    {
        pinetreecom.ButtonItemBase.prototype.setIsEnabled.call(this, value);
    }

    p.animationIn = function(callback)
    {
        TweenMax.to(this._btnContainer, this.tweenTime / 2, {alpha:this.onOverAlpha, ease:this.transition, onComplete:callback});
        this._circle.tweenColor(this.onOverColor, this.tweenTime / 2);
    }

    p.animationOut = function(callback)
    {
        var alpha = this._isEnabled ? 1 : this.onOutAlpha;
        TweenMax.to(this._btnContainer, this.tweenTime / 2, {alpha:this.onOutAlpha, ease:this.transition, onComplete:callback});
        this._circle.tweenColor(this.onOutColor, this.tweenTime / 2);
    }

    p.dispose = function()
    {
        this._circle && this._circle.dispose();
        this._circle = null;

        pinetreecom.ButtonItemBase.prototype.dispose.call(this);
    }

    pinetreecom.MiniCircle = MiniCircle;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-29.
 */
(function()
{
    var ButtonList = function(btnClass, count)
    {
        pinetree.Sprite.call(this);

        this._disposed = false;
        
		this._buttons = null;
		this._prevIndex = 1;
		this._currentIndex = 1;
		
		this._isInited = false;
        this._isShowing = false;
		
		this.tweenTime = 0.5;
		this.transition = Quad.easeOut;

        this.onOverColor = 0xffffff;
        this.onOutColor = 0xffffff;
        this.onOverAlpha = 1.0;
        this.onOutAlpha = 0.8;
        this.itemSize = 10;

        this._contentWidth = 0;
        this._contentHeight = 0;

		this.gap = 5;
		this.buttonSize = 0;//for align
		this.alignType = pinetreecom.ButtonList.ALIGN_HORIZONTAL;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);
        this._btnClass = btnClass || null;
        this._count = count;

        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();
        this.ON_CLICK = new pinetree.Signal();

        __defineGetterSetter(this, ["currentIndex", "prevIndex", "container", "count", "contentWidth", "contentHeight"]);
    }

    ButtonList.ALIGN_HORIZONTAL = "horizontal";
    ButtonList.ALIGN_VERTICAL = "vertical";

    var p = __extends(ButtonList, pinetree.Sprite);

    p.reset = function()
    {
        this._clear();
        this._isInited = false;
    }

    p.setCount = function(value)
    {
        if(value == this._count)
        {
            return;
        }

        if(!this._buttons)
        {
            this._buttons = [];
        }

        var i, btn;
        if(value > this._count)
        {
            for (i = this._count; i < value; i++)
            {
                btn = new this._btnClass(this.onOverColor, this.onOutColor, this.onOverAlpha, this.onOutAlpha, this.itemSize);
                btn.alpha = this._isShowing ? 1 : 0;

                if(!(btn instanceof pinetreecom.ButtonItemBase))
                {
                    trace("Error: at ButtonList::init(), btn is not instance of pinetreecom.ButtonItemBase!");
                    return;
                }

                btn.index = i;
                btn.init();
                this._container.addChild(btn);

                if(this.alignType == pinetreecom.ButtonList.ALIGN_HORIZONTAL)
                {
                    if(this.buttonSize == 0) this.buttonSize = btn.width;
                    btn.x = i * (this.buttonSize + this.gap);
                }
                else
                {
                    if(this.buttonSize == 0) this.buttonSize = btn.height;
                    btn.y = i * (this.buttonSize + this.gap);
                }

                btn.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOverButton, this);
                btn.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutButton, this);
                btn.addEventListener(pinetree.MouseEvent.CLICK, this.onClickButton, this);

                this._buttons.push(btn);
            }
        }
        else
        {
            for(i = value; i < this._count; i ++)
            {
                btn = this._buttons[i];
                if(btn)
                {
                    TweenMax.killTweensOf(btn);

                    btn.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOverButton, this);
                    btn.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutButton, this);
                    btn.removeEventListener(pinetree.MouseEvent.CLICK, this.onClickButton, this);
                    btn.removeFromParent(true);
                    btn = null;
                }
            }

            this._buttons.splice(value, this._count - value);
        }

        this._count = value;

        if(this.alignType == pinetreecom.ButtonList.ALIGN_HORIZONTAL)
        {
            this._contentWidth = this._count * (this.buttonSize + this.gap) - this.gap;
            this._contentHeight = btn ? btn.height : this.buttonSize;
        }
        else
        {
            this._contentWidth = btn ? btn.width : this.buttonSize;
            this._contentHeight = this._count * (this.buttonSize + this.gap) - this.gap;
        }
    }

    p.init = function()
    {
        if(this._isInited)
        {
            trace("Error: at ButtonList::init(), it has been inited!");
            return;
        }

        if(!this._btnClass)
        {
            trace("Error: at ButtonList::init(), btnClass is null!");
            return;
        }

        this._isInited = true;

        var i, btn;
        this._buttons = [];
        for (i = 0; i < this._count; i++)
        {
            btn = new this._btnClass(this.onOverColor, this.onOutColor, this.onOverAlpha, this.onOutAlpha, this.itemSize);
            btn.alpha = 0;

            if(!(btn instanceof pinetreecom.ButtonItemBase))
            {
                trace("Error: at ButtonList::init(), btn is not instance of pinetreecom.ButtonItemBase!");
                return;
            }

            btn.index = i;
            btn.init();
            this._container.addChild(btn);

            if(this.alignType == pinetreecom.ButtonList.ALIGN_HORIZONTAL)
            {
                if(this.buttonSize == 0) this.buttonSize = btn.width;
                btn.x = i * (this.buttonSize + this.gap);
            }
            else
            {
                if(this.buttonSize == 0) this.buttonSize = btn.height;
                btn.y = i * (this.buttonSize + this.gap);
            }

            btn.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOverButton, this);
            btn.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutButton, this);
            btn.addEventListener(pinetree.MouseEvent.CLICK, this.onClickButton, this);

            this._buttons.push(btn);
        }

        if(this.alignType == pinetreecom.ButtonList.ALIGN_HORIZONTAL)
        {
            this._contentWidth = this._count * (this.buttonSize + this.gap) - this.gap;
            this._contentHeight = btn ? btn.height : this.buttonSize;
        }
        else
        {
            this._contentWidth = btn ? btn.width : this.buttonSize;
            this._contentHeight = this._count * (this.buttonSize + this.gap) - this.gap;
        }
    }

    p.setEnabledByIndex = function(index, value)
    {
        var btn = this._buttons[index];
        if(btn)
        {
            btn.isEnabled = value;
            btn.mouseEnabled = btn.mouseChildren = btn.index != this._currentIndex;
        }
    }

    p.getContentWidth = function()
    {
        return this._contentWidth;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.onOverButton = function(evt)
    {
        var btn = evt.customTarget;
        if (!btn.mouseEnabled || !btn.isEnabled) return;

        btn.animationIn();

        this.ON_OVER.dispatch(btn.index);
    }

    p.onOutButton = function(evt)
    {
        var btn = evt.customTarget;
        if (!btn.mouseEnabled || !btn.isEnabled) return;

        btn.animationOut();

        this.ON_OUT.dispatch(btn.index);
    }

    p.onClickButton = function(evt)
    {
        var btn = evt.customTarget;
        if (!btn.mouseEnabled || !btn.isEnabled) return;

        var index = btn.index;
        this._prevIndex = this._currentIndex;
        this._currentIndex = index;
        this.setSelectBtn(index);

        this.ON_CLICK.dispatch( { index:this._currentIndex, prevIndex:this._prevIndex} );
    }

    p.setSelectBtn = function(index)
    {
        var selectBtn = this._buttons[index];
        if(!selectBtn) return;

        selectBtn.mouseEnabled = selectBtn.mouseChildren = false;
        selectBtn.animationIn();

        var btn;
        var i;
        for (i = 0; i < this._count; i++)
        {
            btn = this._buttons[i];
            if (i != index)
            {
                btn.mouseEnabled = btn.mouseChildren = btn.isEnabled;
                btn.animationOut();
            }
        }

        this._currentIndex = index;
    }

    p.show = function(callback)
    {
        this._isShowing = true;

        var i, btn;
        for (i = this._count - 1; i >= 0; i--)
        {
            btn = this._buttons[i];
            btn.visible = true;
            TweenMax.to(btn, this.tweenTime, {alpha:1, delay:i * 0.03, ease:this.transition,
                onComplete:this._showComplete, onCompleteParams:[callback, i, this._count - 1] } );
        }
    }

    p._showComplete = function(callback, index, endIndex)
    {
        if (callback && index == endIndex) callback();
    }

    p.hide = function(callback)
    {
        this._isShowing = false;

        var i, btn;
        for (i = 0; i < this._count; i++)
        {
            btn = this._buttons[i];
            TweenMax.to(btn, this.tweenTime, {alpha:0, delay:(this._count - 1 - i) * 0.03, ease:this.transition,
                onComplete:this._hideComplete, onCompleteParams:[btn, callback, i, 0] } );
        }
    }

    p._hideComplete = function(btn, callback, index, endIndex)
    {
        btn.visible = false;
        if (callback && index == endIndex) callback();
    }

    p.getCurrentIndex = function()
    {
        return this._currentIndex;
    }

    p.getPrevIndex = function()
    {
        return this._prevIndex;
    }

    p.getContainer = function()
    {
        return this._container;
    }

    p.getBtnByNodeIndex = function(index)
    {
        return this._buttons[index];
    }

    p.getButtons = function()
    {
        return this._buttons;
    }

    p._clear = function()
    {
        if(!this._buttons) return;

        var i, btn, len = this._buttons.length;
        for (i = 0; i < len; i++)
        {
            btn = this._buttons[i];
            if(btn)
            {
                TweenMax.killTweensOf(btn);

                btn.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOverButton, this);
                btn.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutButton, this);
                btn.removeEventListener(pinetree.MouseEvent.CLICK, this.onClickButton, this);
                btn.removeFromParent(true);
                btn = null;
            }
        }

        this._buttons.splice(0, len);
        this._buttons = null;

        this._count = 0;
    }

    p.dispose = function()
    {
        if(this._disposed) return;
        this._disposed = true;

        this._clear();
        this._btnClass = null;
        this._isInited = false;

        this.ON_OVER.removeAll();
        this.ON_OVER = null;
        this.ON_OUT.removeAll();
        this.ON_OUT = null;
        this.ON_CLICK.removeAll();
        this.ON_CLICK = null;
    }

    pinetreecom.ButtonList = ButtonList;
})();

/**
 * Created by foreverpinetree@gmail.com on 2014/12/21.
 */
(function()
{
    var ColorRectTexture = function(w, h, color, alpha)
    {
        var canvas = pinetree.createCanvas(w, h);
        var context = canvas.getContext("2d");
        context.fillStyle = pinetree.getRGBA(color, alpha);
        context.rect(0, 0, w, h);
        context.fill();

        var imageData = context.getImageData(0, 0, w, h);
        pinetree.Texture.call(this, imageData);
    }

    __extends(ColorRectTexture, pinetree.Texture);

    pinetreecom.ColorRectTexture = ColorRectTexture;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-21.
 */
(function()
{
    var TextureButton = function(onOverIconColor, onOutIconColor, onOverBgColor, onOutBgColor,
                                 onOverIconAlpha, onOutIconAlpha, onOverBgAlpha, onOutBgAlpha,
                                 needBindMouseEvent
    )
    {
        pinetree.Sprite.call(this);

        this.selectable = false;

        this.onOverIconColor = onOverIconColor || 0;
        this.onOutIconColor = onOutIconColor || 0;
        this.onOverBgColor = onOverBgColor || 0;
        this.onOutBgColor = onOutBgColor || 0;

        this.onOverIconAlpha = onOverIconAlpha == undefined ? 1.0 : onOverIconAlpha;
        this.onOutIconAlpha = onOutIconAlpha == undefined ? 1.0 : onOutIconAlpha;
        this.onOverBgAlpha = onOverBgAlpha == undefined ? 1.0 : onOverBgAlpha;
        this.onOutBgAlpha = onOutBgAlpha == undefined ? 1.0 : onOutBgAlpha;

        this._bgTextureImg = null;
        this._iconTextureImg = null;

        this._iconTweener = null;
        this._bgTweener = null;

        this._isOver = false;

        this._needBindMouseEvent = needBindMouseEvent == undefined ? true : !!needBindMouseEvent;

        if(this._needBindMouseEvent)
        {
            if(!pinetree.isDevice)
            {
                this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
                this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            }
            else
            {
                this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this.onOver, this);
                this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this.onOut, this);
            }
        }

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.buttonMode = true;
        this.alpha = 0;
        this.visible = false;

        __defineGetterSetter(this, ["isOver", "icon", "bg", "isShowing"]);
    }

    var p = __extends(TextureButton, pinetree.Sprite);

    p.setTextures = function(iconTexture, bgTexture, iconCenter)
    {
        this.removeAllChildren();

        if(bgTexture)
        {
            this._bgTextureImg = new pinetree.TextureImage(bgTexture);
            this.addChild(this._bgTextureImg);

            pinetreecom.ColorUtil.setColor(this._bgTextureImg, this.onOutBgColor);
            this._bgTextureImg.alpha = this.onOutBgAlpha;
        }
        else
        {
            this._bgTextureImg = null;
        }

        if(!!iconTexture)
        {
            this._iconTextureImg = new pinetree.TextureImage(iconTexture);
            this.addChild(this._iconTextureImg);

            pinetreecom.ColorUtil.setColor(this._iconTextureImg, this.onOutIconColor);
            this._iconTextureImg.alpha = this.onOutIconAlpha;
        }
        else
        {
            this._iconTextureImg = null;
        }

        if(!!iconCenter && this._iconTextureImg && this._bgTextureImg)
        {
            this._iconTextureImg.x = (this._bgTextureImg.width - this._iconTextureImg.width) >> 1;
            this._iconTextureImg.y = (this._bgTextureImg.height - this._iconTextureImg.height) >> 1;
        }
    }

    p.onOver = function(evt)
    {
        if(this._needBindMouseEvent && pinetree.isDevice && evt && evt.type != pinetree.MouseEvent.MOUSE_DOWN)
        {
            return;
        }

        if(this._iconTweener)
        {
            this._iconTweener.dispose();
            this._iconTweener = null;
        }

        if(this._iconTextureImg)
        {
            this._iconTweener = pinetreecom.ColorTweener.addTween(this._iconTextureImg,
                this.onOutIconColor, this.onOverIconColor, this.tweenTime / 2, 0, null, this.transition);

            TweenMax.killTweensOf(this._iconTextureImg, false, {alpha:true});
            TweenMax.to(this._iconTextureImg, this.tweenTime / 2, {alpha:this.onOverIconAlpha, ease:this.transition});
        }

        if(this._bgTweener)
        {
            this._bgTweener.dispose();
            this._bgTweener = null;
        }

        if(this._bgTextureImg)
        {
            this._bgTweener = pinetreecom.ColorTweener.addTween(this._bgTextureImg,
                this.onOutBgColor, this.onOverBgColor, this.tweenTime / 2, 0, null, this.transition);

            TweenMax.killTweensOf(this._bgTextureImg, false, {alpha:true});
            TweenMax.to(this._bgTextureImg, this.tweenTime / 2, {alpha:this.onOverBgAlpha, ease:this.transition});
        }

        this._isOver = true;
    }

    p.onOut = function(evt)
    {
        if(this._iconTweener)
        {
            this._iconTweener.dispose();
            this._iconTweener = null;
        }

        if(this._iconTextureImg)
        {
            this._iconTweener = pinetreecom.ColorTweener.addTween(this._iconTextureImg,
                this.onOverIconColor, this.onOutIconColor, this.tweenTime / 2, 0, null, this.transition);

            TweenMax.killTweensOf(this._iconTextureImg, false, {alpha:true});
            TweenMax.to(this._iconTextureImg, this.tweenTime / 2, {alpha:this.onOutIconAlpha, ease:this.transition});
        }

        if(this._bgTweener)
        {
            this._bgTweener.dispose();
            this._bgTweener = null;
        }

        if(this._bgTextureImg)
        {
            this._bgTweener = pinetreecom.ColorTweener.addTween(this._bgTextureImg,
                this.onOverBgColor, this.onOutBgColor, this.tweenTime / 2, 0, null, this.transition);

            TweenMax.killTweensOf(this._bgTextureImg, false, {alpha:true});
            TweenMax.to(this._bgTextureImg, this.tweenTime / 2, {alpha:this.onOutBgAlpha, ease:this.transition});
        }

        this._isOver = false;
    }

    p.getIcon = function()
    {
        return this._iconTextureImg;
    }

    p.getBg = function()
    {
        return this._bgTextureImg;
    }

    p.show = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        this._isShowing = true;

        this.visible = true;
        TweenMax.to(this, time, {alpha:1, ease:transition, delay:delay, onComplete:this._onShowComplete,
            onCompleteParams:[this, callback]})
    }

    p._onShowComplete = function(target, callback)
    {
        callback && callback();
    }

    p.hide = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        this._isShowing = false;

        TweenMax.to(this, time, {alpha:0, ease:transition, delay:delay, onComplete:this._onHideComplete,
            onCompleteParams:[this, callback]})
    }

    p._onHideComplete = function(target, callback)
    {
        target.visible = false;
        callback && callback();
    }

    p.getIsOver = function()
    {
        return this._isOver;
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.dispose = function()
    {
        if(this._iconTweener)
        {
            this._iconTweener.dispose();
            this._iconTweener = null;
        }

        if(this._bgTweener)
        {
            this._bgTweener.dispose();
            this._bgTweener = null;
        }

        if(this._iconTextureImg)
        {
            TweenMax.killTweensOf(this._iconTextureImg, false, {alpha:true});
            this._iconTextureImg = null;
        }

        if(this._bgTextureImg)
        {
            TweenMax.killTweensOf(this._bgTextureImg, false, {alpha:true});
            this._bgTextureImg = null;
        }

        this.buttonMode = false;

        if(this._needBindMouseEvent)
        {
            if(!pinetree.isDevice)
            {
                this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
                this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            }
            else
            {
                this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this.onOver, this);
                this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this.onOut, this);
            }
        }
    }

    pinetreecom.TextureButton = TextureButton;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-7-9.
 */
(function()
{
    var TextButton = function(w, h, gapX, gapY, textX, textY, fontSize, bold, bgTextureBtn, isStroke, thickness,
                              onOverTextColor, onOutTextColor, onOverBgColor, onOutBgColor,
                              onOverTextAlpha, onOutTextAlpha, onOverBgAlpha, onOutBgAlpha,
                              onOverStrokeColor, onOutStrokeColor, onOverStrokeAlpha, onOutStrokeAlpha,
                              radiusTL, radiusTR, radiusBL, radiusBR,
                              bindMouseEvent
    )
    {
        pinetree.Sprite.call(this);

        this._width = w || 0;
        this._height = h || 0;
        this.gapX = __defaultSet(gapX, 10);
        this.gapY = __defaultSet(gapY, 10);
        this.textX = __defaultSet(textX, 0);
        this.textY = __defaultSet(textY, 0);
        this.fontSize = __defaultSet(fontSize, 14);
        this._isStroke = __defaultSet(isStroke, false);
        this._thickness = __defaultSet(thickness, 1);
        this.bold = !!bold;
        this.onOverTextColor = onOverTextColor || 0;
        this.onOutTextColor = onOutTextColor || 0;
        this.onOverBgColor = onOverBgColor || 0;
        this.onOutBgColor = onOutBgColor || 0;
        this.onOverTextAlpha = __defaultSet(onOverTextAlpha, 1.0);
        this.onOutTextAlpha = __defaultSet(onOutTextAlpha, 1.0);
        this.onOverBgAlpha = __defaultSet(onOverBgAlpha, 1.0);
        this.onOutBgAlpha = __defaultSet(onOutBgAlpha, 1.0);
        this.onOverStrokeColor = onOverStrokeColor || 0;
        this.onOutStrokeColor = onOutStrokeColor || 0;
        this.onOverStrokeAlpha = __defaultSet(onOverStrokeAlpha, 1.0);
        this.onOutStrokeAlpha = __defaultSet(onOutStrokeAlpha, 1.0);
        this.radiusTL = __defaultSet(radiusTL, 0);
        this.radiusTR = __defaultSet(radiusTR, 0);
        this.radiusBL = __defaultSet(radiusBL, 0);
        this.radiusBR = __defaultSet(radiusBR, 0);
        this._bindMouseEvent = __defaultSet(bindMouseEvent, true);

        this._bg = bgTextureBtn || null;
        this._strokeBg = null;

        this._text = "";
        this._txt = null;

        this.tweenTime = 0.5;

        this._init();

        __defineGetterSetter(this, ["text"]);
    }

    var p = __extends(TextButton, pinetree.Sprite);

    p._init = function()
    {
        if(!this._bg)
        {
            this._bg = new pinetree.CanvasQuad(this.radiusTL, this.radiusTR, this.radiusBL, this.radiusBR);
            this._bg.color = this.onOutBgColor;
            this._bg.alpha = this.onOutBgAlpha;
            this._bg.width = this._width;
            this._bg.height = this._height;
            this._bg.selectable = false;
        }
        this.addChild(this._bg);

        if(this._isStroke)
        {
            this._strokeBg = new pinetree.CanvasQuad(this.radiusTL, this.radiusTR, this.radiusBL, this.radiusBR,
                true, this._thickness);
            this.addChild(this._strokeBg);
            this._strokeBg.color = this.onOutStrokeColor;
            this._strokeBg.alpha = this.onOutStrokeAlpha;
            this._strokeBg.width = this._width;
            this._strokeBg.height = this._height;
            this._strokeBg.selectable = false;
        }

        this._txt = new pinetree.TextField();
        this._txt.wordWrap = false;
        this._txt.textColor = this.onOutTextColor;
        this._txt.alpha = this.onOutTextAlpha;
        this._txt.fontSize = this.fontSize;
        this._txt.bold = this.bold;
        this._txt.selectable = false;
        this.addChild(this._txt);

        this.buttonMode = true;

        if(this._bindMouseEvent)
        {
            if(!pinetree.isDevice)
            {
                this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
                this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
            }
            else
            {
                this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
                this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
            }
        }
    }

    p.getText = function() { return this._text; }
    p.setText = function(value)
    {
        this._text = value;

        this._txt.htmlText = value;

        if(this._width > 0)
        {
            if(this.textX == 0)
                this._txt.x = (this._width - this._txt.width) >> 1;
            else
                this._txt.x = this.textX + this.gapX;
        }
        else
        {
            if(this.textX == 0)
                this._txt.x = this.gapX;
            else
                this._txt.x = this.textX + this.gapX;
            this._width = this._txt.width + this.gapX + this.gapX;
            if(this._bg instanceof pinetree.Quad)
                this._bg.width = this._width;
            if(this._isStroke)
                this._strokeBg.width = this._width;
        }

        if(this._height > 0)
        {
            if(this.textY == 0)
                this._txt.y = (this._height - this._txt.height) >> 1;
            else
                this._txt.y = this.textY + this.gapY;
        }
        else
        {
            if(this.textY == 0)
                this._txt.y = this.gapY;
            else
                this._txt.y = this.textY + this.gapY;
            this._height = this._txt.height + this.gapY + this.gapY;
            if(this._bg instanceof pinetree.Quad)
                this._bg.height = this._height;
            if(this._isStroke)
                this._strokeBg.height = this._height;
        }
    }

    p.over = function()
    {
        this._onOver(null);
    }

    p.out = function()
    {
        this._onOut(null);
    }

    p._onOver = function(evt)
    {
        if(pinetree.isDevice && evt && evt.type != pinetree.MouseEvent.MOUSE_DOWN) return;

        if(this._bg instanceof pinetree.Quad)
        {
            this._bg.tweenColor(this.onOverBgColor, this.tweenTime / 2);
            TweenMax.to(this._bg, this.tweenTime / 2, {alpha:this.onOverBgAlpha, ease:Quad.easeOut});
        }
        else if(this._bg instanceof pinetreecom.TextureButton)
        {
            this._bg.onOver(null);
        }

        if(this._strokeBg)
        {
            this._strokeBg.tweenColor(this.onOverStrokeColor, this.tweenTime / 2);
            TweenMax.to(this._strokeBg, this.tweenTime / 2, {alpha:this.onOverStrokeAlpha, ease:Quad.easeOut});
        }

        this._txt.tweenColor(this.onOverTextColor, this.tweenTime / 2);
        TweenMax.to(this._txt, this.tweenTime / 2, {alpha:this.onOverTextAlpha, ease:Quad.easeOut});
    }

    p._onOut = function(evt)
    {
        if(this._bg instanceof pinetree.Quad)
        {
            this._bg.tweenColor(this.onOutBgColor, this.tweenTime / 2);
            TweenMax.to(this._bg, this.tweenTime / 2, {alpha:this.onOutBgAlpha, ease:Quad.easeOut});
        }
        else if(this._bg instanceof pinetreecom.TextureButton)
        {
            this._bg.onOut(null);
        }

        if(this._strokeBg)
        {
            this._strokeBg.tweenColor(this.onOutStrokeColor, this.tweenTime / 2);
            TweenMax.to(this._strokeBg, this.tweenTime / 2, {alpha:this.onOutStrokeAlpha, ease:Quad.easeOut});
        }

        this._txt.tweenColor(this.onOutTextColor, this.tweenTime / 2);
        TweenMax.to(this._txt, this.tweenTime / 2, {alpha:this.onOutTextAlpha, ease:Quad.easeOut});
    }

    p.dispose = function()
    {
        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        if(this._bg)
        {
            if(this._bg instanceof pinetreecom.TextureButton)
                this._bg.dispose();
            else if(this._bg instanceof pinetree.Quad)
                this._bg.stopTweenColor();
            this._bg = null;
        }

        this._strokeBg && this._strokeBg.dispose();
        this._strokeBg = null;

        this._txt && this._txt.stopTweenColor();
        this._txt = null;
    }

    pinetreecom.TextButton = TextButton;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-4.
 */
(function()
{
    var ToggleButton = function(isOnState, color)
    {
        pinetree.Sprite.call(this);

        this._onImage = null;
        this._offImage = null;

        this._color = __defaultSet(color, -1);

        this._isOnState = !!isOnState;

        this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        this.buttonMode = true;
        this.selectable = false;

        this.tweenTime = 1.0;

        this.ON_CHANGE = new pinetree.Signal();

        __defineGetterSetter(this, ["color", "state"]);
    }

    var p = __extends(ToggleButton, pinetree.Sprite);

    ToggleButton.STATE_ON  = "on";
    ToggleButton.STATE_OFF = "off";

    p.setTextures = function(onTexture, offTexture)
    {
        this._onImage = new pinetree.TextureImage(onTexture);
        this._offImage = new pinetree.TextureImage(offTexture);

        if(this._color > -1)
        {
            pinetreecom.ColorUtil.setColor(this._onImage, this._color);
            pinetreecom.ColorUtil.setColor(this._offImage, this._color);
        }

        if(this._isOnState)
            this.addChild(this._onImage);
        else
            this.addChild(this._offImage);
    }

    p.setState = function(state)
    {
        if(state == pinetreecom.ToggleButton.STATE_ON)
        {
            this.addChild(this._onImage);
            this._offImage.removeFromParent();
            this._isOnState = true;
        }
        else
        {
            this.addChild(this._offImage);
            this._onImage.removeFromParent();
            this._isOnState = false;
        }
    }

    p.getState = function()
    {
        var state = this._isOnState ? pinetreecom.ToggleButton.STATE_ON : pinetreecom.ToggleButton.STATE_OFF;
        return state;
    }

    p.setColor = function(value)
    {
        this._color = value;
        if(this._color > -1)
        {
            pinetreecom.ColorUtil.tweenColor(this._onImage, this._color, this.tweenTime / 2);
            pinetreecom.ColorUtil.tweenColor(this._offImage, this._color, this.tweenTime / 2);
        }
    }

    p._onClick = function(evt)
    {
        this._isOnState = !this._isOnState;
        if(this._isOnState)
        {
            this.addChild(this._onImage);
            this._offImage.removeFromParent();

            this.ON_CHANGE.dispatch(pinetreecom.ToggleButton.STATE_ON);
        }
        else
        {
            this.addChild(this._offImage);
            this._onImage.removeFromParent();

            this.ON_CHANGE.dispatch(pinetreecom.ToggleButton.STATE_OFF);
        }
    }

    p.dispose = function()
    {
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ToggleButton = ToggleButton;
}());

(function()
{
	/**
	 * @author   pinetree
	 * @created  2014.06.21
	 * @use      manager previous and next button.
	 * */
    var SimplePNButtonsManager = function(prevBtn, nextBtn, displayMode,
                                        mouseChildren, alphaWhenAlphaMode,
                                        needHoverTweenX, needHoverTweenY,
                                        tweenOffsetX, tweenOffsetY
    )
    {
        this.prevBtn = prevBtn;
        this.nextBtn = nextBtn;

        this._showPrev = false;
        this._showNext = false;

        this._enabled = true;
        this._useKeyArrow = false;

        this.parent = null;

        this._needHoverTweenX = __defaultSet(needHoverTweenX, false);
        this._needHoverTweenY = __defaultSet(needHoverTweenY, false);
        this._tweenOffsetX = __defaultSet(tweenOffsetX, 3);
        this._tweenOffsetY = __defaultSet(tweenOffsetY, 3);
        
        if(prevBtn.parent && nextBtn.parent && prevBtn.parent == nextBtn.parent)
            this.parent = prevBtn.parent;

        this.prevBtn.mouseChildren = !!mouseChildren;
        this.nextBtn.mouseChildren = !!mouseChildren;
        this.prevBtn.buttonMode = this.nextBtn.buttonMode = true;
        
        this._mode = displayMode && displayMode == pinetreecom.SimplePNButtonsManager.VISIBLE_MODE ?
            pinetreecom.SimplePNButtonsManager.VISIBLE_MODE : pinetreecom.SimplePNButtonsManager.ALPHA_MODE;
        this._alphaWhenAlphaMode = alphaWhenAlphaMode == undefined ? 0.5 : alphaWhenAlphaMode;

        this.ON_CHANGE = new pinetree.Signal();

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        __defineGetterSetter(this, ["height", "enabled", "mode", "showPrev", "showNext", "useKeyArrow"]);
        
        this._init();
    }

    //----static----
    SimplePNButtonsManager.VISIBLE_MODE = "visible";
    SimplePNButtonsManager.ALPHA_MODE = "alpha";

    SimplePNButtonsManager.PREV_TYPE = "prev";
    SimplePNButtonsManager.NEXT_TYPE = "next";

    var p = SimplePNButtonsManager.prototype;
    
    p._init = function()
    {
        this.prevBtn.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.prevBtn.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        this.prevBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onPrev, this);

        this.nextBtn.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.nextBtn.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        this.nextBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onNext, this);

        this._updateState();
    }

    p.getUseKeyArrow = function() { return this._useKeyArrow; }
    p.setUseKeyArrow = function(value)
    {
        this._useKeyArrow = value;

        if(this._useKeyArrow)
        {
            pinetreecom.KeyboardUtil.listen(this, [pinetree.Keyboards.LEFT,pinetree.Keyboards.UP,
                pinetree.Keyboards.RIGHT, pinetree.Keyboards.DOWN], this._onKeyUp);
        }
        else
        {
            pinetreecom.KeyboardUtil.cancelByOwner(this);
        }
    }
    
    p.getHeight = function()
    {
        if(this.parent) return this.parent.height;
        
        return 0;
    }
    
    p.setEnabled = function(value)
    {
        this._enabled = value;

        if(this.parent)
        {
            this.parent.mouseEnabled = this.parent.mouseChildren = value;
        }
    }

    p._onOver = function(evt)
    {
        var target = evt.customTarget;
        if(!target) return;

        var needTween = this._needHoverTweenX || this._needHoverTweenY;
        if(needTween)
        {
            var tweenX = this._needHoverTweenX ? this._tweenOffsetX : 0;
            var tweenY = this._needHoverTweenY ? this._tweenOffsetY : 0;
            if(target == this.prevBtn)
            {
                TweenMax.to(this.prevBtn.icon, 0.3, {x:-tweenX, y:-tweenY, ease:Quart.easeOut});
            }
            else if(target == this.nextBtn)
            {
                TweenMax.to(this.nextBtn.icon, 0.3, {x:tweenX, y:tweenY, ease:Quart.easeOut});
            }
        }
    }

    p._onOut = function(evt)
    {
        var target = evt.customTarget;
        if(!target) return;

        var needTween = this._needHoverTweenX || this._needHoverTweenY;
        if(needTween)
        {
            if(target == this.prevBtn)
            {
                TweenMax.to(this.prevBtn.icon, 0.3, {x:0, y:0, ease:Quart.easeOut});
            }
            else if(target == this.nextBtn)
            {
                TweenMax.to(this.nextBtn.icon, 0.3, {x:0, y:0, ease:Quart.easeOut});
            }
        }
    }

    p._onKeyUp = function(keyCode)
    {
        switch(keyCode)
        {
            case pinetree.Keyboards.LEFT:
            case pinetree.Keyboards.UP:
                if(this._enabled && this._showPrev)
                {
                    this._onPrev(null);
                }
                break;
            case pinetree.Keyboards.RIGHT:
            case pinetree.Keyboards.DOWN:
                if(this._enabled && this._showNext)
                {
                    this._onNext(null);
                }
                break;
        }
    }

    p._onPrev = function(evt)
    {			
        this.ON_CHANGE.dispatch({target:evt ? evt.customTarget : window, type:pinetreecom.SimplePNButtonsManager.PREV_TYPE});
    }
    
    p._onNext = function(evt)
    {
        this.ON_CHANGE.dispatch({target:evt ? evt.customTarget : window, type:pinetreecom.SimplePNButtonsManager.NEXT_TYPE});
    }
    
    p.showPNButtons = function(showPrev, showNext)
    {
        this._showPrev = showPrev;
        this._showNext = showNext;

        this._updateState();
    }
    
    p._updateState = function()
    {
        if(!this._showPrev && !this._showNext)
        {
            this.prevBtn.visible = this.nextBtn.visible = false;
        }
        else
        {
            if(this._showNext && !this._showPrev)
            {
                this.prevBtn.mouseEnabled = false;
                this.nextBtn.mouseEnabled = true;
                
                if(this._mode == pinetreecom.SimplePNButtonsManager.VISIBLE_MODE)
                {
                    this.prevBtn.visible = false;
                    this.nextBtn.visible = true;
                }
                else if(this._mode == pinetreecom.SimplePNButtonsManager.ALPHA_MODE)
                {
                    this.prevBtn.alpha = this._alphaWhenAlphaMode;
                    this.nextBtn.alpha = 1;

                    this.prevBtn.visible = true;
                    this.nextBtn.visible = true;
                }
            }
            else if(this._showPrev && !this._showNext)
            {
                this.prevBtn.mouseEnabled = true;
                this.nextBtn.mouseEnabled = false;
                
                if(this._mode == pinetreecom.SimplePNButtonsManager.VISIBLE_MODE)
                {
                    this.prevBtn.visible = true;
                    this.nextBtn.visible = false;
                }
                else if(this._mode == pinetreecom.SimplePNButtonsManager.ALPHA_MODE)
                {
                    this.prevBtn.alpha = 1;
                    this.nextBtn.alpha = this._alphaWhenAlphaMode;

                    this.prevBtn.visible = true;
                    this.nextBtn.visible = true;
                }
            }
            else
            {
                this.prevBtn.mouseEnabled = this.nextBtn.mouseEnabled = true;

                this.prevBtn.visible = true;
                this.nextBtn.visible = true;

                this.prevBtn.alpha = this.nextBtn.alpha = 1;
            }
        }
    }
    
    p.getMode = function()
    {
        return this._mode;
    }
    
    p.show = function(time, delay)
    {
        if(time == undefined) time = 0.5;
        if(delay == undefined) delay = 0;

        if(this.parent)
        {
            this.parent.alpha = 0;
            this.parent.mouseChildren = false;
            this.parent.visible = true;

            TweenMax.killTweensOf(this.parent, false, {alpha:true});
            TweenMax.to(this.parent, time, {alpha:1, delay:delay, ease:this.transition,
                onComplete:this._showComplete, onCompleteParams:[this]});
        }
    }
    
    p._showComplete = function(owner)
    {
        owner.parent.mouseChildren = true;
    }
    
    p.hide = function(time, delay)
    {
        if(time == undefined) time = 0.5;
        if(delay == undefined) delay = 0;

        if(this.parent)
        {
            TweenMax.killTweensOf(this.parent, false, {alpha:true});
            TweenMax.to(this.parent, time, {alpha:0, delay:delay, ease:this.transition,
                onComplete:this._hideComplete, onCompleteParams:[this]});
            
            this.parent.mouseChildren = false;
        }
    }

    p.getShowPrev = function() { return this._showPrev; };
    p.getShowNext = function() { return this._showNext; };
    
    p._hideComplete = function(owner)
    {
        if(owner.parent)
        {
            owner.parent.visible = false;
        }
    }
    
    p.reset = function()
    {	
        this._showPrev = false;
        this._showNext = false;
        
        this._updateState();
    }
    
    p.dispose = function()
    {
        this.reset();

        TweenMax.killTweensOf(this.prevBtn);
        TweenMax.killTweensOf(this.nextBtn);
        
        this.parent && TweenMax.killTweensOf(this.parent, false, {alpha:true});
        this.prevBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onPrev, this);
        this.prevBtn.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.prevBtn.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        this.nextBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onNext, this);
        this.nextBtn.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.nextBtn.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

        pinetreecom.KeyboardUtil.cancelByOwner(this);

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;
    }

    pinetreecom.SimplePNButtonsManager = SimplePNButtonsManager;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-21.
 */
(function()
{
    var TexturePNButtons = function(prevTextureBtn, nextTextureBtn,
                                    needHoverTweenX, needHoverTweenY, tweenOffsetX, tweenOffsetY
    )
    {
        pinetreecom.UIComponent.call(this);

        this.onOverColor = 0xffffff;
        this.onOutColor = 0xffffff;

        this._btnContainer = null;

        this._needHoverTweenX = __defaultSet(needHoverTweenX, false);
        this._needHoverTweenY = __defaultSet(needHoverTweenY, false);
        this._tweenOffsetX = __defaultSet(tweenOffsetX, 3);
        this._tweenOffsetY = __defaultSet(tweenOffsetY, 3);

        this.prevBtn = prevTextureBtn || null;
        this.nextBtn = nextTextureBtn || null;

        this.showAlpha = 1.0;
        this.hideAlpha = 0.0;

        this._inited = false;

        this._isShowing = false;

        this._pnMgr = null;

        this._useMouseWheel = false;

        this._useKeyArrow = false;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.ON_CHANGE = new pinetree.Signal();

        __defineGetterSetter(this, ["useMouseWheel", "enabled", "isShowing", "useKeyArrow"]);
    }

    var p = __extends(TexturePNButtons, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._init();
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p._init = function()
    {
        if(this._inited) return;
        this._inited = true;

        this._btnContainer = new pinetree.Sprite();
        this.addChild(this._btnContainer);

        if(!this.prevBtn)
        {
            if(pinetree.isDevice)
            {
                this.prevBtn = new pinetreecom.TextureButton(this.onOverColor, this.onOutColor, 0, 0, 1, 1, 0, 0);
                this._btnContainer.addChild(this.prevBtn);
                this.prevBtn.setTextures(pt.getCommonTexture(pinetreepages.EnumTextures.DEVICE_PREV_ICON),
                    pt.getCommonTexture(pinetreepages.EnumTextures.BTN_BG_ICON));
            }
            else
            {
                this.prevBtn = new pinetreecom.TextureButton(this.onOverColor, this.onOutColor,
                    this.onOverColor, this.onOutColor, 1, 1, 1, 1);
                this._btnContainer.addChild(this.prevBtn);
                var circleBg = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CIRCLE_BG_ICON);
                this.prevBtn.setTextures(pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON), circleBg);
            }
        }

        if(!this.nextBtn)
        {
            if(pinetree.isDevice)
            {
                this.nextBtn = new pinetreecom.TextureButton(this.onOverColor, this.onOutColor, 0, 0, 1, 1, 0, 0);
                this._btnContainer.addChild(this.nextBtn);
                this.nextBtn.setTextures(pt.getCommonTexture(pinetreepages.EnumTextures.DEVICE_NEXT_ICON),
                    pt.getCommonTexture(pinetreepages.EnumTextures.BTN_BG_ICON));
            }
            else
            {
                this.nextBtn = new pinetreecom.TextureButton(this.onOverColor, this.onOutColor,
                    this.onOverColor, this.onOutColor, 1, 1, 1, 1);
                this._btnContainer.addChild(this.nextBtn);
                var circleBg = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CIRCLE_BG_ICON);
                this.nextBtn.setTextures(pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON), circleBg);
            }
        }

        this._btnContainer.addChild(this.prevBtn);
        this._btnContainer.addChild(this.nextBtn);

        this._pnMgr = new pinetreecom.SimplePNButtonsManager(this.prevBtn, this.nextBtn,
            pinetreecom.SimplePNButtonsManager.ALPHA_MODE, false, 0.5,
            this._needHoverTweenX, this._needHoverTweenY, this._tweenOffsetX, this._tweenOffsetY);
        this._pnMgr.ON_CHANGE.add(this, this._onChange);
        this._pnMgr.useKeyArrow = this._useKeyArrow;
    }

    p.setEnabled = function(value)
    {
        if(this._btnContainer)
        {
            this._btnContainer.mouseEnabled = this._btnContainer.mouseChildren = value;
        }

        if(this._pnMgr)
        {
            this._pnMgr.enabled = value;
        }
    }

    p.getUseKeyArrow = function() { return this._useKeyArrow; }
    p.setUseKeyArrow = function(value)
    {
        this._useKeyArrow = value;
        if(this._pnMgr)
        {
            this._pnMgr.useKeyArrow = this._useKeyArrow;
        }
    }

    p.showPNButtons = function(showPrev, showNext)
    {
        this._pnMgr.showPNButtons(!!showPrev, !!showNext);

        if(!showPrev && this.prevBtn && this.prevBtn.isOver)
            this.prevBtn.onOut();
        if(!showNext && this.nextBtn && this.nextBtn.isOver)
            this.nextBtn.onOut();
    }

    p._onChange = function(e)
    {
        this.ON_CHANGE.dispatch(e);
    }

    p.getUseMouseWheel = function() { return this._useMouseWheel; };
    p.setUseMouseWheel = function(value)
    {
        this._useMouseWheel = value;
    }
    
    p._onMouseWheel = function(evt)
    {
        if(!this._useMouseWheel || pt.isOverTextContainer) return;
    
        var delta = evt.delta;
        if(delta > 0)
        {
            if(!this._pnMgr.showPrev)
                return;
        }
        else
        {
            if(!this._pnMgr.showNext)
                return;
        }

        var e = {type:delta > 0 ? pinetreecom.SimplePNButtonsManager.PREV_TYPE : pinetreecom.SimplePNButtonsManager.NEXT_TYPE};
        this.ON_CHANGE.dispatch(e);
    }

    p.show = function(time, delay)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this._isShowing = true;

        this.visible = true;

        if(time == 0)
            this.alpha = this.showAlpha;
        else
            TweenMax.to(this, time, {alpha:this.showAlpha, delay:delay, ease:this.transition});

        if(this.stage)
        {
            this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheel, this);
            this.stage.addEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheel, this);
        }
    }
    
    p.hide = function(time)
    {
        if(time == undefined) time = this.tweenTime;

        this._isShowing = false;

        if(time == 0)
        {
            this.alpha = this.hideAlpha;
            this.visible = false;
        }
        else
        {
            TweenMax.to(this, time, {alpha:this.hideAlpha, ease:this.transition,
                onComplete:this._hideComplete, onCompleteParams:[this]});
        }

        this.stage && this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheel, this);
    }

    p._hideComplete = function(owner)
    {
        if(owner.hideAlpha == 0)
            owner.visible = false;
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.dispose = function()
    {
        this._pnMgr && this._pnMgr.dispose();
        this._pnMgr = null;

        this.prevBtn && this.prevBtn.dispose();
        this.prevBtn = null;

        this.nextBtn && this.nextBtn.dispose();
        this.nextBtn = null;

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        this.stage && this.stage.removeEventListener(pinetree.MouseEvent.MOUSE_WHEEL, this._onMouseWheel, this);

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.TexturePNButtons = TexturePNButtons;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-11-15.
 */
(function()
{
    var CircleTextureButton = function(radius, bgRadius, texture)
    {
        pinetree.Sprite.call(this);

        this.onOverTargetCircleColor = pt.onOverColor;
        this.onOutTargetCircleColor = pt.bgColor;
        this.onOverBgCircleColor = pt.bgColor;
        this.onOutBgCircleColor = pt.bgColor;
        this.onOverIconColor = pt.bgColor;
        this.onOutIconColor = pt.onOverColor;

        this.onOverTargetCircleAlpha = 1;
        this.onOutTargetCircleAlpha = 1;
        this.onOverBgCircleAlpha = 1;
        this.onOutBgCircleAlpha = 1;

        this.bgOverScale = 1.1;

        this._radius = radius;
        this._bgRadius = bgRadius;
        this._texture = texture;

        this._targetCircle = null;
        this._bgCircle = null;
        this._icon = null;

        this._iconColorTweener = null;

        this.tweenTime = 0.3;
        this.transition = Quad.easeOut;

        this.buttonMode = true;
    }

    var p = __extends(CircleTextureButton, pinetree.Sprite);

    p.init = function()
    {
        this._bgCircle = new pinetree.CanvasCircle(this._bgRadius, true);
        this._bgCircle.color = this.onOutBgCircleColor;
        this._bgCircle.alpha = this.onOutBgCircleAlpha;
        this.addChild(this._bgCircle);

        this._targetCircle = new pinetree.CanvasCircle(this._radius, true);
        this._targetCircle.color = this.onOutTargetCircleColor;
        this._targetCircle.alpha = this.onOutTargetCircleAlpha;
        this.addChild(this._targetCircle);

        if(this._texture)
        {
            this._icon = new pinetree.TextureImage(this._texture);
            this.addChild(this._icon);
            this._icon.x = - this._icon.width >> 1;
            this._icon.y = - this._icon.height >> 1;
            pinetreecom.ColorUtil.setColor(this._icon, this.onOutIconColor);
        }

        this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

        this.visible = false;
        this.alpha = 0;
    }

    p._onOver = function(evt)
    {
        this._bgCircle.tweenColor(this.onOverBgCircleColor, this.tweenTime, this.transition);
        this._targetCircle.tweenColor(this.onOverTargetCircleColor, this.tweenTime, this.transition);

        TweenMax.to(this._bgCircle, this.tweenTime, {alpha:this.onOverBgCircleAlpha, scale:this.bgOverScale, ease:this.transition});
        TweenMax.to(this._targetCircle, this.tweenTime, {alpha:this.onOverTargetCircleAlpha, ease:this.transition});

        if(this._texture)
        {
            this._iconColorTweener && this._iconColorTweener.dispose();
            this._iconColorTweener = pinetreecom.ColorTweener.addTween(this._icon,
                this.onOutIconColor, this.onOverIconColor, this.tweenTime, 0, null, this.transition);

            TweenMax.to(this._icon, this.tweenTime, {alpha:this.onOverIconAlpha, ease:this.transition});
        }
    }

    p._onOut = function(evt)
    {
        this._bgCircle.tweenColor(this.onOutBgCircleColor, this.tweenTime, this.transition);
        this._targetCircle.tweenColor(this.onOutTargetCircleColor, this.tweenTime, this.transition);

        TweenMax.to(this._bgCircle, this.tweenTime, {alpha:this.onOutBgCircleAlpha, scale:1, ease:this.transition});
        TweenMax.to(this._targetCircle, this.tweenTime, {alpha:this.onOutTargetCircleAlpha, ease:this.transition});

        if(this._texture)
        {
            this._iconColorTweener && this._iconColorTweener.dispose();
            this._iconColorTweener = pinetreecom.ColorTweener.addTween(this._icon,
                this.onOverIconColor, this.onOutIconColor, this.tweenTime, 0, null, this.transition);

            TweenMax.to(this._icon, this.tweenTime, {alpha:this.onOutIconAlpha, ease:this.transition});
        }
    }

    p.updateSize = function(radius, bgRadius)
    {
        if(this._radius == radius && this._bgRadius == bgRadius) return;
        this._radius = radius;
        this._bgRadius = bgRadius;

        this._targetCircle.radius = this._radius;
        this._bgCircle.radius = this._bgRadius;
    }

    p.updateTexture = function(texture)
    {
        if(this._texture == texture) return;
        this._texture = texture;

        if(this._texture)
        {
            if(!this._icon)
            {
                this._icon = new pinetree.TextureImage(this._texture);
                this.addChild(this._icon);
            }
            else
            {
                this._icon.texture = this._texture;
            }

            this._icon.x = - this._icon.width >> 1;
            this._icon.y = - this._icon.height >> 1;
            pinetreecom.ColorUtil.setColor(this._icon, this.onOutIconColor);
        }
        else
        {
            if(this._icon)
            {
                TweenMax.killTweensOf(this._icon);
                this._icon.removeFromParent(true);
                this._icon = null;
            }
        }
    }

    p.show = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        this.visible = true;
        TweenMax.to(this, time, {alpha:1, ease:transition, delay:delay, onComplete:this._onShowComplete,
            onCompleteParams:[this, callback]})
    }

    p._onShowComplete = function(target, callback)
    {
        callback && callback();
    }

    p.hide = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        TweenMax.to(this, time, {alpha:0, ease:transition, delay:delay, onComplete:this._onHideComplete,
            onCompleteParams:[this, callback]})
    }

    p._onHideComplete = function(target, callback)
    {
        target.visible = false;
        callback && callback();
    }

    p.getWidth = function()
    {
        return this._radius + this._radius;
    }

    p.getHeight = function()
    {
        return this._radius + this._radius;
    }

    p.dispose = function()
    {
        if(this._bgCircle)
        {
            TweenMax.killTweensOf(this._bgCircle);
            this._bgCircle.dispose();
            this._bgCircle = null;
        }

        if(this._targetCircle)
        {
            TweenMax.killTweensOf(this._targetCircle);
            this._targetCircle.dispose();
            this._targetCircle = null;
        }

        if(this._icon)
        {
            TweenMax.killTweensOf(this._icon);
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        this._iconColorTweener && this._iconColorTweener.dispose();
        this._iconColorTweener = null;

        this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.CircleTextureButton = CircleTextureButton;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-18.
 */
(function()
{
    var MediaPlayer = function(needControls, preload)
    {
        pinetree.Sprite.call(this);

        this._needControls = needControls == undefined ? true : !!needControls;
        this._preload = preload == undefined ? "none" : preload;

        this._disposed = false;

        this._videoHtmlElement = document.createElement("video");
        this._videoHtmlElement.style.position = "absolute";
        this._htmlElement.appendChild(this._videoHtmlElement);

        this.preCssSet = "video-js vjs-big-play-centered";

        this._skinName = "";
        this.setSkin("vjs-default-skin");

        this._poster = "";
        this._autoplay = true;
        this._loop = false;

        this.playEndHandler = null;

        this._width = 640;
        this._height = 360;

        this.setPreload(this._preload);

        __defineGetterSetter(this, ["poster", "preload", "volume", "videoPlayer", "muted", "isPaused",
            "duration", "currentTime", "isFullscreen", "isShowControls", "skin", "disposed", "autoplay", "loop"
        ]);
    }

    var p = __extends(MediaPlayer, pinetree.Sprite);

    p.load = function(src, type, w, h)
    {
        if(type == undefined) type = "video";

        switch(type)
        {
            case "video":
                this._loadVideo(src);
                break;

            case "youtube":
                this._loadYoutube(src);
                break;

            case "vimeo":
                this._loadVimeo(src);
                break;

            default:
                this._loadVideo(src);
                break;
        }

        this.width = w == undefined ? this._width : w;
        this.height = h == undefined ? this._height : h;

        if(this.playEndHandler)
        {
            this._videoPlayer.off("ended", this.playEndHandler);
            this._videoPlayer.on("ended", this.playEndHandler);
        }

        if(type != "vimeo")
        {
            this.isShowControls = this._needControls;
        }

        pt.closeSiteMusic();
    }

    p._loadVideo = function(src)
    {
        this._videoPlayer = videojs(this._videoHtmlElement);

        var fileExtension = pinetreecom.StringUtil.getFileExtension(src);
        var fileObj = null, extensions = ["mp4", "webm", "ogg"];
        if(fileExtension && extensions.indexOf(fileExtension) > -1)
        {
            src = pinetreecom.StringUtil.removeFileExtension(src);
        }
        var len = extensions.length, fileObjs = [];
        for(var i = 0; i < len; i ++)
        {
            fileExtension = extensions[i];
            fileObj = {type: "video/" + fileExtension, src:src + "." + fileExtension};
            fileObjs.push(fileObj);
        }
        try
        {
            this._videoPlayer.src(fileObjs);
        }
        catch (e)
        {
            trace("load video error!");
        }
    }

    p._loadYoutube = function(src)
    {
        this._videoPlayer = videojs(this._videoHtmlElement, {"techOrder":["youtube"], "src": src, "autoplay":this._autoplay});
    }

    p._loadVimeo = function(src)
    {
        this._videoPlayer = videojs(this._videoHtmlElement, {"techOrder":["vimeo"], "src":src, "autoplay":this._autoplay});
    }

    /**
     * NOTE: the width should not smaller than 460 pixels.
     * @returns {*}
     */
    p.getWidth = function() { return this._width; }
    p.setWidth = function(value)
    {
        this._width = value;
        this._videoPlayer && this._videoPlayer.width(value);
    }

    p.getHeight = function() { return this._height; }
    p.setHeight = function(value)
    {
        this._height = value;
        this._videoPlayer && this._videoPlayer.height(value);
    }

    p.getSkin = function() { return this._skinName; }
    p.setSkin = function(value)
    {
        if(value == this._skinName) return;
        this._skinName = value;

        var cName = this.preCssSet + " " + value;
        this._videoHtmlElement.setAttribute("class", cName);
    }

    p.setSize = function(w, h)
    {
        this._width = w;
        this._height = h;
        this._videoPlayer && this._videoPlayer.dimensions(w, h);
    }

    p.getAutoplay = function() { return this._autoplay; }
    p.setAutoplay = function(value)
    {
        this._autoplay = value;
        this._videoHtmlElement.setAttribute("autoplay", value);
    }

    p.getLoop = function() { return this._loop; }
    p.setLoop = function(value)
    {
        if(this._loop == value) return;
        this._loop = value;

        this._videoHtmlElement.setAttribute("loop", value);
    }

    p.getCurrentTime = function() { return this._videoPlayer.currentTime(); }
    p.setCurrentTime = function(value)
    {
        this._videoPlayer && this._videoPlayer.currentTime(value);
    }

    p.getDuration = function()
    {
        return this._videoPlayer.duration();
    }

    p.getVolume = function() { return this._videoPlayer.volume(); }
    p.setVolume = function(value)
    {
        if(isNaN(value)) value = 1;
        if(value < 0) value = 0;
        if(value > 1) value = 1;
        this._videoPlayer && this._videoPlayer.volume(value);
    }

    p.getVideoPlayer = function()
    {
        return this._videoPlayer;
    }

    p.getPreload = function() { return this._preload; }
    p.setPreload = function(value)
    {
        if(this._preload == value) return;
        this._preload = value;

        this._videoHtmlElement.setAttribute("preload", value);
    }

    p.getPoster = function() { return this._poster; }
    p.setPoster = function(url)
    {
        if(this._poster == url) return;
        this._poster = url;

        this._videoHtmlElement.setAttribute("poster", url);
    }

    p.getIsFullscreen = function()
    {
        return this._videoPlayer.isFullscreen();
    }

    p.getIsPaused = function()
    {
        return this._videoPlayer.paused();
    }

    p.getMuted = function() { return this._videoPlayer.muted(); }
    p.setMuted = function(value)
    {
        this._videoPlayer && this._videoPlayer.muted(!!value);
    }

    p.getIsShowControls = function() { return this._videoPlayer.controls(); }
    p.setIsShowControls = function(value)
    {
        this._videoPlayer && this._videoPlayer.controls(!!value);
    }

    p.getDisposed = function()
    {
        return this._disposed;
    }

    p.play = function()
    {
        this._videoPlayer && this._videoPlayer.play();
    }

    p.pause = function()
    {
        this._videoPlayer && this._videoPlayer.pause();
    }

    p.exitFullscreen = function()
    {
        this._videoPlayer && this._videoPlayer.exitFullscreen();
    }

    p.requestFullscreen = function()
    {
        this._videoPlayer && this._videoPlayer.requestFullscreen();
    }

    p.show = function()
    {
        this._videoPlayer && this._videoPlayer.show();
    }

    p.hide = function()
    {
        this._videoPlayer && this._videoPlayer.hide();
    }

    p.tweenIn = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, Quad.easeOut);

        TweenMax.to(this, time, {volume:1, alpha:1, delay:delay, ease:transition, onComplete:callback});
    }

    p.tweenOut = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, Quad.easeOut);
        TweenMax.to(this, time, {volume:0, alpha:0, delay:delay, ease:transition, onComplete:callback});
    }

    p.dispose = function(openSiteMusic)
    {
        if(this._disposed) return;
        this._disposed = true;

        this.playEndHandler = null;

        openSiteMusic = __defaultSet(openSiteMusic, true);
        if(openSiteMusic)
        {
            pt.openSiteMusic();
        }

        TweenMax.killTweensOf(this);

        try
        {
            this._videoPlayer && this._videoPlayer.dispose();
            this._videoPlayer = null;
        }
        catch (error)
        {
            this._videoPlayer = null;
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.MediaPlayer = MediaPlayer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-11.
 */
(function()
{
	var ControlButtons = function()
	{
        pinetreecom.UIComponent.call(this);

		this._pnVisible = true;
		this._closeVisible = true;
		this._infoVisible = false;
		
		this._useMouseWheel = false;
        this._enabled = true;
		
		this.tweenTime = 0.5;
		this.transition = Quad.easeOut;
		
		this.showAlpha = 1.0;
		this.hideAlpha = 0.0;

        this.btnOverAlpha = 1;
        this.btnOutAlpha = 0.9;

        this._gapX = 0;
        this._gapY = 0;
        this._alignDirection = "horizontal";
        this._ignoreX = false;
        this._ignoreY = false;

        this._isShowing = false;

        this._targets = [];

        this.isTweenX = false;

        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._pnBtns = null;

        this.prevBtn = null;
        this.nextBtn = null;
        this.closeBtn = null;
        this.infoBtn = null;

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_CLOSE = new pinetree.Signal();
        this.ON_INFO = new pinetree.Signal();

        this.registerAutoDispose(this.ON_CHANGE);
        this.registerAutoDispose(this.ON_CLOSE);
        this.registerAutoDispose(this.ON_INFO);

        this.alpha = 0;
        this.visible = false;

        __defineGetterSetter(this, ["useMouseWheel", "pnVisible", "closeVisible", "infoVisible",
            "pnButtons", "enable"
        ]);
    }

    var p = __extends(ControlButtons, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this.prevBtn = this._initButton(pinetreepages.EnumTextures.PREV_ICON_H_DEVICE,
                null, null);

            this.nextBtn = this._initButton(pinetreepages.EnumTextures.NEXT_ICON_H_DEVICE,
                null, null);

            this._pnBtns = new pinetreecom.TexturePNButtons(this.prevBtn, this.nextBtn);
            this.addChild(this._pnBtns);
            this._pnBtns.useMouseWheel = this._useMouseWheel;
            this._pnBtns.ON_CHANGE.add(this, this._onPNChange);
            this._pnBtns.show(0, 0);

            this.closeBtn = this._initButton(pinetreepages.EnumTextures.CLOSE_ICON_DEVICE,
                null, this._onClose);

            this.infoBtn = this._initButton(pinetreepages.EnumTextures.INFO_ICON_DEVICE,
                null, this._onInfo);

            this.registerAutoDispose(this._pnBtns);
            this.registerAutoDispose(this.closeBtn);
            this.registerAutoDispose(this.infoBtn);

            this._update();
        }
        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p._initButton = function(iconTextureId, bgTextureId, onClickHandler)
    {
        var btn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor,
            this.btnOverAlpha, this.btnOutAlpha, this.btnOverAlpha, this.btnOutAlpha);
        var icon = pinetreepages.assetsMgr.getCommonTexture(iconTextureId);
        var bg = pinetreepages.assetsMgr.getCommonTexture(bgTextureId);
        btn.setTextures(icon, bg);
        this.addChild(btn);
        if(!!onClickHandler)
        {
            btn.addEventListener(pinetree.MouseEvent.MOUSE_UP, onClickHandler, this);
        }
        btn.show(0);
        return btn;
    }

    p.alignBy = function(gapX, gapY, direction, ignoreX, ignoreY)
    {
        if(gapX == undefined) gapX = 5;
        if(gapY == undefined) gapY = 5;
        if(direction == undefined) direction = "horizontal";
        if(ignoreX == undefined) ignoreX = false;
        if(ignoreY == undefined) ignoreY = false;

        this._gapX = gapX;
        this._gapY = gapY;
        this._alignDirection = direction;
        this._ignoreX = ignoreX;
        this._ignoreY = ignoreY;

        var btns = [this.prevBtn, this.nextBtn, this.infoBtn, this.closeBtn];
        var len = btns.length, btn, i;
        if(direction == "vertical")
        {
            var h = 0;
            for(i = 0; i < len; i ++)
            {
                btn = btns[i];
                if(btn && btn.visible)
                {
                    if(!ignoreX)
                    {
                        btn.x = gapX;
                    }
                    if(!ignoreY)
                    {
                        btn.y = h;
                    }

                    h += (btn.height + gapY);
                }
            }
        }
        else
        {
            var w = 0;
            for(i = 0; i < len; i ++)
            {
                btn = btns[i];
                if(btn && btn.visible)
                {
                    if(!ignoreX)
                    {
                        btn.x = w;
                    }
                    if(!ignoreY)
                    {
                        btn.y = gapY;
                    }

                    w += btn.width + gapX;
                }
            }
        }

        if(this.isTweenX)
        {
            this._clipRect.width = this.prevBtn.width || this.nextBtn.width || this.closeBtn.width || this.infoBtn.width;
            this._clipRect.width += gapX + gapX;
            this._clipRect.height = this.height;
            this.clip = this._clipRect;
            this.width = this._clipRect.width;
            this.height = this.height;
        }
    }

    p.listen = function(target)
    {
        if(this._targets.indexOf(target) < 0)
        {
            this._targets.push(target);
        }
    }

    p.cancel = function(target)
    {
        if(target)
        {
            var index = this._targets.indexOf(target);
            if(index > -1)
            {
                this._targets.splice(index, 1);
            }
        }
    }

    p.cancelAll = function()
    {
        this._targets.splice(0, this._targets.length);
    }

    p.refresh = function()
    {
        this.alignBy(this._gapX, this._gapY, this._alignDirection, this._ignoreX, this._ignoreY);
    }

    p.getUseMouseWheel = function() { return this._useMouseWheel; };
    p.setUseMouseWheel = function(value)
    {
        if(this._useMouseWheel == value) return;
        if(pinetree.isDevice) return;

        this._useMouseWheel = value;
        this._pnBtns.useMouseWheel = value;
    }

    p.setPnVisible = function(value)
    {
        this._pnVisible = value;

        this._update();
    }

    p.showPNButtons = function(prevEnabled, nextEnabled)
    {
        this._pnBtns && this._pnBtns.showPNButtons(prevEnabled, nextEnabled);
    }

    p.setCloseVisible = function(value)
    {
        this._closeVisible = value;

        this._update();
    }

    p.setInfoVisible = function(value)
    {
        this._infoVisible = value;

        this._update();
    }

    p.getPnButtons = function()
    {
        return this._pnBtns;
    }

    p._onClose = function(evt)
    {
        this.ON_CLOSE.dispatch();

        var i = this._targets.length, target;
        while(i --)
        {
            target = this._targets[i];
            if (pinetreecom.CommonUtil.isFunction(target, "onControlClose"))
            {
                target['onControlClose'](evt);
            }
        }
    }

    p._onInfo = function(evt)
    {
        this.ON_INFO.dispatch();

        var i = this._targets.length, target;
        while(i --)
        {
            target = this._targets[i];
            if (pinetreecom.CommonUtil.isFunction(target, "onControlInfo"))
            {
                target['onControlInfo'](evt);
            }
        }
    }

    p._onPNChange = function(e)
    {
        this.ON_CHANGE.dispatch(e);

        var i = this._targets.length, target;
        while(i --)
        {
            target = this._targets[i];
            if (pinetreecom.CommonUtil.isFunction(target, "onControlPNChange"))
            {
                target['onControlPNChange'](e);
            }
        }
    }

    p.getEnable = function() { return this._enabled; }
    p.setEnable = function(value)
    {
        this._enabled = value;
        this.mouseChildren = this.mouseEnabled = value;
    }

    p._update = function()
    {
        this._pnBtns.visible = this._pnVisible;
        this.closeBtn.visible = this._closeVisible;
        this.infoBtn.visible = this._infoVisible;
    }

    p.show = function(time, delay)
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this.visible = true;
        this.enable = true;

        if(this.isTweenX)
        {
            pinetreecom.DelayCaller.removeByHandler(this, this._onStartShow);
            pinetreecom.DelayCaller.delayCall(this, this._onStartShow, delay);
        }
        else
        {
            if(time == 0)
                this.alpha = this.showAlpha;
            else
                TweenMax.to(this, time, {alpha:this.showAlpha, delay:delay, ease:this.transition});
        }
    }

    p._onStartShow = function()
    {
        var btns = [this.prevBtn, this.nextBtn, this.closeBtn, this.infoBtn];
        var len = btns.length, btn, index = 0;
        for(var i = 0; i < len; i ++)
        {
            btn = btns[i];
            if(btn)
            {
                btn.x = - btn.width;
                TweenMax.to(btn, this.tweenTime, {x:this._gapX, delay:index * 0.1, ease:Back.easeOut});
                index ++;
            }
        }

        this.alpha = this.showAlpha;
    }

    p.hide = function(time, delay)
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this.enable = false;

        if(this.isTweenX)
        {
            pinetreecom.DelayCaller.removeByHandler(this, this._onStartShow);
            pinetreecom.DelayCaller.delayCall(this, this._onStartHide, delay);
        }
        else
        {
            if(time == 0)
            {
                this.alpha = this.hideAlpha;
                this.visible = false;
            }
            else
            {
                TweenMax.to(this, time, {alpha:this.hideAlpha, ease:this.transition,
                    onComplete:this._hideComplete, onCompleteParams:[this]});
            }
        }
    }

    p._onStartHide = function()
    {
        var btns = [this.prevBtn, this.nextBtn, this.closeBtn, this.infoBtn];
        var len = btns.length, btn, index = 0;
        for(var i = len - 1; i >= 0; i --)
        {
            btn = btns[i];
            if(btn)
            {
                TweenMax.to(btn, this.tweenTime * 0.8, {x:-btn.width, delay: index * 0.1,
                    ease:Quart.easeOut, onComplete:this._onHideEachComplete, onCompleteParams:[this, i, 0]});
                index ++;
            }
        }
    }

    p._onHideEachComplete = function(owner, startIndex, endIndex)
    {
        if(startIndex == endIndex)
        {
            owner._hideComplete(owner);
        }
    }

    p._hideComplete = function(owner)
    {
        owner.alpha = 0;
        owner.visible = false;
    }

    p.dispose = function()
    {
        this.closeBtn.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onClose, this);

        this.reset();

        pinetreecom.DelayCaller.removeByOwner(this);

        TweenMax.killTweensOf(this);

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.ControlButtons = ControlButtons;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-16.
 */
(function()
{
    var TileRectImage = function(w, h, src)
    {
        pinetree.Shape.call(this);

        this._width = w == undefined ? 100 : w;
        this._height = h == undefined ? 100 : h;
        this._src = src || "";

        this._img = null;
        this._htmlImage = null;

        if(this._src)
        {
            this.load(this._src);
        }
    }

    var p = __extends(TileRectImage, pinetree.Shape)

    p.load = function(src)
    {
        this._src = src;

        this._img = new pinetreecom.ExImage();
        this._img.ON_LOAD_COMPLETE.add(this, this._onLoadComplete);
        this._img.load(src);
    }

    p._onLoadComplete = function(evt)
    {
        this._htmlImage = this._img.getImageElement();
        this._update();
    }

    p.setSize = function(w, h)
    {
        this._width = w;
        this._height = h;
        this._update();
    }

    p._update = function()
    {
        if(!this._htmlImage) return;

        this.graphics.clear();
        this.graphics.beginBitmapFill(this._htmlImage, "repeat");
        this.graphics.drawRect(0, 0, this._width, this._height);
        this.graphics.endFill();
    }

    pinetreecom.TileRectImage = TileRectImage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
	var ListContainer = function()
	{
        pinetreecom.ListBase.call(this);

        this.useRealPosition = true;
        this.needResize = false;
        this.useRealStagePos = true;
        this.showAllWhileDevice = true;

        this.startX = 0;
        this.startY = 0;

        this.onlyFullShown = true;

		this._gapX = 24;
        this._startMousePos = 0;

        this.maxShownCount = 0;

        this._filterKey = "";

        this._isFilteredItems = [];

        this._fullShownItems = [];
        this._isShownItems = [];
        this._unShownItems = [];

        __defineGetterSetter(this, ["gapX", "isFilteredItems", "fullShownItems", "isShownItems", "unShownItems",
            "itemContainer"
        ]);
    }

    var p = __extends(ListContainer, pinetreecom.ListBase);

    ListContainer.PREV_TYPE = "prev";
    ListContainer.NEXT_TYPE = "next";

    p.setUpWith = function(itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
                           rowColumn, data, showWidth, showHeight, clipContent)
    {
        pinetreecom.ListBase.prototype.setUpWith.call(this, itemClass, itemWidth, itemHeight, gapX, gapY,
            alignDirection, rowColumn, data, showWidth, showHeight, clipContent);

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            this._shownCount = Math.ceil((this._showHeight + this._itemGapY) / (this._itemHeight + this._itemGapY)) * this._rowColumn;
        else
            this._shownCount = Math.ceil((this._showWidth + this._itemGapX) / (this._itemWidth + this._itemGapX)) * this._rowColumn;

        if (this._shownCount > this._dataCount) this._shownCount = this._dataCount;

        var len = this._data.length, item;

        for (var i = 0; i < len; i ++)
        {
            item = new itemClass();
            if(!(item instanceof pinetreecom.ListItemBase))
            {
                trace("Error at ListBase::setUpWidth(), itemClass is not instance of ListItemBase!");
                return;
            }
            item.index = i;
            item.originParent = this._itemContainer;
            item.setUpWith(this._itemWidth, this._itemHeight, data[i]);
            if(item.thumbnail)
            {
                this._loadCount ++;
                this._loaders.push(item);

                if(!this.loadOneByOne)
                {
                    item.load();
                }
                else
                {
                    item.thumbnail.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
                    item.thumbnail.ON_IO_ERROR.add(this, this.onLoadError);
                }
            }
            item.addEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);

            pinetreecom.AlignUtil.align(item, this._alignDirection,
                this._itemWidth || data[i].thumbWidth || item.width, this._itemHeight || data[i].thumbHeight || item.height,
                this._itemGapX, this._itemGapY, i, rowColumn);

            item.x = item.originX;
            item.y = item.originY;

            this._items.push(item);
        }

        if(this.loadOneByOne)
        {
            this.onLoadNext();
        }

        if(this._filterKey)
        {
            this.updateFilterKey(this._filterKey);
        }
    }

    p.refresh = function()
    {
        this._currentPos = 0;
        TweenMax.killTweensOf(this._itemContainer);

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            this._itemContainer.y = this._currentPos;
        else
            this._itemContainer.x = this._currentPos;
    }

    p.updateCurrentPos = function(pos)
    {
        this._currentPos = pos;
    }

    p.getGapX = function() { return this._gapX; };

    p.getItemContainer = function() { return this._itemContainer; }

    p.onLoadComplete = function(unused)
    {
        this.render();

        if (this._loadedIndex >= this._fullShownItems.length - 1 && !this._firstCompleted)
        {
            this.ON_LOAD_FIRST_PAGE_COMPLETE.dispatch();
            this._firstCompleted = true;
        }

        this._loadedIndex ++;
        this.onLoadNext();
    }

    p.getContentWidth = function()
    {
        var w =  this._items &&  this._items[0] ?  this._items[0].width : this._itemWidth;
        var column, dataCount = this._dataCount - this._isFilteredItems.length;
        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            column = this._rowColumn;
        else
            column = Math.ceil(dataCount / this._rowColumn);

        return column * (w + this._itemGapX) - this._itemGapX;
    }

    p.getContentHeight = function()
    {
        var dataCount = this._dataCount - this._isFilteredItems.length;
        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            return Math.ceil(dataCount / this._rowColumn) * (this._itemHeight + this._itemGapY) - this._itemGapY;

        var len = dataCount < this._rowColumn ? dataCount : this._rowColumn;
        return len * (this._itemHeight + this._itemGapY) - this._itemGapY;
    }

    p.getIsFilteredItems = function()
    {
        return this._isFilteredItems;
    }

    p.getFullShownItems = function()
    {
        return this._fullShownItems;
    }

    p.getIsShownItems = function()
    {
        return this._isShownItems;
    }

    p.getUnShownItems = function()
    {
        return this._unShownItems;
    }

    p.prev = function()
    {
        if(!this.hasPreviousContent) return;

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
        {
            this._currentPos += (this._itemHeight + this._itemGapY);
            if(this._currentPos > 0) this._currentPos = 0;

            TweenMax.to(this._itemContainer, this.tweenTime, {y:this._currentPos, ease:this.transition});
        }
        else
        {
            this._currentPos += (this._itemWidth + this._itemGapX);
            if(this._currentPos > 0) this._currentPos = 0;

            TweenMax.to(this._itemContainer, this.tweenTime, {x:this._currentPos, ease:this.transition});
        }

        this.ON_NEED_RESIZE.dispatch();
    }

    p.next = function()
    {
        if(! this.hasNextContent) return;

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
        {
            this._currentPos -= (this._itemHeight + this._itemGapY);
            TweenMax.to(this._itemContainer, this.tweenTime, {y: this._currentPos, ease: this.transition});
        }
        else
        {
            this._currentPos -= (this._itemWidth + this._itemGapX);
            TweenMax.to(this._itemContainer, this.tweenTime, {x: this._currentPos, ease: this.transition});
        }

        this.ON_NEED_RESIZE.dispatch();
    }

    p.updateFilterKey = function(key)
    {
        this._filterKey = key;

        if(!this._items) return;

        var len = this._items.length;
        var i = 0, item, arr = [];
        for(i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item)
            {
                item.updateFilterKey(key);
                if(!item.isFiltered)
                {
                    arr.push(item);
                }
            }
        }

        len = arr.length;
        for(i = 0; i < len; i ++)
        {
            item = arr[i];
            pinetreecom.AlignUtil.align(item, this._alignDirection,
                this._itemWidth || this._data[item.index].thumbWidth || item.width,
                this._itemHeight || this._data[item.index].thumbHeight || item.height,
                this._itemGapX, this._itemGapY, i, this._rowColumn);
        }

        this.render();
    }

    p.render = function()
    {
        if(!this.isSetupInited) return;

        this._isFilteredItems.splice(0, this._isFilteredItems.length);

        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        var item, itemStageX, itemStageY, w, h, thisStageX, thisStageY;
        if(!this.useRealPosition)
        {
            if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            {
                if(this.useRealStagePos)
                {
                    thisStageX = pinetreecom.CommonUtil.getStageX(this, 0);
                    thisStageY = pinetreecom.CommonUtil.getStageY(this, this._currentPos);
                }
                else
                {
                    thisStageX = 0;
                    thisStageY = this._currentPos;
                }
            }
            else
            {
                if(this.useRealStagePos)
                {
                    thisStageX = pinetreecom.CommonUtil.getStageX(this, this._currentPos);
                    thisStageY = pinetreecom.CommonUtil.getStageY(this, 0);
                }
                else
                {
                    thisStageX = this._currentPos;
                    thisStageY = 0;
                }
            }
        }
        for (var i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                if(item.getIsFiltered())
                {
                    this._isFilteredItems.push(item);
                    item.updateFilterState(true);
                    continue;
                }
                else
                {
                    item.updateFilterState(false);
                }

                if(pinetree.isDevice && this.showAllWhileDevice)
                {
                    this._isShownItems.push(item);
                    this._fullShownItems.push(item);

                    item.updateState(true, true);
                    if(this._isAnimationIn)
                    {
                        item.enable = true;
                        item.setState(true, true);
                    }
                    continue;
                }

                if(this.useRealPosition)
                {
                    itemStageX = item.stageX;
                    itemStageY = item.stageY;
                }
                else
                {
                    itemStageX = thisStageX + item.originX;
                    itemStageY = thisStageY + item.originY;
                }

                w = this._itemWidth || item.width;
                h = this._itemHeight || item.height;
                if((itemStageX >= this.startX - w && itemStageX < this.startX + this._showWidth) &&
                    (itemStageY >= this.startY - h && itemStageY < this.startY + this._showHeight)
                )
                {
                    if(this.maxShownCount > 0 && this._isShownItems.length == this.maxShownCount)
                    {
                        this._unShownItems.push(item);

                        item.updateState(false, false);
                        if(this._isAnimationIn)
                        {
                            item.enable = false;
                            item.setState(false, false);
                        }
                        continue;
                    }

                    this._isShownItems.push(item);

                    if((itemStageX >= this.startX && itemStageX + w <= this.startX + this._showWidth) &&
                        (itemStageY >= this.startY && itemStageY + h <= this.startY + this._showHeight)
                    )
                    {
                        this._fullShownItems.push(item);

                        item.updateState(true, true);
                        if(this._isAnimationIn)
                        {
                            item.enable = true;
                            item.setState(true, true);
                        }
                    }
                    else
                    {
                        item.updateState(true, false);
                        if(this._isAnimationIn)
                        {
                            item.enable = false;
                            item.setState(true, false);
                        }
                    }
                }
                else
                {
                    this._unShownItems.push(item);

                    item.updateState(false, false);
                    if(this._isAnimationIn)
                    {
                        item.enable = false;
                        item.setState(false, false);
                    }
                }
            }
        }
    }

    p.resize = function(w, h)
    {
        pinetreecom.ListBase.prototype.resize.call(this, w, h);

        if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            this._shownCount = Math.ceil((this._showHeight + this._itemGapY) /
            (this._itemHeight + this._itemGapY)) * this._rowColumn;
        else
            this._shownCount = Math.ceil((this._showWidth + this._itemGapX) /
            (this._itemWidth + this._itemGapX)) * this._rowColumn;

        if ( this._shownCount >  this._dataCount)
            this._shownCount =  this._dataCount;

        this.render();

        if(this.needResize)
        {
            var len = this._items.length, item;
            for(var i = 0; i < len; i ++)
            {
                item = this._items[i];
                if(item)
                {
                    item.resize(w, h);
                }
            }
        }
    }

    p.animationIn = function(direction, time, transition, callback)
    {
        this.render();

        pinetreecom.ListBase.prototype.animationIn.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;
        var tweenFullShowItems = this._fullShownItems;

        this._tweenIndex = 0;
        this._tweenCount = this.onlyFullShown ? tweenFullShowItems.length : tweenItems.length;
        var items = this.onlyFullShown ? tweenFullShowItems : tweenItems;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(items, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(items, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.animationOut = function(direction, time, transition, callback)
    {
        this.render();

        pinetreecom.ListBase.prototype.animationOut.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;
        var tweenFullShowItems = this._fullShownItems;

        this._tweenIndex = 0;
        this._tweenCount = this.onlyFullShown ? tweenFullShowItems.length : tweenItems.length;
        var items = this.onlyFullShown ? tweenFullShowItems : tweenItems;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(items, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(items, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.dispose = function()
    {
        this._isFilteredItems.splice(0, this._isFilteredItems.length);

        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        pinetreecom.ListBase.prototype.dispose.call(this);
    }

    pinetreecom.ListContainer = ListContainer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
	var HMixListContainer = function()
	{
        pinetreecom.ListBase.call(this);

        this.useRealPosition = true;

        this.startX = 0;
        this.startY = 0;

        this._fullShownItems = [];
        this._isShownItems = [];
        this._unShownItems = [];

        this._contentWidth = 0;
        this._contentHeight = 0;

        this.rowCount = 1;

        this._clipContent = false;

        __defineGetterSetter(this, ["gapX", "fullShownItems", "isShownItems", "unShownItems"]);
    }

    var p = __extends(HMixListContainer, pinetreecom.ListBase);

    p.setUpWith = function(itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
                                      rowColumn, data, showWidth, showHeight, clipContent)
    {
        pinetreecom.ListBase.prototype.setUpWith.call(this, itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
            rowColumn, data, showWidth, showHeight, clipContent);

        var len = this._data.length, item;
        for (var i = 0; i < len; i ++)
        {
            item = new itemClass();
            if(!(item instanceof pinetreecom.ListItemBase))
            {
                trace("Error at HMixListContainer::setUpWidth(), item is not instance of ListItemBase!");
                return;
            }
            item.index = i;
            item.originParent = this._itemContainer;
            item.setUpWith(this._itemWidth, this._itemHeight, data[i]);
            if(item.thumbnail)
            {
                this._loadCount ++;
                this._loaders.push(item);

                if(!this.loadOneByOne)
                {
                    item.load();
                }
                else
                {
                    item.thumbnail.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
                    item.thumbnail.ON_IO_ERROR.add(this, this.onLoadError);
                }
            }
            item.addEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);

            this._items.push(item);
        }

        if(this.loadOneByOne)
        {
            this.onLoadNext();
        }

        if(this._filterKey)
        {
            this.updateFilterKey(this._filterKey);
        }
    }

    p.getFirstPageLoadCount = function()
    {
        var i = this._isShownItems.length;
        var count = 0;
        while(i --)
        {
            if(this._isShownItems[i].thumbnail)
            {
                count ++;
            }
        }
        return count;
    }

    p.getFullShownItems = function()
    {
        return this._fullShownItems;
    }

    p.getIsShownItems = function()
    {
        return this._isShownItems;
    }

    p.getUnShownItems = function()
    {
        return this._unShownItems;
    }

    p.getContentWidth = function()
    {
        return this._contentWidth;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.updateSizeAndAlign = function()
    {
        var item;
        var rowsWidth = [], rowIndex = 0, minRowWidth = 0;
        for(var i = 0; i < this.rowCount; i ++)
        {
            rowsWidth[i] = 0;
        }

        for(i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                TweenMax.killTweensOf(item, false, {x:true, y:true});
                minRowWidth = Math.min.apply(null, rowsWidth);
                rowIndex = rowsWidth.indexOf(minRowWidth);
                item.originX = item.x = minRowWidth + this._itemGapX;
                item.originY = item.y = rowIndex * (this._itemGapY + this._itemHeight) + this._itemGapY;
                rowsWidth[rowIndex] = item.x + item.originWidth;
            }
        }

        this._contentWidth = Math.max.apply(null, rowsWidth) + this._itemGapX;
        this._contentHeight = (item.originHeight + this._itemGapY) * this.rowCount + this._itemGapY;
        this.height = this._contentHeight;
    }

    p.render = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        var item, itemStageX, itemStageY, w, h, thisStageX, thisStageY;
        if(!this.useRealPosition)
        {
            /*if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, 0);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, this._currentPos);
            }
            else*/
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, this._currentPos);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, 0);
            }
        }
        for (var i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                if(pinetree.isDevice)
                {
                    this._isShownItems.push(item);
                    this._fullShownItems.push(item);

                    item.updateState(true, true);
                    if(this._isAnimationIn)
                    {
                        item.enable = true;
                        item.setState(true, true);
                    }
                    continue;
                }

                if(this.useRealPosition)
                {
                    itemStageX = item.stageX;
                    itemStageY = item.stageY;
                }
                else
                {
                    itemStageX = thisStageX + item.originX;
                    itemStageY = thisStageY + item.originY;
                }

                /*if(pinetree.isDevice)
                {
                    itemStageX -= pinetree.getScrollX();
                    itemStageY -= pinetree.getScrollY();
                }*/

                w = item.currentWidth;
                h = item.currentHeight;

                if((itemStageX >= this.startX - w && itemStageX < this.startX + this._showWidth) &&
                    (itemStageY >= this.startY - h && itemStageY < this.startY + this._showHeight)
                )
                {
                    this._isShownItems.push(item);

                    if((itemStageX >= this.startX && itemStageX + w <= this.startX + this._showWidth) &&
                        (itemStageY >= this.startY && itemStageY + h <= this.startY + this._showHeight))
                    {
                        this._fullShownItems.push(item);

                        item.updateState(true, true);
                        if(this._isAnimationIn)
                        {
                            item.enable = true;
                            item.setState(true, true);
                        }
                    }
                    else
                    {
                        item.updateState(true, false);
                        if(this._isAnimationIn)
                        {
                            item.enable = false;
                            item.setState(true, false);
                        }
                    }
                }
                else
                {
                    this._unShownItems.push(item);

                    item.updateState(false, false);
                    if(this._isAnimationIn)
                    {
                        item.enable = false;
                        item.setState(false, false);
                    }
                }
            }
        }
    }

    p.resize = function(w, h)
    {
        pinetreecom.ListBase.prototype.resize.call(this, w, h);

        this.updateSizeAndAlign();
        this.render();
    }

    p.animationIn = function(direction, time, transition, callback)
    {
        this.resize(this._showWidth, this._showHeight);
        //this.render();

        pinetreecom.ListBase.prototype.animationIn.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.animationOut = function(direction, time, transition, callback)
    {
        this.render();

        pinetreecom.ListBase.prototype.animationOut.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.dispose = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        this._fullShownItems = null;
        this._isShownItems = null;
        this._unShownItems = null;

        pinetreecom.ListBase.prototype.dispose.call(this);
    }

    pinetreecom.HMixListContainer = HMixListContainer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
	var VMixVFitListContainer = function()
	{
        pinetreecom.ListBase.call(this);

        this.useRealPosition = true;
        this.isStable = false;
        this.minItemWidth = -1;

        this.startX = 0;
        this.startY = 0;

        this._currentItemWidth = 0;

        this._columns = [];

        this._fullShownItems = [];
        this._isShownItems = [];
        this._unShownItems = [];

        this._contentHeight = 0;

        this._clipContent = false;

        __defineGetterSetter(this, ["gapX", "fullShownItems", "isShownItems", "unShownItems"]);
    }

    var p = __extends(VMixVFitListContainer, pinetreecom.ListBase);

    p.setUpWith = function(itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
                                      rowColumn, data, showWidth, showHeight, clipContent)
    {
        pinetreecom.ListBase.prototype.setUpWith.call(this, itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
            rowColumn, data, showWidth, showHeight, clipContent);

        var len = this._data.length, item;
        for (var i = 0; i < len; i ++)
        {
            item = new itemClass();
            if(!(item instanceof pinetreecom.ListItemBase))
            {
                trace("Error at VMixVFitListContainer::setUpWidth(), item is not instance of ListItemBase!");
                return;
            }
            item.index = i;
            item.originParent = this._itemContainer;
            item.setUpWith(this._itemWidth, this._itemHeight, data[i]);
            if(item.thumbnail)
            {
                this._loadCount ++;
                this._loaders.push(item);

                if(!this.loadOneByOne)
                {
                    item.load();
                }
                else
                {
                    item.thumbnail.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
                    item.thumbnail.ON_IO_ERROR.add(this, this.onLoadError);
                }
            }
            item.addEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);

            this._items.push(item);
        }

        if(this.loadOneByOne)
        {
            this.onLoadNext();
        }

        if(this._filterKey)
        {
            this.updateFilterKey(this._filterKey);
        }

        this._currentItemWidth = itemWidth;
    }

    p.getFirstPageLoadCount = function()
    {
        var i = this._isShownItems.length;
        var count = 0;
        while(i --)
        {
            if(this._isShownItems[i].thumbnail)
            {
                count ++;
            }
        }
        return count;
    }

    p.getFullShownItems = function()
    {
        return this._fullShownItems;
    }

    p.getIsShownItems = function()
    {
        return this._isShownItems;
    }

    p.getUnShownItems = function()
    {
        return this._unShownItems;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.updateItemsSize = function()
    {
        var item, w = this._currentItemWidth, h;
        for (var i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item && this._currentItemWidth > 0)
            {
                h = Math.floor(w / item.originWidth * item.originHeight);
                item.resetSize(w, h);
            }
        }
    }

    p.align = function()
    {
        var item, i, prevRowIndex, prevRowItem, len = this._columns.length;
        for(i = 0; i < len; i ++)
        {
            this._columns[i].splice(0, this._columns[i].length);
        }

        var columnIndex = 0;
        for(i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                TweenMax.killTweensOf(item, false, {x:true, y:true});

                columnIndex = i % this._rowColumn;

                item.x = item.originX = (this._currentItemWidth + this._itemGapX) * columnIndex + this._itemGapX;
                prevRowIndex = i - this._rowColumn;
                if(prevRowIndex >= 0)
                {
                    prevRowItem = this._items[prevRowIndex];
                    if(prevRowItem)
                    {
                        item.y = item.originY = prevRowItem.y + prevRowItem.currentHeight + this._itemGapY;
                    }
                }
                else
                {
                    item.y = item.originY = this._itemGapY;
                }

                if(!this._columns[columnIndex]) this._columns[columnIndex] = [];
                this._columns[columnIndex].push(item);
            }
        }

        pinetreecom.AlignUtil.alignVMixVerticalFit(this._items, this._columns, this._rowColumn,
            this._itemGapX, this._itemGapY, this._currentItemWidth);

        var maxHeight = 0;
        for(i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item && item.originY + item.currentHeight > maxHeight)
            {
                maxHeight = item.originY + item.currentHeight;
            }
        }

        this._contentHeight = maxHeight + this._itemGapY;
        this.height = this._contentHeight;
    }

    p.render = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        var item, itemStageX, itemStageY, w = this._currentItemWidth, h, thisStageX, thisStageY;
        if(!this.useRealPosition)
        {
            if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, 0);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, this._currentPos);
            }
            else
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, this._currentPos);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, 0);
            }
        }
        for (var i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                if(pinetree.isDevice)
                {
                    this._isShownItems.push(item);
                    this._fullShownItems.push(item);

                    item.updateState(true, true);
                    if(this._isAnimationIn)
                    {
                        item.enable = true;
                        item.setState(true, true);
                    }
                    continue;
                }

                if(this._currentItemWidth <= 0)
                {
                    continue;
                }

                if(this.useRealPosition)
                {
                    itemStageX = item.stageX;
                    itemStageY = item.stageY;
                }
                else
                {
                    itemStageX = thisStageX + item.originX;
                    itemStageY = thisStageY + item.originY;
                }

                /*if(pinetree.isDevice)
                {
                    itemStageX -= pinetree.getScrollX();
                    itemStageY -= pinetree.getScrollY();
                }*/

                h = item.currentHeight;

                if((itemStageX >= this.startX - w && itemStageX < this.startX + this._showWidth) &&
                    (itemStageY >= this.startY - h && itemStageY < this.startY + this._showHeight)
                )
                {
                    this._isShownItems.push(item);

                    if((itemStageX >= this.startX && itemStageX + w <= this.startX + this._showWidth) &&
                        (itemStageY >= this.startY && itemStageY + h <= this.startY + this._showHeight))
                    {
                        this._fullShownItems.push(item);

                        item.updateState(true, true);
                        if(this._isAnimationIn)
                        {
                            item.enable = true;
                            item.setState(true, true);
                        }
                    }
                    else
                    {
                        item.updateState(true, false);
                        if(this._isAnimationIn)
                        {
                            item.enable = false;
                            item.setState(true, false);
                        }
                    }
                }
                else
                {
                    this._unShownItems.push(item);

                    item.updateState(false, false);
                    if(this._isAnimationIn)
                    {
                        item.enable = false;
                        item.setState(false, false);
                    }
                }
            }
        }
    }

    p.resize = function(w, h)
    {
        pinetreecom.ListBase.prototype.resize.call(this, w, h);

        if(!this.isStable)
        {
            if(pinetree.isDevice)
                this._rowColumn = Math.round((w - this._itemGapX) / (this._itemWidth + this._itemGapX));
            else
                this._rowColumn = Math.ceil((w - this._itemGapX) / (this._itemWidth + this._itemGapX));

            this._currentItemWidth = Math.ceil((w - this._itemGapX) / this._rowColumn) - this._itemGapX;

            if(this.minItemWidth > 0 && this._currentItemWidth < this.minItemWidth)
            {
                this._rowColumn -= 1;
                this._currentItemWidth = Math.ceil((w - this._itemGapX) / this._rowColumn) - this._itemGapX;
            }

            this.updateItemsSize();
        }
        else
        {
            this._rowColumn = Math.floor((w - this._itemGapX) / (this._itemWidth + this._itemGapX));
        }

        this.align();
        this.render();
	
	if(this._itemContainer)
        {
            this._itemContainer.width = this._showWidth;
            this._itemContainer.height = this._contentHeight;
        }
    }

    p.animationIn = function(direction, time, transition, callback)
    {
        this.resize(this._showWidth, this._showHeight);
        //this.render();

        pinetreecom.ListBase.prototype.animationIn.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.animationOut = function(direction, time, transition, callback)
    {
        this.render();

        pinetreecom.ListBase.prototype.animationOut.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.dispose = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        this._fullShownItems = null;
        this._isShownItems = null;
        this._unShownItems = null;

        var i, len = this._columns.length;
        for(i = 0; i < len; i ++)
        {
            this._columns[i].splice(0, this._columns[i].length);
        }
        this._columns.splice(0, this._columns.length);
        this._columns = null;

        pinetreecom.ListBase.prototype.dispose.call(this);
    }

    pinetreecom.VMixVFitListContainer = VMixVFitListContainer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
	var VMixHFitListContainer = function()
	{
        pinetreecom.ListBase.call(this);

        this.useRealPosition = true;
        this.minItemWidth = -1;

        this.startX = 0;
        this.startY = 0;

        this._fullShownItems = [];
        this._isShownItems = [];
        this._unShownItems = [];

        this._contentHeight = 0;

        this._clipContent = false;

        __defineGetterSetter(this, ["gapX", "fullShownItems", "isShownItems", "unShownItems"]);
    }

    var p = __extends(VMixHFitListContainer, pinetreecom.ListBase);

    p.setUpWith = function(itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
                                      rowColumn, data, showWidth, showHeight, clipContent)
    {
        pinetreecom.ListBase.prototype.setUpWith.call(this, itemClass, itemWidth, itemHeight, gapX, gapY, alignDirection,
            rowColumn, data, showWidth, showHeight, clipContent);

        var len = this._data.length, item;
        for (var i = 0; i < len; i ++)
        {
            item = new itemClass();
            if(!(item instanceof pinetreecom.ListItemBase))
            {
                trace("Error at VMixHFitListContainer::setUpWidth(), item is not instance of ListItemBase!");
                return;
            }
            item.index = i;
            item.originParent = this._itemContainer;
            item.setUpWith(this._itemWidth, this._itemHeight, data[i]);
            if(item.thumbnail)
            {
                this._loadCount ++;
                this._loaders.push(item);

                if(!this.loadOneByOne)
                {
                    item.load();
                }
                else
                {
                    item.thumbnail.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
                    item.thumbnail.ON_IO_ERROR.add(this, this.onLoadError);
                }
            }
            item.addEventListener(pinetree.MouseEvent.CLICK, this.onClickItem, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            item.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);

            this._items.push(item);
        }

        if(this.loadOneByOne)
        {
            this.onLoadNext();
        }

        if(this._filterKey)
        {
            this.updateFilterKey(this._filterKey);
        }
    }

    p.getFirstPageLoadCount = function()
    {
        var i = this._isShownItems.length;
        var count = 0;
        while(i --)
        {
            if(this._isShownItems[i].thumbnail)
            {
                count ++;
            }
        }
        return count;
    }

    p.getFullShownItems = function()
    {
        return this._fullShownItems;
    }

    p.getIsShownItems = function()
    {
        return this._isShownItems;
    }

    p.getUnShownItems = function()
    {
        return this._unShownItems;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.updateSizeAndAlign = function()
    {
        var item, item2, i, j, columnCount, columnItems = [];

        var w = 0, ow, cw = 0, ch = 0, rowWidth = this._itemGapX, rowHeight = 0, p = 0;
        for(i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                TweenMax.killTweensOf(item, false, {x:true, y:true});
                columnItems.push(item);

                ow = item.originWidth;
                rowWidth += ow + this._itemGapX;
                if(rowWidth > this._showWidth)
                {
                    p = this._showWidth / rowWidth;
                    rowHeight = Math.ceil(p * this._itemHeight);

                    columnCount = columnItems.length;
                    for(j = 0; j < columnCount; j ++)
                    {
                        item2 = columnItems[j];
                        item2.x = item2.originX = cw + this._itemGapX;
                        item2.y = item2.originY = ch + this._itemGapY;

                        if(j == columnCount - 1)
                        {
                            w = this._showWidth - cw - this._itemGapX * 2;
                        }
                        else
                        {
                            w = Math.ceil(item2.originWidth * p);
                            cw += w + this._itemGapX;
                        }

                        item2.resetSize(w, rowHeight);
                    }

                    cw = 0;
                    ch += rowHeight + this._itemGapY;
                    columnItems.splice(0, columnItems.length);
                    rowWidth = this._itemGapX;
                }

                if(i == this._dataCount - 1)
                {
                    if(columnItems.length > 0)
                    {
                        rowHeight = rowHeight || this._itemHeight;
                        columnCount = columnItems.length;
                        for(j = 0; j < columnCount; j ++)
                        {
                            item = columnItems[j];
                            item.x = item.originX = cw + this._itemGapX;
                            item.y = item.originY = ch + this._itemGapY;

                            w = Math.ceil(item.originWidth * (rowHeight / this._itemHeight));
                            cw += w + this._itemGapX;

                            item.resetSize(w, rowHeight);
                        }

                        ch += rowHeight + this._itemGapY;
                    }
                }
            }
        }

        this._contentHeight = ch + this._itemGapY;
        this.height = this._contentHeight;
    }

    p.render = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        var item, itemStageX, itemStageY, w, h, thisStageX, thisStageY;
        if(!this.useRealPosition)
        {
            if(this._alignDirection == pinetreecom.AlignUtil.ALIGN_VERTICAL)
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, 0);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, this._currentPos);
            }
            else
            {
                thisStageX = pinetreecom.CommonUtil.getStageX(this, this._currentPos);
                thisStageY = pinetreecom.CommonUtil.getStageY(this, 0);
            }
        }
        for (var i = 0; i < this._dataCount; i ++)
        {
            item = this._items[i];
            if(item)
            {
                if(pinetree.isDevice)
                {
                    this._isShownItems.push(item);
                    this._fullShownItems.push(item);

                    item.updateState(true, true);
                    if(this._isAnimationIn)
                    {
                        item.enable = true;
                        item.setState(true, true);
                    }
                    continue;
                }

                if(this.useRealPosition)
                {
                    itemStageX = item.stageX;
                    itemStageY = item.stageY;
                }
                else
                {
                    itemStageX = thisStageX + item.originX;
                    itemStageY = thisStageY + item.originY;
                }

                /*if(pinetree.isDevice)
                {
                    itemStageX -= pinetree.getScrollX();
                    itemStageY -= pinetree.getScrollY();
                }*/

                w = item.currentWidth;
                h = item.currentHeight;

                if((itemStageX >= this.startX - w && itemStageX < this.startX + this._showWidth) &&
                    (itemStageY >= this.startY - h && itemStageY < this.startY + this._showHeight)
                )
                {
                    this._isShownItems.push(item);

                    if((itemStageX >= this.startX && itemStageX + w <= this.startX + this._showWidth) &&
                        (itemStageY >= this.startY && itemStageY + h <= this.startY + this._showHeight))
                    {
                        this._fullShownItems.push(item);

                        item.updateState(true, true);
                        if(this._isAnimationIn)
                        {
                            item.enable = true;
                            item.setState(true, true);
                        }
                    }
                    else
                    {
                        item.updateState(true, false);
                        if(this._isAnimationIn)
                        {
                            item.enable = false;
                            item.setState(true, false);
                        }
                    }
                }
                else
                {
                    this._unShownItems.push(item);

                    item.updateState(false, false);
                    if(this._isAnimationIn)
                    {
                        item.enable = false;
                        item.setState(false, false);
                    }
                }
            }
        }
    }

    p.resize = function(w, h)
    {
        pinetreecom.ListBase.prototype.resize.call(this, w, h);

        this.updateSizeAndAlign();
        this.render();
    }

    p.animationIn = function(direction, time, transition, callback)
    {
        this.resize(this._showWidth, this._showHeight);
        //this.render();

        pinetreecom.ListBase.prototype.animationIn.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationIn(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationInComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationIn(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.animationOut = function(direction, time, transition, callback)
    {
        this.render();

        pinetreecom.ListBase.prototype.animationOut.call(this, direction, time, transition, callback);

        if(direction == undefined) direction = pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM;
        if(time == undefined || isNaN(time)) time = this.animateTime;

        var tweenItems = this._isShownItems;

        this._tweenIndex = 0;
        this._tweenCount = tweenItems.length;

        var item, i, index = 0;
        if(direction == pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM)
        {
            for(i = 0; i < this._dataCount; i ++)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
        else
        {
            for(i = this._dataCount - 1; i >= 0; i --)
            {
                item = this._items[i];
                if (pinetreecom.ArrayUtil.contains(tweenItems, item))
                {
                    item.animationOut(time, this.animateDelay * index, transition || this.transition,
                        Delegate.create(this, this.onAnimationOutComplete, callback));
                    index ++;
                }
                else
                {
                    item.animationOut(0, 0, transition || this.transition, null);
                }
            }
        }
    }

    p.dispose = function()
    {
        this._fullShownItems.splice(0, this._fullShownItems.length);
        this._isShownItems.splice(0, this._isShownItems.length);
        this._unShownItems.splice(0, this._unShownItems.length);

        this._fullShownItems = null;
        this._isShownItems = null;
        this._unShownItems = null;

        pinetreecom.ListBase.prototype.dispose.call(this);
    }

    pinetreecom.VMixHFitListContainer = VMixHFitListContainer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-7-24.
 */
(function()
{
    var MusicPlayer = function(loop)
    {
        this._isInitialized = false;

        this._loop = loop == undefined ? true : loop;
        this._urls = null;

        this._currentSound = null;
        this._currentIndex = 0;
        this._currentId = "";

        this._soundIds = null;

        this._mute = false;
        this._volume = 1.0;

        this._onPlayCompleteHandler = Delegate.create(this, this._onPlayComplete);

        __defineGetterSetter(this, ["volume", "mute", "duration", "position", "isInitialized"]);
    }

    var p = MusicPlayer.prototype;

    p.startWith = function(urls)
    {
        this._urls = urls;
        var i, len = this._urls.length, id;
        this._soundIds = [];
        this._totalCount = len;

        for(i = 0; i < len; i ++)
        {
            id = "sound_" + i;
            this._soundIds.push(id);
        }

        createjs.Sound.alternateExtensions = ["mp3", "ogg"];
        createjs.Sound.addEventListener("fileload", Delegate.create(this, this._onSoundLoadInit));

        this._currentIndex = 0;
        this._load(this._currentIndex);

        this._isInitialized = true;
    }

    p._load = function(index)
    {
        var url = this._urls[index];
        var id = this._soundIds[index];

        if(this._currentSound)
        {
            this._currentSound.stop();
            this._currentSound.removeEventListener("complete", this._onPlayCompleteHandler);
            this._currentSound = null;

            if(this._currentId)
            {
                createjs.Sound.removeSound(this._currentId);
            }
        }

        this._currentId = id;
        createjs.Sound.registerSound(url, id);
    }

    p._onSoundLoadInit = function(evt)
    {
        var id = this.getSrcByIndex(this._currentIndex);
        this._currentSound = createjs.Sound.createInstance(id);
        this._currentSound.addEventListener("complete", this._onPlayCompleteHandler);
        this._currentSound.play();
    }

    p._onPlayComplete = function(evt)
    {
        this._currentIndex ++;
        if(this._currentIndex > this._totalCount - 1)
        {
            if(this._loop)
            {
                this._currentIndex = 0;
                this._load(this._currentIndex);
            }
        }
        else
        {
            this._load(this._currentIndex);
        }
    }

    p.play = function()
    {
        this._currentSound && this._currentSound.play();
    }

    p.pause = function()
    {
        this._currentSound && this._currentSound.pause();
    }

    p.resume = function()
    {
        this._currentSound && this._currentSound.resume();
    }

    p.stop = function()
    {
        this._currentSound && this._currentSound.stop();
    }

    p.getVolume = function() { return this._volume; }
    p.setVolume = function(value)
    {
        if(value < 0) value = 0;
        if(value > 1) value = 1;

        this._volume = value;
        createjs.Sound.setVolume(value);
    }

    p.getMute = function() { return this._mute; }
    p.setMute = function(value)
    {
        this._mute = value;
        createjs.Sound.setMute(value);
    }

    p.getDuration = function()
    {
        if(this._currentSound)
            return this._currentSound.getDuration();
        return 0;
    }

    p.getPosition = function()
    {
        if(this._currentSound)
            return this._currentSound.getPosition();
        return 0;
    }

    p.setPosition = function(value)
    {
        if(this._currentSound)
            this._currentSound.setPosition(value);
    }

    p.stopAll = function()
    {
        createjs.Sound.stop();
    }

    p.removeSound = function(id)
    {
        createjs.removeSound(id);
    }

    p.removeAllSounds = function()
    {
        createjs.Sound.removeAllSounds();
    }

    p.getSrcByIndex = function(index)
    {
        if(!this._soundIds || this._soundIds.length < 1) return null;
        return this._soundIds[index];
    }

    p.getIsInitialized = function()
    {
        return this._isInitialized;
    }

    p.dispose = function()
    {
        this.stopAll();
        f(this._currentSound)
        {
            this._currentSound.removeEventListener("complete", this._onPlayCompleteHandler);
            this._currentSound = null;
            createjs.Sound.removeAllSounds();
        }
    }

    pinetreecom.MusicPlayer = MusicPlayer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-30.
 */
(function()
{
    var SocialContainer = function(gapX, gapY, maxWidth, onOverAlpha, onOutAlpha)
    {
        pinetree.Sprite.call(this);

        this._icons = null;
        this._loaderQueue = null;
        this._datas = null;
        this._maxWidth = maxWidth;

        this._contentWidth = 0;
        this._contentHeight = 0;

        this._gapX = __defaultSet(gapX, 5);
        this._gapY = __defaultSet(gapY, 5);

        this._row = 1;

        this._onOverAlpha = __defaultSet(onOverAlpha, 1.0);
        this._onOutAlpha = __defaultSet(onOutAlpha, 1.0);

        this._loaderQueue = new pinetreecom.LoaderQueue();
        this._loaderQueue.ON_COMPLETE_ONE.add(this, this.onEachComplete);
        this._loaderQueue.ON_COMPLETE_ALL.add(this, this.onAllComplete);

        this.ON_LOAD_EACH_COMPLETE = new pinetree.Signal();
        this.ON_LOAD_ALL_COMPLETE = new pinetree.Signal();

        __defineGetterSetter(this, ["data"]);
    }

    var p = __extends(SocialContainer, pinetree.Sprite);

    p.setData = function(value)
    {
        this._datas = value;

        var len = value.length, loader;
        var loaders = [];
        for(var i = 0; i < len; i ++)
        {
            loader = new pinetreecom.BitmapLoader();
            loader.index = i;
            loader.url = this._datas[i].src;
            loaders.push(loader);
        }

        this.removeAllChildren();

        this._icons && this._icons.splice(0, this._icons.length);
        this._icons = [];

        this._loaderQueue.reset();
        this._loaderQueue.addLoaders(loaders);
        this._loaderQueue.start();
    }

    p.onEachComplete = function(loader)
    {
        var bd = loader.bitmapData.clone();
        var icon = new pinetreecom.SocialIcon(this._datas[loader.index], bd, this._onOverAlpha, this._onOutAlpha);
        icon.ON_OVER.add(this, this.onOverIcon);
        icon.ON_OUT.add(this, this.onOutIcon);

        icon.x = this._contentWidth;
        icon.y = this._contentHeight;
        this._contentWidth += bd.width + this._gapX;

        if(this._contentWidth > this._maxWidth)
        {
            this._contentWidth = 0;
            this._contentHeight += bd.height + this._gapY;
            this._row ++;
        }

        icon.show();
        this.addChild(icon);
        this._icons.push(icon);

        this.ON_LOAD_EACH_COMPLETE.dispatch();
    }

    p.onAllComplete = function(unused)
    {
        this.ON_LOAD_ALL_COMPLETE.dispatch();

        this._loaderQueue.dispose();
        this._loaderQueue = null;
    }

    p.onOverIcon = function(socialIcon)
    {
        var icon;
        for (var iconKey in this._icons)
        {
            icon = this._icons[iconKey];
            if(icon && icon != socialIcon)
            {
                icon.toBlackWhite(0.3);
            }
        }
    }

    p.onOutIcon = function(socialIcon)
    {
        var icon;
        for (var iconKey in this._icons)
        {
            icon = this._icons[iconKey];
            if(icon && icon.isBlackWhite)
            {
                icon.toColorful(0.3);
            }
        }
    }

    p.dispose = function()
    {
        if(this._icons && this._icons.length > 0)
        {
            var icon;
            for (var iconKey in this._icons)
            {
                icon = this._icons[iconKey];
                icon && icon.dispose();
            }

            this._icons.splice(0, this._icons.length);
            this._icons = null;
        }

        this._loaderQueue && this._loaderQueue.dispose();
        this._loaderQueue = null;

        this.ON_LOAD_EACH_COMPLETE && this.ON_LOAD_EACH_COMPLETE.removeAll();
        this.ON_LOAD_EACH_COMPLETE = null;

        this.ON_LOAD_ALL_COMPLETE && this.ON_LOAD_ALL_COMPLETE.removeAll();
        this.ON_LOAD_ALL_COMPLETE = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.SocialContainer = SocialContainer;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-7-30.
 */
(function()
{
    var SocialIcon = function(data, bd, onOverAlpha, onOutAlpha)
    {
        pinetreecom.UIComponent.call(this);

        this._data = data;
        this._bd = bd;

        this._blackWhiteBD = null;

        this._bmp = null;
        this._blackWhiteBmp = null;

        this._container = null;

        this._isBlackWhite = true;

        this._onOverAlpha = __defaultSet(onOverAlpha, 1.0);
        this._onOutAlpha = __defaultSet(onOutAlpha, 1.0);

        this._tip = null;

        this.buttonMode = true;

        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();

        __defineGetterSetter(this, ["isBlackWhite"]);
    }

    var p = __extends(SocialIcon, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._container = new pinetree.Sprite();
            this._container.buttonMode = true;
            this.addChild(this._container);

            this._container.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            this._container.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this._container.addEventListener(pinetree.MouseEvent.CLICK, this.onClick, this);

            this._bmp = new pinetree.Bitmap(this._bd);
            this._bmp.alpha = this._onOverAlpha;
            this._container.addChild(this._bmp);

            this._blackWhiteBD = pinetreecom.CommonUtil.getGrayBitmapData(this._bd);
            this._blackWhiteBmp = new pinetree.Bitmap(this._blackWhiteBD);
            this._blackWhiteBmp.alpha = 0;
            this._container.addChild(this._blackWhiteBmp);

            this.alpha = 0;

            this._tip = new pinetreecom.ToolTip(pt.bgColor, 12, pt.onOverColor, 1, 8, 3, 12);
            this.addChild(this._tip);
            this._tip.text = this._data.name;
            this._tip.x = (this._blackWhiteBD.width - this._tip.width) >> 1;
            this._tip.y = - this._tip.contentHeight;
            this._tip.mouseEnabled = this._tip.mouseChildren = false;
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p.show = function()
    {
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Linear.easeNone});
    }

    p.onOver = function(evt)
    {
        this._tip && this._tip.show();
        TweenMax.to(this._bmp, this.tweenTime, {alpha:this._onOverAlpha, ease:this.transition});
        this.ON_OVER.dispatch(this);
    }

    p.onOut = function(evt)
    {
        this._tip && this._tip.hide();
        TweenMax.to(this._bmp, this.tweenTime, {alpha:this._onOutAlpha, ease:this.transition});
        this.ON_OUT.dispatch(this);
    }

    p.onClick = function(evt)
    {
        navigateToURL(this._data.link, this._data.window);
    }

    p.toBlackWhite = function(time, transition, callback)
    {
        time = __defaultSet(time, 0.5);
        transition = __defaultSet(transition, Quart.easeOut);

        TweenMax.to(this._blackWhiteBmp, time, {alpha:1.0, ease:transition, onComplete:callback});
        this._isBlackWhite = true;
    }

    p.toColorful = function(time, transition, callback)
    {
        time = __defaultSet(time, 0.5);
        transition = __defaultSet(transition, Quart.easeOut);

        TweenMax.to(this._blackWhiteBmp, time, {alpha:0, ease:transition, onComplete:callback});
        this._isBlackWhite = false;
    }

    p.getIsBlackWhite = function()
    {
        return this._isBlackWhite;
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        if(this._tips)
        {
            this._tips.dispose();
            this._tips = null;
        }

        this._bd && this._bd.dispose();
        this._bd = null;

        this._blackWhiteBD && this._blackWhiteBD.dispose();
        this._blackWhiteBD = null;

        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OVER = null;

        this.ON_OUT && this.ON_OUT.removeAll();
        this.ON_OUT = null;

        this._container.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
        this._container.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
        this._container.removeEventListener(pinetree.MouseEvent.CLICK, this.onClick, this);

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.SocialIcon = SocialIcon;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-10-22.
 */
(function()
{
	var AniText = function(fontSize, textColor, onlyUpperCase)
	{
		pinetree.Sprite.call(this);

        this._onlyUpperCase = __defaultSet(onlyUpperCase, false);
		
		this._txt = new pinetree.TextField();
		this._txt.fontSize = fontSize;
		this._txt.textColor = textColor;
		this.addChild(this._txt);
		
		this._chars= ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];
        
        this._texts = [];
        this._text = "";
        this._textLength = 0;
        this._contentHeight = 0;

        this.startDelay = 0;
		this.tweenTime = 0.2;
		this.tweenDelay = 0.03;
        this.ON_TWEEN_START = new pinetree.Signal();
		this.ON_TWEEN_COMPLETE = new pinetree.Signal();
		this.ON_TWEEN_UPDATE = new pinetree.Signal();

        __defineGetterSetter(this, ["text", "contentHeight"]);
	}
	
	var p = __extends(AniText, pinetree.Sprite);
		
	/**
	 * set the text and then run the animation.
	 * @param	text
	 * @param	delay
	 */
	p.setText = function(text)
	{
        this._text = text;

		this._textLength = text.length;
		
		if (this._textLength < 1 || text == "" || text == " ")
		{
			this._txt.text = "";
			this.ON_TWEEN_COMPLETE.dispatch(0);
			return;
		}

        this._txt.alpha = 0;
        this._txt.text = text;
        this.ON_TWEEN_START.dispatch(this._txt.width);
        this._contentHeight = this._txt.height;
        this._txt.text = "";
        this._txt.alpha = 1;

        this._texts.splice(0, this._texts.length);
		var i = 0;
		
		TweenMax.killTweensOf(this);
		for(i; i < this._textLength; i ++)
		{
			TweenMax.to(this, this.tweenTime, {delay:i * this.tweenDelay + this.startDelay, ease:Linear.easeNone,
				onUpdate:this._onTweenUpdate, onUpdateParams:[this, i],
				onComplete:this._onTweenComplete, onCompleteParams:[this, i]}
			);
		}
	}

    p.clear = function()
    {
        this._text = "";
        this._txt.text = "";
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }
	
	p._onTweenUpdate = function(owner, index)
	{
		var c = owner._getRandomChar();
        owner._texts[index] = c;
        owner._txt.text = owner._makeString(owner._texts);
        owner.ON_TWEEN_UPDATE.dispatch(owner._txt.width);
	}
	
	p._onTweenComplete = function(owner, index)
	{
        owner._texts[index] = owner._text.substr(index, 1);
        owner._txt.text = owner._makeString(owner._texts);
		if (index == this._textLength - 1)
		{
            owner.ON_TWEEN_COMPLETE.dispatch(owner._txt.width);
		}
	}
	
	/**
	 * produce random character
	 * @return String
	 */
	p._getRandomChar = function()
	{
		var c = this._chars[Math.round(Math.random() * (this._chars.length - 1))];
		if(!this._onlyUpperCase)
        {
            if(Math.round(Math.random()) == 1) c = c.toLowerCase();
        }
		return c;
	}
	
	/**
	 * combine the array's content to generate a new string.
	 * @param	array
	 * @return String
	 */
	p._makeString = function(array)
	{
		var i = 0;
		var str = "";
		while(i < array.length)
		{
			str += array[i ++];
		}
		return str;
	}
	
	p.dispose = function()
	{
		TweenMax.killTweensOf(this);

        this.ON_TWEEN_START && this.ON_TWEEN_START.removeAll();
        this.ON_TWEEN_START = null;
	
		this.ON_TWEEN_COMPLETE && this.ON_TWEEN_COMPLETE.removeAll();
		this.ON_TWEEN_COMPLETE = null;
		
		this.ON_TWEEN_UPDATE && this.ON_TWEEN_UPDATE.removeAll();
		this.ON_TWEEN_UPDATE = null;
		
		pinetree.Sprite.prototype.dispose.call(this);
	}
	
	pinetreecom.AniText = AniText;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-8-20.
 */
(function()
{
    var MiniSlideshowImage = function()
    {
        pinetreecom.Thumbnail.call(this);
    }

    var p = __extends(MiniSlideshowImage, pinetreecom.Thumbnail);

    p.dispose = function()
    {
        pinetreecom.Thumbnail.prototype.dispose.call(this);
    }

    pinetreecom.MiniSlideshowImage = MiniSlideshowImage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-8-20.
 */
(function()
{
    var MiniSlideshow = function(buttonSize)
    {
        pinetreecom.UIComponent.call(this);

        this._buttonList = null;
        this._timer = null;
        this._images = null;
    }

    var p = __extends(MiniSlideshow, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._buttonList = new pinetreecom.ButtonList(pinetreecom.MiniCircle, 0);
            this.addChild(this._buttonList);

            this._buttonList.ON_CLICK.add(this, this.onClickButton);
            this._buttonList.gap = 5;
            this._buttonList.onOverColor = pt.onOverColor;
            this._buttonList.onOutColor = pt.bgColor;
            this._buttonList.onOverAlpha = 1.0;
            this._buttonList.onOutAlpha = 0.8;
            this._buttonList.itemSize = pinetree.isDevice ? buttonSize * 2 : buttonSize;
            this._buttonList.alignType = pinetreecom.ButtonList.ALIGN_HORIZONTAL;
        }
        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p.setData = function(value)
    {
        this._buttonList.init();
        this._buttonList.show();
    }

    p.dispose = function()
    {
        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreecom.MiniSlideshow = MiniSlideshow;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-12.
 */
(function()
{
    var AnimateSlideVo = function(ui, time, delay, transition)
    {
        this.bannerUI = __defaultSet(ui, null);
        this.time = __defaultSet(time, 1.0);
        this.delay = __defaultSet(delay, 0);
        this.transition = __defaultSet(transition, Quart.easeOut);
    }

    var p = AnimateSlideVo.prototype;

    p.dispose = function()
    {
        this.bannerUI && this.bannerUI.dispose();
        this.bannerUI = null;
    }

    pinetreecom.AnimateSlideVo = AnimateSlideVo;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-12.
 */
(function()
{
    var AnimateSlideBase = function()
    {
        pinetree.Sprite.call(this);
        this._data = null;

        this.originX = 0;
        this.originY = 0;

        __defineGetterSetter(this, ["data"]);
    }

    var p = __extends(AnimateSlideBase, pinetree.Sprite);

    p.setData = function(value)
    {
        this._data = value;
    }

    p.run = function(time, delay, transition, owner, callback, params)
    {
        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(Quart.easeOut);

        pinetreecom.DelayCaller.delayCall(this, this.animationIn, delay, [time, transition, owner, callback, params]);
    }

    p.back = function(time, delay, transition, owner, callback, params)
    {
        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(Quart.easeOut);

        pinetreecom.DelayCaller.delayCall(this, this.animationOut, delay, [time, transition, owner, callback, params]);
    }

    p.animationIn = function(time, transition, owner, callback, params)
    {

    }

    p.onAnimationInComplete = function(owner, callback, params)
    {
        if(callback)
        {
            callback.apply(owner, params);
        }
    }

    p.animationOut = function(time, transition, owner, callback, params)
    {

    }

    p.onAnimationOutComplete = function(owner, callback, params)
    {
        if(callback)
        {
            callback.apply(owner, params);
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.AnimateSlideBase = AnimateSlideBase;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-11.
 */
(function()
{
    var AnimateSlider = function()
    {
        pinetree.Sprite.call(this);

        this.ON_ANIMATE_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(AnimateSlider, pinetree.Sprite);

    /**
     * NOTE: banners should be type of pinetreecom.AnimateSlideVo
     * @param banners
     */
    p.run = function(banners)
    {
        if(!banners || banners.length < 1) return;

        var len = banners.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = banners[i];
            if(vo && vo.bannerUI)
            {
                vo.bannerUI.animationIn(vo.time, vo.delay, vo.transition, this, this._onAnimateEachEnd, [i, len - 1, "run"]);
            }
        }
    }

    /**
     * NOTE: banners should be type of pinetreecom.AnimateSlideVo
     * @param banners
     */
    p.back = function(banners)
    {
        if(!banners || banners.length < 1) return;

        var len = banners.length, vo;
        for(var i = len - 1; i >= 0; i --)
        {
            vo = banners[i];
            if(vo && vo.bannerUI)
            {
                vo.bannerUI.animationOut(vo.time, vo.delay, vo.transition, this, this._onAnimateEachEnd, [i, 0, "back"]);
            }
        }
    }

    p._onAnimateEachEnd = function(startIndex, endIndex, type)
    {
        if(startIndex == endIndex)
        {
            this.ON_ANIMATE_COMPLETE.dispatch(type);
        }
    }

    p.dispose = function()
    {
        this.ON_ANIMATE_COMPLETE && this.ON_ANIMATE_COMPLETE.removeAll();
        this.ON_ANIMATE_COMPLETE = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.AnimateSlider = AnimateSlider;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-22.
 */
(function()
{
    var ToolTip = function(textColor, fontSize, bgColor, bgAlpha, gapX, gapY, tweenY)
    {
        pinetree.Sprite.call(this);

        this._container = new pinetree.Sprite();
        this._container.alpha = 0;
        this.addChild(this._container);

        this._textColor = __defaultSet(textColor, pt.textColor);
        this._fontSize = __defaultSet(fontSize, 12);

        this._bgColor = __defaultSet(bgColor, pt.bgColor);
        this._bgAlpha = __defaultSet(bgAlpha, 1.0);

        this._bg = new pinetree.CanvasQuad(3, 3, 3, 3);
        this._bg.color = this._bgColor;
        this._bg.alpha = this._bgAlpha;
        this._container.addChild(this._bg);

        this._icon = new pinetree.TextureImage();
        this._container.addChild(this._icon);
        var texture = pt.getCommonTexture(pinetreepages.EnumTextures.DOWN_TRIANGLE_ICON);
        this._icon.texture = texture;
        pinetreecom.ColorUtil.setColor(this._icon, this._bgColor);
        this._icon.alpha = this._bgAlpha;

        this._gapX = __defaultSet(gapX, 10);
        this._gapY = __defaultSet(gapY, 5);

        this._tweenY = __defaultSet(tweenY, 5);

        this._text = "";
        this._txt = null;

        this.contentHeight = 0;

        this.tweenTime = 1.0;
        this.transition = Quart.easeOut;

        this.selectable = false;

        __defineGetterSetter(this, ["text"]);
    }

    var p = __extends(ToolTip, pinetree.Sprite);

    p.setText = function(value)
    {
        if(this._text == value) return;
        this._text = value;

        if(!this._txt)
        {
            this._txt = new pinetree.TextField();
            this._txt.className += " tool_tip";
            this._container.addChild(this._txt);
            this._txt.x = this._gapX;
            this._txt.y = this._gapY;
            this._txt.selectable = false;
        }

        this._txt.text = this._text;
        this._bg.width = this._txt.width + this._gapX + this._gapX;
        this._bg.height = this._txt.height + this._gapY + this._gapY;

        this._icon.x = (this._bg.width - this._icon.width) >> 1;
        this._icon.y = this._bg.height;

        this.contentHeight = this._icon.y + this._icon.height;
    }

    p.show = function()
    {
        this._container.y = 0;
        this._container.alpha = 0;
        this._container.visible = true;
        TweenMax.to(this._container, this.tweenTime / 3, {y:-this._tweenY, alpha:1, ease:this.transition});
    }

    p.hide = function()
    {
        TweenMax.to(this._container, this.tweenTime / 3, {y:0, alpha:0, ease:this.transition,
            onComplete:this._onHideComplete, onCompleteParams:[this._container]});
    }

    p._onHideComplete = function(target)
    {
        target.visible = false;
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ToolTip = ToolTip;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-25.
 */
(function()
{
    /**
     * @param classes, Array, contains some class which extend pinetreecom.ParticleObjectBase
     * @constructor
     */
    var ParticleAnimator = function(classes, colors)
    {
        pinetree.Sprite.call(this);

        this._items = [];
        this._colors = colors;

        this.animatorCount = 10;

        this._classes = classes;

        this.maxAlpha = 0.1;

        if(this._classes && this._classes.length > 0)
        {
            var item, classRef, classLen = this._classes.length;
            for(var i = 0; i < this.animatorCount; i ++)
            {
                classRef = this._classes[Math.floor(Math.random() * classLen)];
                item = new classRef(this._colors, this.maxAlpha);
                this.addChild(item);
                this._items.push(item);
            }
        }

        this._isShowing = false;

        this.alpha = 0;

        this.tweenTime = 1.0;
        this.transition = Linear.easeNone;
    }

    var p = __extends(ParticleAnimator, pinetree.Sprite);

    p.show = function(delay)
    {
        if(this._isShowing) return;
        this._isShowing = true;

        delay = __defaultSet(delay, 2.0);

        this.alpha = 0;

        pinetreecom.DelayCaller.delayCall(this, this._onStartShow, delay);
    }

    p._onStartShow = function()
    {
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:this.transition});
        this.addEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame);
    }

    p.hide = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        if(!this._isShowing)
        {
            this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame);
            return;
        }
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame);
        this._isShowing = false;

        TweenMax.to(this, this.tweenTime, {alpha:0, ease:this.transition,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        //owner.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame);
    }

    p._onEnterFrame = function(evt)
    {
        var i = this._items.length;
        while(i --)
        {
            this._items[i].update();
        }
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onEnterFrame);
        var i = this._items.length;
        while(i --)
        {
            this._items[i].dispose();
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ParticleAnimator = ParticleAnimator;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-25.
 */
(function()
{
	var ParticleObjectBase = function(colors, maxAlpha)
	{
        pinetree.Sprite.call(this);

        this._colors = colors;
        this.maxAlpha = __defaultSet(maxAlpha, 1.0);;
        
		this._SPEED_CONST = 1.0;
		
		this._speedX = 0;
		this._speedY = 0;
		this._speedAdd = 0;
		this._minX = 0;
		this._maxX = 0;
		this._minY = 0;
		this._maxY = 0;
		this._alphaAdd = 0;

		this._isTweening = false;
		this._isWorking = false;

		this.tweenTime = 1.0;
		this.transition = Linear.easeNone;
		
        this.alpha = 0;
    }

    var p = __extends(ParticleObjectBase, pinetree.Sprite);

    p.update = function()
    {
        if(!this.stage)
        {
            return;
        }

        if(!this._isWorking)
        {
            this._isWorking = this._refresh();
            if(!this._isWorking)
            {
                return;
            }
            this.show();
        }
        if(this.x < this._minX || this.x > this._maxX || this.y < this._minY || this.y > this._maxY)
        {
            this.hide();
            return;
        }

        this.x += this._speedX;
        this.y += this._speedY;

        if(this._speedAdd != 0)
        {
            this._speedX += this._speedAdd;
            this._speedY += this._speedAdd;
        }

        if(this._alphaAdd != 0)
        {
            if(this._alphaAdd < 0 && this.alpha > 0)
            {
                this.alpha += this._alphaAdd;
            }
            else if(this._alphaAdd > 0 && this.alpha < this.maxAlpha)
            {
                this.alpha += this._alphaAdd;
            }
        }
    }

    p.draw = function()
    {
        //for override
    }

    p._refresh = function()
    {
        var randValue = Math.random();
        if(randValue < 0.33)
        {
            this.draw();

            this._minX = - this.width - 30/* + this.stage.stageWidth * Math.random() * 0.2*/;
            this._maxX = this.stage.stageWidth /** (Math.random() * 0.2 + 0.8)*/;
            this._minY = - this.height - 30/* + this.stage.stageHeight * Math.random() * 0.2*/;
            this._maxY = this.stage.stageHeight/* * (Math.random() * 0.2 + 0.8)*/;
            this._speedX = this._SPEED_CONST * Math.random() * (Math.random() > 0.5 ? 1 : -1);
            this._speedY = this._SPEED_CONST * Math.random() * (Math.random() > 0.5 ? 1 : -1);
            //this._speedAdd = this._SPEED_CONST * Math.random() * 0.2 - this._SPEED_CONST * 0.1;
            this.x = Math.floor(Math.random() * (this._maxX - this._minX) + this._minX);
            this.y = Math.floor(Math.random() * (this._maxY - this._minY) + this._minY);
            return true;
        }
        return false;
    }

    p.hide = function()
    {
        this._isWorking = false;
        this._alphaAdd = -0.01;
    }

    p.show = function()
    {
        this._isWorking = true;
        this.alpha = 0;
        this._alphaAdd = 0.01;
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ParticleObjectBase = ParticleObjectBase;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-25.
 */
(function()
{
    var ParticleCircle = function(colors, maxAlpha)
    {
        pinetreecom.ParticleObjectBase.call(this, colors, maxAlpha);
    }

    var p = __extends(ParticleCircle, pinetreecom.ParticleObjectBase);

    p.draw = function()
    {
        var color = 0;
        if(this._colors && this._colors.length > 0)
        {
            color = this._colors[Math.floor(Math.random() * this._colors.length)];
        }
        else
        {
            color = Math.floor(Math.random() * 0xffffff);
        }

        this.graphics.clear();
        this.graphics.lineStyle(0, 0, 0);
        var w = Math.ceil(20 + 30 * Math.random());
        this.graphics.beginFill(color, 1);
        this.graphics.drawCircle(w, w, w);
        this.graphics.endFill();
    }

    p.dispose = function()
    {
        pinetreecom.ParticleObjectBase.prototype.dispose.call(this);
    }

    pinetreecom.ParticleCircle = ParticleCircle;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-11-10.
 */
(function()
{
    var GridAnimation = function(column, row)
    {
        pinetree.Sprite.call(this);

        this._column = column;
        this._row = row;

        this._tweenIndex = 0;
        this._tweenTotal = this._row * this._column;

        this._canvases = [];

        this._contentWidth = 0;
        this._contentHeight = 0;

        this.ON_TWEEN_IN_COMPLETE = new pinetree.Signal();
        this.ON_TWEEN_OUT_COMPLETE = new pinetree.Signal();

        this._container = document.createElement("container");
        this._container.style.position = "absolute";
        this._htmlElement.appendChild(this._container);

        this.tweenTime = 1.0;
        this.tweenDelay = 0.5;
        this.transition = Quart.easeOut;

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
    }

    var p = __extends(GridAnimation, pinetree.Sprite);

    /**
     *
     * @param image, native Image Element
     * @param scale
     */
    p.initWith = function(image, scale, alpha)
    {
        this._canvases.splice(0, this._canvases.length);

        this.removeAllElementNodes(this._container);

        var currentWidth = image.naturalWidth * scale;
        var currentHeight = image.naturalHeight * scale;

        this._contentWidth = Math.floor(currentWidth);
        this._contentHeight = Math.floor(currentHeight);

        var data = pinetree.BitmapUtil.getImageData(image,
            new pinetree.Rectangle(0, 0, currentWidth, currentHeight),
            false
        );

        var canvas, ctx, i, j;
        var cw = Math.ceil(currentWidth / this._column);
        var ch = Math.ceil(currentHeight / this._row);

        for(i = 0; i < this._column; i ++)
        {
            for(j = 0; j < this._row; j ++)
            {
                canvas = document.createElement("canvas");
                canvas.style.position = "absolute";
                canvas.width = currentWidth;
                canvas.height = currentHeight;
                this._container.appendChild(canvas);
                canvas.style.opacity = alpha || 0;

                ctx = canvas.getContext("2d");
                ctx.putImageData(data, 0, 0, cw * i, ch * j, cw, ch);

                this._canvases.push(canvas);
            }
        }
    }

    p.tweenIn = function(callback)
    {
        var canvas;
        this._tweenIndex = 0;

        for(var i = 0; i < this._tweenTotal; i ++)
        {
            canvas = this._canvases[i];
            if(canvas)
            {
                TweenMax.to(canvas.style, this.tweenTime, {opacity:1, delay:this.tweenDelay * Math.random(),
                    ease:this.transition, onComplete:this.onTweenInComplete, onCompleteParams:[this, callback]});
            }
        }
    }

    p.onTweenInComplete = function(owner, callback)
    {
        owner._tweenIndex ++;
        if(owner._tweenIndex == owner._tweenTotal)
        {
            owner.ON_TWEEN_IN_COMPLETE.dispatch();
            callback && callback();
        }
    }

    p.tweenOut = function(callback)
    {
        var canvas;
        this._tweenIndex = 0;

        for(var i = 0; i < this._tweenTotal; i ++)
        {
            canvas = this._canvases[i];
            if(canvas)
            {
                TweenMax.to(canvas.style, this.tweenTime, {opacity:0, delay:this.tweenDelay * Math.random(),
                    ease:this.transition, onComplete:this.onTweenOutComplete, onCompleteParams:[this, callback]});
            }
        }
    }

    p.onTweenOutComplete = function(owner, callback)
    {
        owner._tweenIndex ++;
        if(owner._tweenIndex == owner._tweenTotal)
        {
            owner.ON_TWEEN_OUT_COMPLETE.dispatch();
            callback && callback();
        }
    }

    p.reset = function()
    {
        if(this._canvases && this._canvases.length > 0)
        {
            var i, len = this._canvases.length, canvas;
            for(i = 0; i < len; i ++)
            {
                canvas = this._canvases[i];
                if(canvas)
                {
                    TweenMax.killTweensOf(canvas.style, false, {opacity:true});
                }
            }
        }

        this._canvases.splice(0, this._canvases.length);
        this.removeAllElementNodes(this._container);
    }

    p.getContentWidth = function()
    {
        return this._contentWidth;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.dispose = function()
    {
        if(this._canvases && this._canvases.length > 0)
        {
            var i, len = this._canvases.length, canvas;
            for(i = 0; i < len; i ++)
            {
                canvas = this._canvases[i];
                if(canvas)
                {
                    TweenMax.killTweensOf(canvas.style, false, {opacity:true});
                }
            }

            this._canvases.splice(0, this._canvases.length);
            this._canvases = null;
        }

        this.ON_TWEEN_IN_COMPLETE && this.ON_TWEEN_IN_COMPLETE.removeAll();
        this.ON_TWEEN_IN_COMPLETE = null;

        this.ON_TWEEN_OUT_COMPLETE && this.ON_TWEEN_OUT_COMPLETE.removeAll();
        this.ON_TWEEN_OUT_COMPLETE = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.GridAnimation = GridAnimation;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/17.
 */
(function()
{
    var SimpleImageRender = function(w, h, data)
    {
        pinetree.Sprite.call(this);

        this._data = data;

        this.index = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this._imageWidth = w;
        this._imageHeight = h;

        this._imageLoader = new pinetreecom.Thumbnail(this._imageWidth, this._imageHeight, 0, 0, true);
        this._imageLoader.alpha = 0;
        this._imageLoader.visible = false;
        this._imageLoader.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
        this._imageLoader.ON_IO_ERROR.add(this, this.onIOError);
        this.addChild(this._imageLoader);

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.ON_IO_ERROR = new pinetree.Signal();

        __defineGetterSetter(this, ["imageLoader", "imageWidth", "imageHeight", "isOnStage"]);
    }

    var p = __extends(SimpleImageRender, pinetree.Sprite);

    p.load = function(url)
    {
        this._imageLoader.load(url);
    }

    p.onLoadComplete = function(image)
    {
        this._imageLoader.setRealFitSize(this._imageWidth, this._imageHeight);
        this.ON_LOAD_COMPLETE.dispatch(this);
    }

    p.onIOError = function(evt)
    {
        trace("pinetreecom.SimpleImageRender::load(), IOError!");
        this.ON_IO_ERROR.dispatch(evt);
    }

    p.show = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this._imageLoader.visible = true;

        if((time == 0 && delay == 0) || !this.isOnStage)
        {
            this._imageLoader.alpha = 1
            callback && callback();
            return;
        }

        TweenMax.to(this._imageLoader, time, {alpha:1, delay:delay, ease:transition || this.transition,
            onComplete:callback});
    }

    p.hide = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if((time == 0 && delay == 0) || !this.isOnStage)
        {
            this._imageLoader.alpha = 0
            this._onHideComplete(this._imageLoader, callback);
            return;
        }

        TweenMax.to(this._imageLoader, time, {alpha:0, delay:delay, ease:transition || this.transition,
            onComplete:this._onHideComplete, onCompleteParams:[this._imageLoader, callback]});
    }

    p.getIsOnStage = function()
    {
        var stageX = pinetreecom.CommonUtil.getStageX(this);
        var stageY = pinetreecom.CommonUtil.getStageY(this);

        if( (stageX > - this._imageWidth && stageX < pt.stageWidth) &&
            (stageY > - this._imageHeight && stageY < pt.stageHeight)
        )
        {
            return true;
        }
        return false;
    }

    p._onHideComplete = function(target, callback)
    {
        target.visible = false;
        callback && callback();
    }

    p.getImageLoader = function()
    {
        return this._imageLoader;
    }

    p.getImageWidth = function()
    {
        if(this._imageLoader)
            return this._imageLoader.imageWidth;
        return 0;
    }

    p.getImageHeight = function()
    {
        if(this._imageLoader)
            return this._imageLoader.imageHeight;
        return 0;
    }

    p.dispose = function()
    {
        this._imageLoader && this._imageLoader.dispose();
        this._imageLoader = null;

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.dispose();
        this.ON_LOAD_COMPLETE = null;

        this.ON_IO_ERROR && this.ON_IO_ERROR.dispose();
        this.ON_IO_ERROR = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.SimpleImageRender = SimpleImageRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/14.
 */
(function()
{
    var SimpleImagesList = function ()
    {
        pinetree.Sprite.call(this);

        this._data = [];
        this._renders = [];

        this._loadCount = 0;
        this._totalCount = 0;

        this._contentWidth = 0;
        this._contentHeight = 0;
		
		this._tweenIndex = 0;
        this._tweenTotal = 0;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this.ON_CLICK = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();

        __defineGetterSetter(this, ["renders", "contentWidth", "contentHeight"]);
    }

    var p = __extends(SimpleImagesList, pinetree.Sprite);

    /**
     * data should contains objects that carrying "width", "height", "url".
     * @param data
     */
    p.initWithData = function (renderClass, data, pAlpha, pVisible)
    {
        if (pAlpha == undefined) pAlpha = 1.0;
        if (pVisible == undefined) pVisible = true;

        this._data = data;

        this._renders.splice(0, this._renders.length);

        this._loadCount = 0;
        this._totalCount = this._data.length;

        var i, obj, len = this._data.length, render, w, h;
        for (i = 0; i < len; i++)
        {
            obj = this._data[i];
            if (obj)
            {
                if (obj.hasOwnProperty("width"))
                    w = obj.width;
                else
                    w = 0;

                if (obj.hasOwnProperty("height"))
                    h = obj.height;
                else
                    h = 0;

                render = new renderClass(w, h, data[i]);
                render.index = i;
                render.alpha = pAlpha;
                render.visible = pVisible;
                render.ON_LOAD_COMPLETE.add(this, this._onLoadComplete);
                render.ON_IO_ERROR.add(this, this._onIOError);
                render.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
                render.load(obj.url);

                this._container.addChild(render);

                this._renders.push(render);
            }
        }
    }

    p._onClick = function(evt)
    {
        var render = evt.customTarget;
        var index = render.index;
        this.ON_CLICK.dispatch(index);
    }

    p._onLoadComplete = function (render)
    {
        this._loadCount++;
        if (this._loadCount == this._totalCount)
        {
            this.ON_LOAD_COMPLETE.dispatch();
        }
    }

    p._onIOError = function (evt)
    {
        //
    }

    p.show = function(time, delay, transition, callback, type)
    {
        if(type == undefined) type = "in";

        var i, render, len = this._renders.length;
        var tweenDelay = 0;

        this._tweenIndex = 0;
        this._tweenTotal = len;

        for (i = 0; i < len; i++)
        {
            render = this._renders[i];
            if (render)
            {
                tweenDelay = type == "in" ? delay * i : (len - 1 - i) * delay;
                render.show(time, tweenDelay, transition, Delegate.create(this, this._onShowComplete, callback));
            }
        }
    }

    p._onShowComplete = function(callback)
    {
        this._tweenIndex ++;
        if(this._tweenIndex == this._totalCount)
        {
            callback && callback();
        }
    }

    p.hide = function(time, delay, transition, callback, type)
    {
        if(type == undefined) type = "in";

        var i, render, len = this._renders.length;
        var tweenDelay = 0;

        this._tweenIndex = 0;
        this._tweenTotal = len;

        for (i = 0; i < len; i++)
        {
            render = this._renders[i];
            if (render)
            {
                tweenDelay = type == "in" ? delay * i : (len - 1 - i) * delay;
                render.hide(time, tweenDelay, transition, Delegate.create(this, this._onHideComplete, callback));
            }
        }
    }

    p._onHideComplete = function(callback)
    {
        this._tweenIndex ++;
        if(this._tweenIndex == this._totalCount)
        {
            callback && callback();
        }
    }

    /**
     * 1 row
     * @param gapX
     * @param gapY
     */
    p.alignHorizontal = function (gapX)
    {
        if (gapX == undefined) gapX = 0;

        var i, render, len = this._renders.length, w = 0, h = 0;
        for (i = 0; i < len; i++)
        {
            render = this._renders[i];
            if (render)
            {
                render.x = w;
                w += render.imageWidth + gapX;
                h = Math.max(h, render.imageHeight);
            }
        }

        this._contentWidth = w - gapX;
        this._contentHeight = h;
    }

    /**
     * 1 column
     * @param gapX
     * @param gapY
     */
    p.alignVertical = function (gapY)
    {
        if (gapY == undefined) gapY = 0;

        var i, render, len = this._renders.length, w = 0, h = 0;
        for (i = 0; i < len; i++)
        {
            render = this._renders[i];
            if (render)
            {
                render.y = h;
                w = Math.max(w, render.imageWidth);
                h += render.imageHeight + gapY;
            }
        }

        this._contentWidth = w;
        this._contentHeight = h - gapY;
    }

    p.alignMaxWidth = function(gapX, gapY, maxWidth)
    {
        var i, render, len = this._renders.length, w = 0, h = 0;
        this._contentWidth = 0;
        this._contentHeight = 0;

        for (i = 0; i < len; i++)
        {
            render = this._renders[i];
            if (render)
            {
                render.x = w;
                w += render.imageWidth + gapX;
                if(w - gapX > maxWidth)
                {
                    w = render.imageWidth + gapX;
                    render.x = 0;

                    h += render.imageHeight + gapY
                }
                render.y = h;

                this._contentWidth = Math.max(this._contentWidth, w);
                this._contentHeight = Math.max(this._contentHeight, render.y + render.imageHeight);
            }
        }
    }

    p.getContentWidth = function ()
    {
        return this._contentWidth;
    }

    p.getContentHeight = function ()
    {
        return this._contentHeight;
    }

    p.getRenders = function()
    {
        return this._renders;
    }

    p.dispose = function()
    {
        if(this._renders)
        {
            var i, len = this._renders.length, render;
            for (i = 0; i < len; i++)
            {
                render = this._renders[i];
                if (render)
                {
                    render.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
                    render.dispose();
                }
            }

            this._renders.splice(0, this._renders.length);
            this._renders = null;
        }

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_CLICK = null;

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.SimpleImagesList = SimpleImagesList;
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/2/2.
 * the shadow should be controled by css, class name is "shadow_image"
 */
(function()
{
    var ShadowImageLoader = function(w, h)
    {
        pinetree.Sprite.call(this);

        this._imageWidth = w;
        this._imageHeight = h;

        this._imageLoader = null;

        this.width = w;
        this.height = h;

        this.backgroundAlpha = 0;
	
	this.loadingType = "middle";

        this.className = "shadow_normal";

        __defineGetterSetter(this, ["imageLoader"]);
    }

    var p = __extends(ShadowImageLoader, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            //
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.load = function(url)
    {
        if(!this._imageLoader)
        {
            this._imageLoader = new pinetreecom.Thumbnail(this._imageWidth, this._imageHeight, pt.onOverColor, pt.bgColor,
                true, null, true, null, false, this.loadingType);
            this._imageLoader.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
            this.addChild(this._imageLoader);

            if(this._useMouseHand)
            {
                this._imageLoader.useMouseHand = true;
            }
        }

        this._imageLoader.load(url);
    }

    p.setUseMouseHand = function(value)
    {
        pinetree.Sprite.prototype.setUseMouseHand.call(this, value);

        if(this._imageLoader)
        {
            this._imageLoader.useMouseHand = value;
        }
    }

    p.reset = function()
    {
        if(this._imageLoader)
        {
            this._imageLoader.reset();
        }
    }

    p.getImageLoader = function()
    {
        return this._imageLoader;
    }

    p._onImgLoadComplete = function(img)
    {
        this._imageLoader.setRealFitSize(this._imageWidth, this._imageHeight);
    }

    p.dispose = function()
    {
        this._imageLoader && this._imageLoader.dispose();
        this._imageLoader = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.ShadowImageLoader = ShadowImageLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/31.
 */
(function()
{
    var DeviceZoomImageProxy = function()
    {
        pinetreecom.UIComponent.call(this);

        if(pinetreecom.DeviceZoomImageProxy._instance)
        {
            throw new Error("DeviceZoomImageProxy::constructor(), singleton Error!");
            return;
        }

        pinetreecom.DeviceZoomImageProxy._instance = this;

        this._bitmapData = null;
        this._bitmap = null;

        this._isZoomIn = false;

        this.ON_CLOSE = new pinetree.Signal();

        this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        __defineGetterSetter(this, ["bitmapData"]);
    }

    DeviceZoomImageProxy._instance = null;
    DeviceZoomImageProxy.getInstance = function()
    {
        return pinetreecom.DeviceZoomImageProxy._instance || new pinetreecom.DeviceZoomImageProxy();
    }

    var p = __extends(DeviceZoomImageProxy, pinetreecom.UIComponent);

    p._onClick = function(evt)
    {
        this.zoomOut();
    }

    p.setBitmapData = function(bd)
    {
        if(!bd) return;

        this.clear();
        this._bitmapData = bd;
    }

    p.clear = function()
    {
        this._bitmapData && this._bitmapData.dispose();
        this._bitmapData = null;

        this._bitmap && this._bitmap.removeFromParent(true);
        this._bitmap = null;
    }

    p.zoomIn = function()
    {
        pinetree.stage.addChild(this);
        document.body.style.overflowX = "auto";

        pt.navPage.view.showMenuAndLogo(false);

        this._isZoomIn = true;

        if(!this._bitmap)
        {
            this._bitmap = new pinetree.Bitmap(this._bitmapData);
        }

        this._bitmap.alpha = 0;
        this.visible = true;

        this.addChild(this._bitmap);

        pinetree.stage.dispatchWith(pinetree.Event.RESIZE);

        TweenMax.killTweensOf(this._bitmap, false, {alpha:true});
        TweenMax.to(this._bitmap, this.tweenTime, {alpha:1, ease:this.transition});
    }

    p.zoomOut = function()
    {
        if(!this._isZoomIn) return;

        if(!this._bitmap || this._bitmap.alpha == 0)
        {
            this._isZoomIn = false;
            return;
        }

        TweenMax.to(this._bitmap, this.tweenTime, {alpha:0, ease:this.transition,
            onComplete:this._onZoomOutComplete, onCompleteParams:[this]
        });
    }

    p._onZoomOutComplete = function(owner)
    {
        owner._isZoomIn = false;
        owner.visible = false;

        pt.navPage.view.showMenuAndLogo(true);

        owner.removeFromParent();

        document.body.style.overflowX = "hidden";

        pinetree.stage.dispatchWith(pinetree.Event.RESIZE);

        owner.ON_CLOSE.dispatch();
    }

    p.resize = function(sw, sh)
    {
        if(!this._bitmap || !this._isZoomIn) return;

        var scaleX = sw / this._bitmapData.width;
        var scaleY = sh / this._bitmapData.height;
        var scale = Math.max(scaleX, scaleY);

        this._bitmap.width = Math.ceil(this._bitmapData.width * scale);
        this._bitmap.height = Math.ceil(this._bitmapData.height * scale);

        this.width = this._bitmap.width;
        this.height = this._bitmap.height;
    }

    p.dispose = function()
    {
        trace("Don't dispose it!");
        return;
    }

    pinetreecom.DeviceZoomImageProxy = DeviceZoomImageProxy;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/24.
 */
(function()
{
    var DeviceTextContainer = function(w, bgColor, bgAlpha, useHtmlText, hasTitle)
    {
        pinetree.Sprite.call(this);

        this._width = w;
        this._height = 0;

        this._bgColor = bgColor == undefined ? 0xffffff : bgColor;
        this._bgAlpha = bgAlpha == undefined ? 1.0 : bgAlpha;

        this._useHtmlText = useHtmlText == undefined ? true : useHtmlText;
        this._hasTitle = __defaultSet(hasTitle, true);

        this._infoTxt = null;
        this._titleTxt = null;

        this._info = "";
        this._title = "";

        this.paddingLeft = 20;
        this.paddingRight = 20;
        this.paddingTop = 20;
        this.paddingBottom = 20;
        this.gapBetweenTitleAndInfo = 10;

        this.titleTextColor = null;
        this.infoTextColor = null;

        this.index = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        __defineGetterSetter(this, ["information", "title", "padding", "contentWidth", "contentHeight", "titleHeight"
        ]);
    }

    var p = __extends(DeviceTextContainer, pinetree.Sprite);

    p.init = function()
    {
        this._infoTxt = new pinetree.TextField();
        this._infoTxt.className += " deviceTextContainer_content";
        this.addChild(this._infoTxt);
        this._infoTxt.x = this.paddingLeft;

        if(this._hasTitle)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " deviceTextContainer_title";
            this.addChild(this._titleTxt);
            this._titleTxt.selectable = false;
            this._titleTxt.wordWrap = true;
            this._titleTxt.multiline = true;

            this._titleTxt.x = this.paddingLeft;
            this._titleTxt.y = this.paddingTop;
        }

        this.backgroundAlpha = this._bgAlpha;
        this.backgroundColor = this._bgColor;

        this.width = this._width;
        this.height = this._height;
    }

    p.setTitle = function(value)
    {
        if(!this._hasTitle) return;

        this._title = value;

        this._titleTxt.width = this._width - this.paddingLeft - this.paddingRight;

        if(this._useHtmlText)
            this._titleTxt.htmlText = value;
        else
            this._titleTxt.text = value;

        this._titleTxt.visible = true;
    }

    p.setVisible = function(value)
    {
        this._htmlElement.style.display = value ? "block" : "none";
    }

    p.setInformation = function(value)
    {
        var titleHeight = this.getTitleHeight();
        var titleGap = this.getGapBetweenTitleAndInfo();

        this._info = value;

        this._infoTxt.width = this._width - this.paddingLeft - this.paddingRight;
        this._infoTxt.height = 1;

        if(this._useHtmlText)
            this._infoTxt.htmlText = value;
        else
            this._infoTxt.text = value;

        this._infoTxt.y = this.paddingTop + titleHeight + titleGap;

        this._height = Math.floor(this._infoTxt.height + this._infoTxt.y + this.paddingBottom);
        this.height = this._height;
    }

    p.getInformation = function()
    {
        return this._info;
    }

    p.getTitle = function()
    {
        return this._title;
    }

    p.setPadding = function(value)
    {
        this.paddingLeft = this.paddingRight = this.paddingTop = this.paddingBottom = value;
    }

    p.getRealHeight = function()
    {
        return this.getTitleHeight() + this.getGapBetweenTitleAndInfo() + this._infoTxt.height;
    }

    p.getTitleHeight = function()
    {
        return this._hasTitle ? this._titleTxt.height : 0;
    }

    p.getGapBetweenTitleAndInfo = function()
    {
        return this._hasTitle ? this.gapBetweenTitleAndInfo : 0;
    }

    p.getContentWidth = function() { return this._width; };
    p.setContentWidth = function(w)
    {
        if(this._width == w) return;

        this._width = w;
        this.title = this._title;
        this.information = this._info;
        this.width = this._width;
    }

    p.getContentHeight = function() { return this._height; };

    p.show = function(time, delay, transition, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(transition == undefined) transition = this.transition;

        if (this.visible) return;

        if(time == 0 && delay == 0)
        {
            this.alpha = 1;
            this.visible = true;
            callback && callback();
            return;
        }

        this.alpha = 0;
        this.visible = true;
        TweenMax.to(this, time, { alpha:1, delay:delay, onComplete:callback, ease:transition } );
    }

    p.hide = function(time, delay, transition, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this.alpha = 0;
            this.visible = false;
            callback && callback();
            return;
        }

        TweenMax.to(this, time, { alpha: 0, delay:delay,
            onComplete:this._hideComplete,
            onCompleteParams:[this, callback], ease:this.transition } );
    }

    p._hideComplete = function(owner, callback)
    {
        owner.visible = false;
        callback && callback();
    }

    p.reset = function()
    {
        this._info = "";
        this._title = "";
        this._infoTxt.htmlText = "";
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreecom.DeviceTextContainer = DeviceTextContainer;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-20.
 * This framework is based on pinetreeframework, please initialize pinetreeframework first.
 */
(function()
{

    var SiteMain = function()
    {
        pinetree.Sprite.call(this);

        this.data = [];

        this.deeplinkValue = "";

        this._bottomContainer = new pinetree.Sprite();
        this._middleContainer = new pinetree.Sprite();
        this._topContainer = new pinetree.Sprite();

        this._lowestContainer = new pinetree.Sprite();
        this._rootContainer = new pinetree.Sprite();
        this._extraContainer = new pinetree.Sprite();

        this.addChild(this._lowestContainer);

        this.addChild(this._bottomContainer);
        this.addChild(this._middleContainer);
        this.addChild(this._topContainer);

        this.addChild(this._extraContainer);
        this.addChild(this._rootContainer);

        this.addEventListener(pinetree.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
    }

    var p = __extends(SiteMain, pinetree.Sprite);

    p.onAddedToStage = function(evt)
    {
        this.removeEventListener(pinetree.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
        pinetreesite.siteModel.parse(this.data);
        pinetreesite.siteController.start(this._topContainer, this._middleContainer, this._bottomContainer,
            this._lowestContainer, this._rootContainer, this._extraContainer,
            this.deeplinkValue);
    }

    pinetreesite.SiteMain = SiteMain;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{

    var SiteController = function()
    {
        this._data = [];

        this._topContainer = null;
        this._middleContainer = null;
        this._bottomContainer = null;

        this._lowestContainer = null;
        this._rootContainer = null;
        this._extraContainer = null;

        this._currentPage = null;

        this._livingPages = [];

        this._currentId = "";
        this._goingId = "";
        this._goingLinkValue = "";

        this._currentParams = null;

        this._isTransitioning = false;
    }

    var p = SiteController.prototype;

    p.start = function(topContainer, middleContainer, bottomContainer,
                       lowestContainer, rootContainer, extraContainer,
                       deeplinkValue)
    {
        this._topContainer = topContainer;
        this._middleContainer = middleContainer;
        this._bottomContainer = bottomContainer;

        this._lowestContainer = lowestContainer;
        this._rootContainer = rootContainer;
        this._extraContainer = extraContainer;

        this._data = pinetreesite.siteModel.data || [];
        if(this._data.length < 1)  return;

        this.initDeeplink(deeplinkValue || "/");
        SWFAddress.addEventListener(SWFAddressEvent.CHANGE, Delegate.create(this, this.onDeeplinkChanged));
    }

    p.initDeeplink = function(deeplinkValue)
    {
        var linkValue = deeplinkValue.substring(1);//remove "/"
        if(!linkValue)
        {
            var vo = this._data[0];
            if(vo && (vo instanceof pinetreesite.AssetVo))
            {
                linkValue = vo.id;
            }
        }
        this.gotoPage(linkValue);
    }

    p.getVoById = function(id)
    {
        var i = this._data.length, vo;
        while(i --)
        {
            vo = this._data[i];
            if(vo && (vo instanceof pinetreesite.AssetVo) && vo.id == id)
            {
                return vo;
            }
        }
        return null;
    }

    p.changeDeeplinking = function(linkId, linkParams)
    {
        var linkValue = linkId;
        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            linkValue += "&" + linkParams.join("&");
        }
        SWFAddress.setValue(linkValue);
    }

    p.getClassById = function(id)
    {
        var vo = this.getVoById(id);
        if(vo) return vo.classRef;
        return null;
    }

    p.onDeeplinkChanged = function(evt)
    {
        if(this._isTransitioning) return;

        var linkValue = evt.value.substring(1);
        this.gotoPage(linkValue);
    }

    p.gotoPage = function(linkValue)
    {
        if(!linkValue) return;

        var id = this.getLinkId(linkValue);
        var params = this.getLinkParams(linkValue);

        if(!id || (id == this._currentId && params == this._currentParams))
        {
            if(this._currentPage && this._currentPage.linkId == this._currentId)
            {
                this._currentPage.active();
                this._inactive(this._currentPage.linkId);
            }

            return;
        }

        if(id == this._currentId)
        {
            if(this._currentPage)
            {
                this._currentParams = params;
                this._currentPage.analyzeParams(id, params);
                this._currentPage.active();

                this._inactive(this._currentId);
                return;
            }
        }

        this._goingId = id;
        this._goingLinkValue = linkValue;

        if(this._isTransitioning)
        {
            trace("[-- INTERRUPT --]");
            return;
        }

        var i = this._livingPages.length;
        var page = null;
        while(i --)
        {
            page = this._livingPages[i];
            if(page && page.linkId == this._goingId)
            {
                this._currentId = page.linkId;
                page.active();

                this._inactive(this._currentId);
                return;
            }
        }

        var classRef = this.getClassById(id);
        var goingSortId = classRef ? classRef.SORT_ID : "";

        if(this._currentPage && this.getIsNeedChange(goingSortId, this._currentPage.sortId).result)
        {
            this._currentId = this._currentPage.linkId;
            this.removeLivingPage(this._currentPage.linkId);
            this._currentPage.isActive && this._currentPage.inactive();
            this._currentPage.transitionOut();
            return;
        }
        else
        {
            var needChangeObj = this.getIsNeedChange(goingSortId, null);
            if(needChangeObj.result && needChangeObj.page)
            {
                this._currentPage = needChangeObj.page;
                this._currentId = this._currentPage.linkId;
                this.removeLivingPage(this._currentPage.linkId);
                this._currentPage.isActive && this._currentPage.inactive();
                this._currentPage.transitionOut();
                return;
            }
        }

        var vo = this.getVoById(id);
        if(classRef)
        {
            var page = new classRef(vo);
            page.sortId = goingSortId;
            page.addEventListener(pinetreesite.PageEvents.TRANSITION_IN, this.onTransitionIn, this);
            page.addEventListener(pinetreesite.PageEvents.TRANSITION_OUT, this.onTransitionOut, this);
            page.addEventListener(pinetreesite.PageEvents.TRANSITION_IN_COMPLETE, this.onTransitionInComplete, this);
            page.addEventListener(pinetreesite.PageEvents.TRANSITION_OUT_COMPLETE, this.onTransitionOutComplete, this);

            page.active();

            if(vo)
            {
                this._currentId = id;
                this._currentParams = params;
                this._currentPage = page;
                this._currentPage.analyzeParams(id, params);

                this._inactive(this._currentId);

                if(vo.depth == pinetreesite.AssetVo.DEPTH_TOP && page.parent != this._topContainer)
                    page.addTo(this._topContainer);
                else if(vo.depth == pinetreesite.AssetVo.DEPTH_MIDDLE && page.parent != this._middleContainer)
                    page.addTo(this._middleContainer);
                else if(vo.depth == pinetreesite.AssetVo.DEPTH_LOWEST && page.parent != this._lowestContainer)
                    page.addTo(this._lowestContainer);
                else if(vo.depth == pinetreesite.AssetVo.DEPTH_ROOT && page.parent != this._rootContainer)
                    page.addTo(this._rootContainer);
                else if(vo.depth == pinetreesite.AssetVo.DEPTH_EXTRA && page.parent != this._extraContainer)
                    page.addTo(this._extraContainer);
                else if(page.parent != this._bottomContainer)
                    page.addTo(this._bottomContainer);
            }
            else
            {
                return;
            }
        }
        else
        {
            trace("Error:Page Not Found!");
            return;
        }

        this._livingPages.push(this._currentPage);

        this._currentPage.transitionIn();

        this._goingId = "";
        this._goingLinkValue = "";

        SWFAddress.setValue(linkValue);
    }

    p.activeByClass = function(classRef)
    {
        var i = this._livingPages.length;
        var page = null;
        while(i --)
        {
            page = this._livingPages[i];
            if(page && !page.isActive && page.data.classRef == classRef)
            {
                page.active();
                this._inactive(page.linkId);
                break;
            }
        }
    }

    p.activeBySortId = function(sortId)
    {
        var i = this._livingPages.length;
        var page = null;
        while(i --)
        {
            page = this._livingPages[i];
            if(page && !page.isActive && page.sortId == sortId)
            {
                page.active();
                this._inactive(page.linkId);
                break;
            }
        }
    }

    p._inactive = function(exceptId)
    {
        var i = this._livingPages.length;
        var page = null;
        while(i --)
        {
            page = this._livingPages[i];
            if(page && page.isActive && page.linkId != exceptId)
            {
                page.inactive();
            }
        }
    }

    p.getLinkId = function(linkValue)
    {
        var arr = linkValue.split("&");
        return arr[0];
    }

    p.getLinkParams = function(linkValue)
    {
        var arr = linkValue.split("&");
        if(arr.length <= 1)
        {
            return null;
        }
        arr.splice(0, 1);
        if(arr.length == 1 && arr[0] == "")
        {
            return null;
        }
        return arr;
    }

    /**
     * if the sort is the same, the pages should be changed.
     * @param sortId1
     * @param sortId2
     * @returns {result, page(if sortId2 is null and need change)}
     */
    p.getIsNeedChange = function(sortId1, sortId2)
    {
        if(pinetree.isDevice)
        {
            return {result:true, page:null};
        }

        if(!sortId1) return {result:false, page:null};
        if(sortId2 != null)
        {
            return {result:sortId1 == sortId2, page:null};
        }
        else
        {
            var i = this._livingPages.length;
            var page = null;
            while(i --)
            {
                page = this._livingPages[i];
                if(page && page.sortId == sortId1)
                {
                    return {result:true, page:page};
                }
            }
        }
        return {result:true, page:null};
    }

    p.onTransitionIn = function(evt)
    {
        this._isTransitioning = true;
    }

    p.onTransitionOut = function(evt)
    {
        this._isTransitioning = true;
    }

    p.onTransitionInComplete = function(evt)
    {
        this._isTransitioning = false;

        if(this._goingId != "" && this._goingId != this._currentId)
        {
            this.gotoPage(this._goingLinkValue);
        }
    }

    p.onTransitionOutComplete = function(evt)
    {
        this._isTransitioning = false;

        var page = this._currentPage;
        page.removeEventListener(pinetreesite.PageEvents.TRANSITION_IN, this.onTransitionIn, this);
        page.removeEventListener(pinetreesite.PageEvents.TRANSITION_OUT, this.onTransitionOut, this);
        page.removeEventListener(pinetreesite.PageEvents.TRANSITION_IN_COMPLETE, this.onTransitionInComplete, this);
        page.removeEventListener(pinetreesite.PageEvents.TRANSITION_OUT_COMPLETE, this.onTransitionOutComplete, this);
        page.dispose();

        this._currentPage = null;

        if(this._goingId != "" && this._goingId != this._currentId)
        {
            this.gotoPage(this._goingLinkValue);
        }
    }

    p.removeLivingPage = function(linkId)
    {
        var i = this._livingPages.length;
        var page = null;
        while(i --)
        {
            page = this._livingPages[i];
            if(page && page.linkId == linkId)
            {
                this._livingPages.splice(i, 1);
                break;
            }
        }
    }

    p.bringToTop = function(target, index)
    {
        if(!this._topContainer) return;

        if(index == undefined)
            index = this._topContainer.numChildren;
        this._topContainer.addChildAt(target, index);
    }

    p.bringToMiddle = function(target, index)
    {
        if(!this._middleContainer) return;

        if(index == undefined)
            index = this._middleContainer.numChildren;
        this._middleContainer.addChildAt(target, index);
    }

    p.bringToBottom = function(target, index)
    {
        if(!this._bottomContainer) return;

        if(index == undefined)
            index = this._bottomContainer.numChildren;
        this._bottomContainer.addChildAt(target, index);
    }

    p.bringToLowest = function(target, index)
    {
        if(!this._lowestContainer) return;

        if(index == undefined)
            index = this._lowestContainer.numChildren;
        this._lowestContainer.addChildAt(target, index);
    }

    p.bringToRoot = function(target, index)
    {
        if(!this._rootContainer) return;

        if(index == undefined)
            index = this._rootContainer.numChildren;
        this._rootContainer.addChildAt(target, index);
    }

    p.bringToExtra = function(target, index)
    {
        if(!this._extraContainer) return;

        if(index == undefined)
            index = this._extraContainer.numChildren;
        this._extraContainer.addChildAt(target, index);
    }

    pinetreesite.siteController = new SiteController();//singleton instance
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{

    var SiteModel = function()
    {
        this._data = null;

        __defineGetterSetter(this, ["data"]);
    }
    var p = SiteModel.prototype;

    p.getData = function() { return this._data;}

    p.parse = function(value)
    {
        if(!(value instanceof Array)) return;
        this._data = [];
        var obj, len = value.length, vo;
        var childObj, childLen = 0, childVo, j = 0;
        for(var i = 0; i < len; i ++)
        {
            obj = value[i];
            if(obj)
            {
                if(obj.hasChild)
                {
                    childLen = obj.childs.length;
                    for(j = 0; j < childLen; j ++)
                    {
                        childObj = obj.childs[j];
                        if(childObj)
                        {
                            childVo = new pinetreesite.AssetVo();
                            childVo.from(childObj);
                            this._data.push(childVo);
                        }
                    }
                }
                else
                {
                    vo = new pinetreesite.AssetVo();
                    vo.from(obj);
                    this._data.push(vo);
                }
            }
        }
    }

    pinetreesite.siteModel = new SiteModel();//singleton instance.
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{
    var PageEvents = {
        TRANSITION_IN:"transitionIn",
        TRANSITION_OUT:"transitionOut",
        TRANSITION_IN_COMPLETE:"transitionInComplete",
        TRANSITION_OUT_COMPLETE:"transitionOutComplete"
    };

    pinetreesite.PageEvents = PageEvents;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{
    var AbstractPage = function(data)
    {
        pinetree.Sprite.call(this);

        this.data = data;

        this.sortId = "";
        this.linkId = "";
        this.linkParams = null;

        this._isActive = false;

        __defineGetterSetter(this, ["isActive"]);
    }

    var p = __extends(AbstractPage, pinetree.Sprite);

    p.initialize = function()
    {
        //for override
    }

    p.getIsActive = function()
    {
        return this._isActive;
    }

    p.active = function()
    {
        this._isActive = true;
    }

    p.inactive = function()
    {
        this._isActive = false;
    }

    p.analyzeParams = function(linkId, linkParams)
    {
        this.linkId = linkId;
        this.linkParams = linkParams;
    }

    p.transitionIn = function()
    {
        this.dispatchWith(pinetreesite.PageEvents.TRANSITION_IN);
    }

    p.transitionOut = function()
    {
        this.dispatchWith(pinetreesite.PageEvents.TRANSITION_OUT);
    }

    p.transitionInComplete = function()
    {
        this.dispatchWith(pinetreesite.PageEvents.TRANSITION_IN_COMPLETE);
    }

    p.transitionOutComplete = function()
    {
        this.dispatchWith(pinetreesite.PageEvents.TRANSITION_OUT_COMPLETE);
    }

    p.dispose = function()
    {
        this.data = null;
        this.sortId = "";
        this.linkId = "";
        this.linkParams = null;
        this._isActive = false;
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreesite.AbstractPage = AbstractPage;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{
    var AssetVo = function()
    {
        this.id = "";
        this.name = "";
        this.src = "";
        this.size = 0;
        this.bg = "";
        this.bgCoverAlpha = 0;
        this.menuBgAlpha = 0.8;
        this.classRef = null;
        this.depth = 0;
        this.showParticleAnimation = false;
    }

    AssetVo.DEPTH_BOTTOM = "bottom";
    AssetVo.DEPTH_MIDDLE = "middle";
    AssetVo.DEPTH_TOP = "top";
    AssetVo.DEPTH_LOWEST = "lowest";
    AssetVo.DEPTH_ROOT = "root";
    AssetVo.DEPTH_EXTRA = "extra";

    var p = AssetVo.prototype;

    p.from = function(obj)
    {
        this.id = obj.id;
        this.name = obj.name;
        this.src = obj.src;
        this.size = obj.dataSize;
        this.bg = obj.bg;
        this.bgCoverAlpha = obj.bgCoverAlpha;
        this.menuBgAlpha = obj.menuBgAlpha;
        this.classRef = obj.classRef;
        this.depth = obj.depth || pinetreesite.AssetVo.DEPTH_MIDDLE;
        this.showParticleAnimation = obj.showParticleAnimation;
    }

    pinetreesite.AssetVo = AssetVo;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-4-19.
 */
(function()
{
    var ConfigSetting = function()
    {
        this.onOverColor = 0;
        this.onOutColor = 0;
        this.textColor = 0;
        this.bgColor = 0;
        this.assistColor = 0;

        this.onOverMainMenuColor = 0;
        this.onOutMainMenuColor = 0;
        this.onSelectMainMenuColor = 0;
        this.onOverChildMenuColor = 0;
        this.onOutChildMenuColor = 0;
        this.onSelectChildMenuColor = 0;

        this.videoIconColor = 0;

        this.shadowColor = 0x000000;
        this.shadowStrength = 0.2,

        this.mainMenuBgAlpha = 1.0;
        this.childMenuBgAlpha = 1.0;

        this.leftPanelWidth = 250;
        this.menuOffsetX = 0;
        this.menuOffsetY = 0;

        this.scrollSpeed = 1;

        this.menuPosition = "bottom";//top | bottom
        this.footerPosition = "bottom";//top | bottom

        this.autoHideScrollbar = false;

        this.animationColumn = 5;
        this.animationRow = 5;

        this.logo = null;
        this.footer = null;
        this.background = null;
        this.music = null;
        this.socials = null;
    }

    ConfigSetting.from = function(jsonData)
    {
        var config = new pinetreepages.ConfigSetting();

        config.onOverColor = pt.fromColorString(jsonData.onOverColor) || 0;
        config.onOutColor = pt.fromColorString(jsonData.onOutColor) || 0;
        config.textColor = pt.fromColorString(jsonData.textColor) || 0;
        config.bgColor = pt.fromColorString(jsonData.bgColor) || 0;
        config.assistColor = pt.fromColorString(jsonData.assistColor) || 0;

        config.onOverMainMenuColor = jsonData.onOverMainMenuColor != undefined ? pt.fromColorString(jsonData.onOverMainMenuColor) : config.onOverColor;
        config.onOutMainMenuColor = jsonData.onOutMainMenuColor != undefined ? pt.fromColorString(jsonData.onOutMainMenuColor) : config.onOutColor;
        config.onSelectMainMenuColor = jsonData.onSelectMainMenuColor != undefined ? pt.fromColorString(jsonData.onSelectMainMenuColor) : config.onOverColor;
        config.onOverChildMenuColor = jsonData.onOverChildMenuColor != undefined ? pt.fromColorString(jsonData.onOverChildMenuColor) : config.onOverColor;
        config.onOutChildMenuColor = jsonData.onOutChildMenuColor != undefined ? pt.fromColorString(jsonData.onOutChildMenuColor) : config.bgColor;
        config.onSelectChildMenuColor = jsonData.onSelectChildMenuColor != undefined ? pt.fromColorString(jsonData.onSelectChildMenuColor) : config.onOverColor;
        config.childMenuBgColor = jsonData.childMenuBgColor != undefined ? pt.fromColorString(jsonData.childMenuBgColor) : config.childMenuBgColor;

        config.videoIconColor = jsonData.videoIconColor != undefined ? pt.fromColorString(jsonData.videoIconColor) : config.videoIconColor;

        config.shadowColor = jsonData.shadowColor != undefined ? pt.fromColorString(jsonData.shadowColor) : config.shadowColor;
        config.shadowStrength = __defaultSet(jsonData.shadowStrength, config.shadowStrength);

        config.animationColumn = __defaultSet(jsonData.animationColumn, config.animationColumn);
        config.animationRow = __defaultSet(jsonData.animationRow, config.animationRow);

        config.menuPosition = jsonData.menuPosition == "top" ? "top" : "bottom";
        //config.footerPosition = jsonData.footerPosition == "top" ? "top" : "bottom";

        config.autoHideScrollbar = jsonData.autoHideScrollbar || false;

        config.scrollSpeed = jsonData.scrollSpeed || config.scrollSpeed;

        config.logo = jsonData.logo || {};
        config.footer = jsonData.footer || {};
        config.background = jsonData.background || {};
        config.music = jsonData.music || {};
        config.socials = jsonData.socials || {};

        return config;
    }

    pinetreepages.ConfigSetting = ConfigSetting;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var ConfigUtil = function()
    {
        this._visibleMenuData = null;
        this._siteMenuData = null;
        this._menuSetting = null;

        __defineGetterSetter(this, ["visibleMenuData", "siteMenuData", "menuSetting"]);
    }

    var p = ConfigUtil.prototype;

    p.getPageClass = function(type)
    {
        var page = null;
        switch (type)
        {
            case "home":
                page = pinetreepages.HomePage;
                break;
            case "slideshow":
                page = pinetreepages.SlideshowPage;
                break;
            case "about":
                page = pinetreepages.AboutPage;
                break;
            case "news":
            case "service":
                page = pinetreepages.NewsPage;
                break;
            case "gallery":
                page = pinetreepages.GalleryPage;
                break;
            case "contact":
                page = pinetreepages.ContactPage;
                break;
            case "portfolio":
                page = pinetreepages.PortfolioPage;
                break;
            case "client":
            case "team":
                page = pinetreepages.TeamPage;
                break;
            case "showreel":
                page = pinetreepages.ReelPage;
                break;
        }
        return page;
    }

    p.parseMenu = function(data)
    {
        this._visibleMenuData = [];
        this._siteMenuData = [];
        this._menuSetting = data.setting;

        var menu = data.data, vo, childVo, i, j, len = menu.length, clen = 0;
        for(i = 0; i < len; i ++)
        {
            if(menu[i])
            {
                vo = pinetreepages.NavVo.from(menu[i]);
                vo.index = i;
                vo.classRef = this.getPageClass(vo.module);
                if(!vo.hidden)
                {
                    this._visibleMenuData.push(vo);
                }
                this._siteMenuData.push(vo);

                if(menu[i].childmenus != undefined && menu[i].childmenus.length > 0)
                {
                    clen = menu[i].childmenus.length;
                    for(j = 0; j < clen; j ++)
                    {
                        childVo = pinetreepages.NavVo.from(menu[i].childmenus[j]);
                        childVo.index = j;
                        childVo.classRef = this.getPageClass(childVo.module);
                        childVo.parent = vo;

                        if(!childVo.hidden)
                        {
                            vo.childs.push(childVo);
                        }
                        else
                        {
                            this._siteMenuData.push(childVo);
                        }
                    }
                }
            }
        }
    }

    p.getVisibleMenuData = function()
    {
        return this._visibleMenuData;
    }

    p.getSiteMenuData = function()
    {
        return this._siteMenuData;
    }

    p.getMenuSetting = function()
    {
        return this._menuSetting;
    }

    pinetreepages.configUtil = new ConfigUtil();//singleton instance
}());


/**
 * Created by foreverpinetree@gmail.com on 14-6-18.
 */
(function()
{
    var EnumTextures = {
        ZOOM_IN_ICON:"zoom_in_icon",
        PREV_ICON:"prev_icon",
        NEXT_ICON:"next_icon",
        PREV_ICON_H_DEVICE:"prev_icon_h_device",
        NEXT_ICON_H_DEVICE:"next_icon_h_device",
        PREV_ICON_H:"prev_icon_h",
        NEXT_ICON_H:"next_icon_h",
        INFO_ICON:"info_icon",
        CLOSE_ICON:"close_icon",
        PINTEREST_ICON:"pinterest_icon",
        PINTEREST_ICON_DEVICE:"pinterest_icon_device",
        INFO_ICON_DEVICE:"info_icon_device",
        BTN_INFO_SMALL:"btn_info_small",
        CLOSE_ICON_DEVICE:"close_icon_device",
        CLOSE_MINI_ICON:"close_mini_icon",
        BTN_BG_ICON:"btn_bg_icon",
        BTN_DOWN_ICON:"btn_down_icon",
        BTN_DOWN_MINI_ICON:"btn_down_mini_icon",
        BTN_UP_ICON:"btn_up_icon",
        BTN_CLOSE_ICON:"btn_close_icon",
        BTN_DOWNLOAD_ICON:"btn_download_icon",
        BTN_DOWNLOAD_ICON_DEVICE:"btn_download_icon_device",
        BTN_HOME_ICON:"btn_home_icon",
        BTN_HOME_ICON_DEVICE:"btn_home_icon_device",
        BTN_CIRCLE_BG_ICON:"btn_circle_bg_icon",
        BTN_LINK_ICON:"btn_link_icon",
        BTN_PLAY_ICON:"btn_play_icon",
        BTN_PAUSE_ICON:"btn_pause_icon",
        BTN_PLAY_ICON_DEVICE:"btn_play_icon_device",
        BTN_PAUSE_ICON_DEVICE:"btn_pause_icon_device",
        BTN_ZOOM_IN_ICON:"btn_zoom_in_icon",
        BTN_ZOOM_OUT_ICON:"btn_zoom_out_icon",
        BTN_ZOOM_IN_ICON_DEVICE:"btn_zoom_in_icon_device",
        BTN_ZOOM_OUT_ICON_DEVICE:"btn_zoom_out_icon_device",
        TARGET_ICON:"target_icon",
        CATEGORY_ICON:"category_icon",
        DEVICE_MENU_ICON:"device_menu_icon",
        DEVICE_CLOSE_MENU_ICON:"device_close_menu_icon",
        VOLUME_ON_ICON:"volume_on_icon",
        VOLUME_OFF_ICON:"volume_off_icon",
        PHOTO_ICON:"photo_icon",
        VIDEO_ICON:"video_icon",
        DEVICE_PREV_ICON:"device_prev_icon",
        DEVICE_NEXT_ICON:"device_next_icon",
        DEVICE_CLOSE_ICON:"device_close_icon",
        SCROLLER_BASE_TILE:"scroller_base_tile",
        BACK_ICON:"back_icon",
        BACK_ICON2:"back_icon2",
        SMALL_CLOSE_ICON:"small_close_icon",
        SMALL_INFO_ICON:"small_info_icon",
        LINK_CIRCLE_BG_ICON:"link_circle_bg_icon",
        GALLERY_TIPS_EDGE:"gallery_tips_edge",
        DOWN_TRIANGLE_ICON:"down_triangle_icon",
        PLUS_ICON:"plus_icon",
        TRIANGLE_ICON:"triangle_icon",
        NEXT_CIRCLE_ICON:"next_circle_icon",
        NEXT_CIRCLE_ICON_2:"next_circle_icon_2",
        BTN_RIGHT_ICON:"btn_right_icon",
        DISCOVER_ICON:"discover_icon",
        LOADING_CIRCLE_ICON:"loading_circle_icon",
        LOADING_CIRCLE_BG:"loading_circle_bg",
        LOADING_CIRCLE_ICON_MIDDLE:"loading_circle_icon_middle",
        LOADING_CIRCLE_BG_MIDDLE:"loading_circle_bg_middle",
        LOADING_CIRCLE_ICON_MINI:"loading_circle_icon_mini",
        LOADING_CIRCLE_BG_MINI:"loading_circle_bg_mini"
    }

    EnumTextures.isInsterested = function(name)
    {
        if(!name) return false;
        return this.hasOwnProperty(name.toUpperCase());
    }

    pinetreepages.EnumTextures = EnumTextures;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-17.
 */
(function()
{
    var AssetsManager = function()
    {
        this._commonAtlas = null;
        this._otherAtlas = {};
    }

    var p = AssetsManager.prototype;

    p.setCommon = function(image, json)
    {
        this._commonAtlas = new pinetree.TextureAtlas(image, json);
    }

    p.addExtend = function(image, json, id)
    {
        var textureAtlas = new pinetree.TextureAtlas(image, json);
        this._otherAtlas[id] = textureAtlas;
    }

    p.removeExtend = function(id)
    {
        var atlas = this._otherAtlas[id];
        if(atlas)
        {
            atlas.dispose();
            atlas = null;
        }

        if(this._otherAtlas.hasOwnProperty(id))
        {
            delete this._otherAtlas[id];
        }
    }

    /**
     * return texture
     * @param name
     * @returns texture
     */
    p.getCommonTexture = function(name)
    {
        if(pinetree.isDevice)
        {
            var newName = name + "_device";
            if(pinetreepages.EnumTextures.isInsterested(newName))
            {
                name = newName;
            }
        }
        return this._commonAtlas.getTexture(name);
    }

    /**
     * return an array contains textures.
     * @param prefix
     * @returns array
     */
    p.getCommonTextures = function(prefix)
    {
        return this._commonAtlas.getTextures(prefix);
    }

    /**
     * @param name
     * @param id
     * @returns texture
     */
    p.getExtendTexture = function(name, id)
    {
        var atlas = this._otherAtlas[id];
        if(!atlas) return null;

        return atlas.getTexture(name);
    }

    /**
     * @param prefix
     * @param id
     * @returns array
     */
    p.getExtendTextures = function(prefix, id)
    {
        var atlas = this._otherAtlas[id];
        if(!atlas) return null;

        return atlas.getTextures(prefix);
    }

    pinetreepages.assetsMgr = new AssetsManager();//singleton instance
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-11.
 */
(function()
{
    var _$ = function()
    {
        this.isAlphaMode = false;
        this.ALPHA_MODE_VALUE = 0.1;
        this.TOP_HEIGHT_CONST = 0;
        this.DEVICE_TOP_HEIGHT_CONST = 80;
        this.FOOTER_HEIGHT_CONST = 60;

        this.rootURL = "";
        this.rootDirectory = "";

        this.config = null;

        this.isMenuOpen = false;

        this.controlBtns = null;

        this.bgPage = null;
        this.navPage = null;
        this.footerPage = null;

        this.isMute = false;

        this.SCOLL_SPEED = 1;

        this.DEVICE_FOOTER_HEIGHT = 80;
        this.FOOTER_HEIGHT = pinetree.isSmallMode ? 0 : this.FOOTER_HEIGHT_CONST;
        this.LEFT_WIDTH = 0;
        this.TOP_HEIGHT = pinetree.isSmallMode ? this.DEVICE_TOP_HEIGHT_CONST : this.TOP_HEIGHT_CONST;
        this.START_Y = pinetree.isDevice ? 0 : 0;
        this.BOTTOM_FOOTER_HEIGHT = 40;

        this.BOTTOM_CONTENT_HEIGHT = 200;

        this.currentBottomHeight = 0;

        this.startX = 50;

        this.autoHideScrollbar = false;
        this._isOverTextContainer = false;

        this.isShowingChild = false;

        this.zoomProxy = null;

        //color
        this.onOverColor = 0xDD4447;
        this.onOutColor = 0x232323;

        this.onOverMainMenuColor = 0xDD4447;
        this.onOutMainMenuColor = 0x232323;
        this.onSelectMainMenuColor = 0xDD4447;
        this.onOverChildMenuColor = 0xDD4447;
        this.onOutChildMenuColor = 0x232323;
        this.onSelectChildMenuColor = 0xDD4447;
        this.childMenuBgColor = 0xffffff;

        this.bgColor = 0xffffff;
        this.textColor = 0x232323;

        this.bgAlpha = 0.9;

        this.currentPageID = "";
        this.prevPageID = "";

        __defineGetterSetter(this, ["stage", "stageWidth", "stageHeight", "isOverTextContainer"]);
    }
    var p = _$.prototype;

    p.parseConfig = function(jsonData)
    {
        this.config = pinetreepages.ConfigSetting.from(jsonData);

        if(this.config.menuPosition == "bottom") this.BOTTOM_FOOTER_HEIGHT = this.FOOTER_HEIGHT_CONST;
        this.currentBottomHeight = pinetree.isSmallMode ? 0 : this.config.menuPosition == "top" ? this.BOTTOM_FOOTER_HEIGHT : this.FOOTER_HEIGHT;

        this.SCOLL_SPEED = this.config.scrollSpeed;
    }

    p.getIsOverTextContainer = function() { return this._isOverTextContainer; }
    p.setIsOverTextContainer = function(value)
    {
        this._isOverTextContainer = value;
    }

    p.refreshControlBtns = function()
    {
        if(this.controlBtns)
        {
            this.controlBtns.refresh();
            this.controlBtns.x = pinetree.stage.stageWidth - this.controlBtns.width - 20;
            this.controlBtns.y = (this.TOP_HEIGHT - this.controlBtns.height) >> 1;
        }
    }

    p.getStageWidth = function()
    {
        return pinetree.stage.stageWidth;
    }

    p.getStageHeight = function()
    {
        return pinetree.stage.stageHeight;
    }

    p.getStage = function()
    {
        return pinetree.stage;
    }

    p.openSiteMusic = function()
    {
        try { this.footerPage.view.unmute(); }
        catch(error) { };
    }

    p.closeSiteMusic = function()
    {
        try { this.footerPage.view.mute(); }
        catch(error) { };
    }

    p.getCommonTexture = function(name)
    {
        return pinetreepages.assetsMgr.getCommonTexture(name);
    }

    p.getCommonTextures = function(prefix)
    {
        return pinetreepages.assetsMgr.getCommonTextures(prefix);
    }

    p.fromColorString = function(colorString)
    {
        return pinetreecom.StringUtil.fromColorString(colorString);
    }

    p.toColorString = function(color, withAlpha)
    {
        return pinetreecom.StringUtil.toColorString(color, withAlpha)
    }

    pt = new _$();
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-23.
 */
(function()
{
    var Index = function(rootHtmlElement)
    {
        pinetreesite.SiteMain.call(this, rootHtmlElement);

        this.deeplinkValue = SWFAddress ? (SWFAddress.getValue() || "") : "";

        pinetreepages.assetsMgr.setCommon(pinetree.textureImage, pinetree.textureData);
    }

    var p = __extends(Index, pinetreesite.SiteMain);

    p.onAddedToStage = function(evt)
    {
        pt.rootURL = SWFAddress.getBaseURL();

        var pattern = /[^\/]+\.(html|htm)/ig;
        if(pattern.test(pt.rootURL))
        {
            pattern.lastIndex = 0;
            var result = pattern.exec(pt.rootURL);
            if(result)
            {
                var i = result.index - 1;
                if(i < 0) i = 0;
                pt.rootDirectory = pt.rootURL.substr(0, i);
            }
        }

        pt.onOverColor = pt.config.onOverColor;
        pt.onOutColor = pt.config.onOutColor;
        pt.bgColor = pt.config.bgColor;
        pt.textColor = pt.config.textColor;
        pt.assistColor = pt.config.assistColor;
        pt.onOverMainMenuColor = pt.config.onOverMainMenuColor;
        pt.onOutMainMenuColor = pt.config.onOutMainMenuColor;
        pt.onSelectMainMenuColor = pt.config.onSelectMainMenuColor;
        pt.onOverChildMenuColor = pt.config.onOverChildMenuColor;
        pt.onOutChildMenuColor = pt.config.onOutChildMenuColor;
        pt.onSelectChildMenuColor = pt.config.onSelectChildMenuColor;
        pt.childMenuBgColor = pt.config.childMenuBgColor;

        pt.videoIconColor = pt.config.videoIconColor;

        pt.autoHideScrollbar = pt.config.autoHideScrollbar;

        pt.isMute = !pt.config.music.setting.active;

        this._initStaticPage();
        pt.navPage.view.initUI();

        //global control buttons
        pt.controlBtns = new pinetreecom.ControlButtons();
        pt.controlBtns.btnOverAlpha = 1.0;
        pt.controlBtns.btnOutAlpha = 0.8;
        pinetree.staticStage.addChild(pt.controlBtns);
        pt.controlBtns.alignBy(20, 0, "horizontal");

        pt.dragPrevNext = new pinetreecom.DragPrevNextUtil(pinetree.isDevice);

        if(pinetree.isDevice)
        {
            pt.zoomProxy = pinetreecom.DeviceZoomImageProxy.getInstance();
            pt.zoomProxy.tweenTime = 0.2;
        }

        pt.assetLoading = new pinetreecom.AssetLoading(pt.onOverColor, 60, 60, pt.bgColor, 0.9, 12, pt.onOverColor, true);
        pinetree.staticStage.addChild(pt.assetLoading);

        this.data = pinetreepages.configUtil.getSiteMenuData();

        pinetreecom.DelayCaller.delayCall(this, this._start, 0.1);
    }

    p._start = function()
    {
        pinetreesite.SiteMain.prototype.onAddedToStage.call(this, null);
    }

    p._initStaticPage = function()
    {
        var bgPage = new pinetreepages.BackgroundPage();
        pt.bgPage = bgPage;
        this._bottomContainer.addChildAt(bgPage, 0);

        var navPage = new pinetreepages.NavPage();
        pt.navPage = navPage;

        if(pinetree.isDevice)
        {
            pinetree.staticStage.addChildAt(navPage, 0);
        }
        else
        {
            this._topContainer.addChild(navPage);
            this._extraContainer.y = pt.FOOTER_HEIGHT;
            navPage.view.addChild(this._extraContainer);
        }

        var footerPage = new pinetreepages.FooterPage();
        pt.footerPage = footerPage;

        if(!pinetree.isDevice)
            this._topContainer.addChild(footerPage);
    }

    pinetreepages.Index = Index;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-11-11.
 */
__import('js/src/ui/views/components/GridAniThumbnail.js');
__import('js/src/ui/views/components/TextListItemRender.js');
__import('js/src/ui/views/components/HomeThumbContainer.js');

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var PageBase = function(data)
    {
        pinetreesite.AbstractPage.call(this, data);

        this.view = null;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;
        this.tweenDelay = 0.5;
    }

    var p = __extends(PageBase, pinetreesite.AbstractPage);

    p.analyzeParams = function(linkId, linkParams)
    {
        pinetreesite.AbstractPage.prototype.analyzeParams.call(this, linkId, linkParams);
        this.view && this.view.analyzeParams(linkId, linkParams);
    }

    p.addedToStage = function()
    {
        pinetreesite.AbstractPage.prototype.addedToStage.call(this);
    }

    p.transitionIn = function()
    {
        pinetreesite.AbstractPage.prototype.transitionIn.call(this);

        if(pt.navPage && pt.navPage.view && pt.navPage.view && this.data)
        {
            pt.navPage.view.setSelectedIndexById(this.data.id, true);
        }

        if(pt && pt.bgPage && pt.bgPage.view)
        {
            pt.bgPage.view.changeCoverAlpha(this.data.bgCoverAlpha);
        }

        this._showParticleAnimation(this.data.showParticleAnimation);
    }

    p.transitionOut = function()
    {
        pinetreesite.AbstractPage.prototype.transitionOut.call(this);
        this._showParticleAnimation(false);
    }

    p._showParticleAnimation = function(isShow)
    {
        if(pt && pt.bgPage && pt.bgPage.particleAnimator)
        {
            if(isShow)
                pt.bgPage.particleAnimator.show();
            else
                pt.bgPage.particleAnimator.hide();
        }
    }

    p.loadBackground = function(src)
    {
        if(pt && pt.bgPage)
        {
            pt.bgPage.changeBackground(src);
        }
    }

    p.unloadBackground = function()
    {
        if(pt && pt.bgPage)
        {
            pt.bgPage.unloadBackground();
        }
    }

    p.dispose = function()
    {
        this.view && this.view.dispose();
        this.view = null;

        pinetreesite.AbstractPage.prototype.dispose.call(this);

        this.removeFromParent();
    }

    pinetreepages.PageBase = PageBase;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ViewBase = function(data)
    {
        pinetreecom.UIComponent.call(this);

        this.data = data;

        this.linkId = "";
        this.linkParams = null;

        this.ON_TRANSITION_IN = new pinetree.Signal();
        this.ON_TRANSITION_OUT = new pinetree.Signal();
        this.ON_TRANSITION_IN_COMPLETE = new pinetree.Signal();
        this.ON_TRANSITION_OUT_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(ViewBase, pinetreecom.UIComponent);

    p.analyzeParams = function(linkId, linkParams)
    {
        this.linkId = linkId;
        this.linkParams = linkParams;
    }

    p.active = function()
    {

    }

    p.inactive = function()
    {

    }

    p.transitionIn = function()
    {

    }

    p.transitionInComplete = function()
    {
        this.ON_TRANSITION_IN_COMPLETE.dispatch();
    }

    p.transitionOut = function()
    {

    }

    p.transitionOutComplete = function()
    {
        this.ON_TRANSITION_OUT_COMPLETE.dispatch();
    }

    p.dispose = function()
    {
        this.ON_TRANSITION_IN && this.ON_TRANSITION_IN.removeAll();
        this.ON_TRANSITION_OUT && this.ON_TRANSITION_OUT.removeAll();
        this.ON_TRANSITION_IN_COMPLETE && this.ON_TRANSITION_IN_COMPLETE.removeAll();
        this.ON_TRANSITION_OUT_COMPLETE && this.ON_TRANSITION_OUT_COMPLETE.removeAll();

        this.ON_TRANSITION_IN = null;
        this.ON_TRANSITION_OUT = null;
        this.ON_TRANSITION_IN_COMPLETE = null;
        this.ON_TRANSITION_OUT_COMPLETE = null;

        this.linkId = "";
        this.linkParams = null;

        pinetreecom.UIComponent.prototype.dispose.call(this);

        this.removeFromParent();
    }

    pinetreepages.ViewBase = ViewBase;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var NavPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);
        this.view = new pinetreepages.NavView(data);
        this.addChild(this.view);

        this.positionRef = "fixed";

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    NavPage.SORT_ID = "navigation";

    var p = __extends(NavPage, pinetreepages.PageBase);

    p.changeBgAlpha = function(alpha)
    {
        this.view.tweenBgAlpha(alpha);
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object NavPage]";
    }

    pinetreepages.NavPage = NavPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var FooterPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);
        this.view = new pinetreepages.FooterView(data);
        this.addChild(this.view);

        //this.positionRef = "fixed";

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;

        __defineGetterSetter(this, ["bg"]);
    }

    FooterPage.SORT_ID = "footer";

    var p = __extends(FooterPage, pinetreepages.PageBase);

    p.getBg = function()
    {
        return this.view.getBg();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object NavPage]";
    }

    pinetreepages.FooterPage = FooterPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var BackgroundPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.BackgroundView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        this.positionRef = "fixed";

        this.particleAnimator = null;

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    BackgroundPage.SORT_ID = "background";

    var p = __extends(BackgroundPage, pinetreepages.PageBase);

    p.addedToStage = function()
    {
        pinetreepages.PageBase.prototype.addedToStage.call(this);
        this.particleAnimator = this.view.particleAnimator;
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);
        this.view.transitionIn();
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.changeBackground = function(src)
    {
        this.view.changeBackground(src);
    }

    p.unloadBackground = function()
    {

    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object BackgroundPage]";
    }

    pinetreepages.BackgroundPage = BackgroundPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var HomePage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.HomeView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    HomePage.SORT_ID = "1";

    var p = __extends(HomePage, pinetreepages.PageBase);

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.loadBackground(this.data.bg);
        pt.navPage && pt.navPage.hide();

        trace(pinetree.addresses);

        //--------------
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        pt.navPage && pt.navPage.show();

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object HomePage]";
    }

    pinetreepages.HomePage = HomePage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var AboutPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        if(pinetree.isDevice)
            this.view = new pinetreepages.AboutDeviceView(data);
        else
            this.view = new pinetreepages.AboutView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    AboutPage.SORT_ID = "1";

    var p = __extends(AboutPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        //this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object AboutPage]";
    }

    pinetreepages.AboutPage = AboutPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function(){
    var ClientPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.ClientView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);
    }

    ClientPage.SORT_ID = "1";

    var p = __extends(ClientPage, pinetreepages.PageBase);

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ClientPage]";
    }

    pinetreepages.ClientPage = ClientPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ContactPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        if(pinetree.isDevice)
            this.view = new pinetreepages.ContactDeviceView(data);
        else
            this.view = new pinetreepages.ContactView(data);

        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    ContactPage.SORT_ID = "1";

    var p = __extends(ContactPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        //this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ContactPage]";
    }

    pinetreepages.ContactPage = ContactPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function(){
    var ExternalPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.ExternalView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);
    }

    ExternalPage.SORT_ID = "1";

    var p = __extends(ExternalPage, pinetreepages.PageBase);

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ExternalPage]";
    }

    pinetreepages.ExternalPage = ExternalPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var GalleryPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.GalleryView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    GalleryPage.SORT_ID = "1";

    var p = __extends(GalleryPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        this.view.active();

        if(pt.navPage && pt.navPage.view && pt.navPage.view && this.data)
        {
            pt.navPage.view.setSelectedIndexById(this.data.id, true);
        }

        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.inactive = function()
    {
        pinetreepages.PageBase.prototype.inactive.call(this);
        this.view.inactive();
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object Gallery]";
    }

    pinetreepages.GalleryPage = GalleryPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var NewsPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.NewsView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    NewsPage.SORT_ID = "1";

    var p = __extends(NewsPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object NewsPage]";
    }

    pinetreepages.NewsPage = NewsPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var PortfolioPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.PortfolioView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    PortfolioPage.SORT_ID = "1";

    var p = __extends(PortfolioPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object PortfolioPage]";
    }

    pinetreepages.PortfolioPage = PortfolioPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ReelPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.ReelView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    ReelPage.SORT_ID = "1";

    var p = __extends(ReelPage, pinetreepages.PageBase);

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        //this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ReelPage]";
    }

    pinetreepages.ReelPage = ReelPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ServicePage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.ServiceView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);
    }

    ServicePage.SORT_ID = "1";

    var p = __extends(ServicePage, pinetreepages.PageBase);

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ServicePage]";
    }

    pinetreepages.ServicePage = ServicePage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var SlideshowPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);
        
        this.view = new pinetreepages.SlideshowView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        this.positionRef = "fixed";
        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    SlideshowPage.SORT_ID = "1";

    var p = __extends(SlideshowPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);

        if(pt.navPage && pt.navPage.view && pt.navPage.view && this.data)
        {
            pt.navPage.view.setSelectedIndexById(this.data.id, true);
        }

        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
        //
        trace(pinetree.addresses);
    }

    p.addedToStage = function()
    {
        pinetreepages.PageBase.prototype.addedToStage.call(this);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object SlideshowPage]";
    }

    pinetreepages.SlideshowPage = SlideshowPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var TeamPage = function(data)
    {
        pinetreepages.PageBase.call(this, data);

        this.view = new pinetreepages.TeamView(data);
        this.view.ON_TRANSITION_IN_COMPLETE.add(this, this.transitionInComplete);
        this.view.ON_TRANSITION_OUT_COMPLETE.add(this, this.transitionOutComplete);
        this.addChild(this.view);

        if(pt.isAlphaMode) this.view.alpha = pt.ALPHA_MODE_VALUE;
    }

    TeamPage.SORT_ID = "1";

    var p = __extends(TeamPage, pinetreepages.PageBase);

    p.active = function()
    {
        pinetreepages.PageBase.prototype.active.call(this);
        pt.navPage && pt.navPage.changeBgAlpha(this.data.menuBgAlpha);
    }

    p.transitionIn = function()
    {
        pinetreepages.PageBase.prototype.transitionIn.call(this);

        this.view.transitionIn();
        this.loadBackground(this.data.bg);
    }

    p.transitionOut = function()
    {
        pinetreepages.PageBase.prototype.transitionOut.call(this);

        this.view.transitionOut();
    }

    p.dispose = function()
    {
        pinetreepages.PageBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object TeamPage]";
    }

    pinetreepages.TeamPage = TeamPage;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var NavView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._logoWidth = pt.config.logo.width || 0;
        this._logoHeight = pt.config.logo.height || 0;
        this._logoX = pt.config.logo.x;
        this._logoURL = pt.config.logo.url;

        this._logo = null;
        this._deviceBg = null;

        this._normalNav = null;
        this._deviceNav = null;

        this.mouseEnabled = this.mouseChildren = false;

        this.resizePriority = pinetree.EventDispatcher.MAX_PRIORITY;

        __defineGetterSetter(this, ["navigation"]);
    }

    var p = __extends(NavView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.initUI = function()
    {
        this._logo = new pinetreecom.Thumbnail(this._logoWidth, this._logoHeight, 0, 0, false, null, true, null, true);
        this._logo.visible = false;
        this._logo.buttonMode = true;
        this._logo.ON_LOAD_COMPLETE.add(this, this.onLoadThumbComplete);
        this._logo.addEventListener(pinetree.MouseEvent.CLICK, this._onClickLogo, this);

        this._normalNav = new pinetreepages.Navigation(pinetreepages.configUtil.getVisibleMenuData());
        this._normalNav.ON_CHANGE.add(this, this._onNavChange);
        this._normalNav.menuOffsetX = this._logoWidth + this._logoX + 50;
        this.y = pt.stageHeight - pt.FOOTER_HEIGHT;
        this.addChildAt(this._normalNav, 0);
        this._normalNav.init();

        this._deviceNav = new pinetreepages.DeviceNavigation(pinetreepages.configUtil.getVisibleMenuData());
        this._deviceNav.ON_CHANGE.add(this, this._onNavChange);
        pinetree.staticDeviceStage.addChild(this._deviceNav);
        this._deviceNav.parentView = this;
        this._deviceNav.init();

        this._deviceBg = new pinetree.Quad();
        pinetree.staticStage.addChildAt(this._deviceBg, 0);
        this._deviceBg.color = pt.bgColor;
        this._deviceBg.alpha = 0;
        this._deviceBg.visible = false;

        this.redraw();

        pinetreecom.DelayCaller.delayCall(this, this._delayShow, this._navigation.tweenTime);
    }

    p._onClickLogo = function(evt)
    {
        var firstNavVo = pinetreepages.configUtil.siteMenuData[0];
        if(firstNavVo)
        {
            pinetreecom.LinkManager.to(firstNavVo.id);
        }
    }

    p.showMenuAndLogo = function(value)
    {
        var alpha = value ? 1.0 : 0;

        this._logo.alpha = alpha;
        this._deviceNav.menuBtn.alpha = alpha;

        this._logo.mouseEnabled = value;
        this._deviceNav.menuBtn.mouseEnabled = value;
    }

    p.updateNav = function()
    {
        var logoX, logoY;
        if(pinetree.isSmallMode)//device
        {
            logoX = 100;
            logoY = (pt.TOP_HEIGHT - this._logo.height) >> 1;
            if(logoY < 0)
            {
                logoY = 0;
            }

            this._normalNav.close();
            this._normalNav.visible = false;

            this._deviceNav.visible = true;
            this._navigation = this._deviceNav;
            pinetree.staticStage.addChild(this._logo);

            this._navigation.addChild(pt.footerPage);
        }
        else
        {
            logoX = this._logoX;
            logoY = Math.ceil((pt.FOOTER_HEIGHT_CONST - this._logo.height) / 2);
            if(logoY + this._logo.height > pt.FOOTER_HEIGHT_CONST)
            {
                logoY = pt.FOOTER_HEIGHT_CONST - this._logo.height;
            }

            this._deviceNav.close();
            this._deviceNav.visible = false;

            this._normalNav.visible = true;
            this._navigation = this._normalNav;
            this._normalNav.addChild(this._logo);

            pinetreesite.siteController.bringToTop(pt.footerPage);
        }

        if(this._logo)
        {
            this._logo.x = logoX;
            this._logo.y = logoY;
        }
    }

    p.onLoadThumbComplete = function(e)
    {
        if(e)
        {
            this._logo.visible = true;
            this.redraw();
        }
    }

    p._delayShow = function()
    {
        this._logo.load(this._logoURL);
        this.redraw();

        this.mouseEnabled = this.mouseChildren = true;
    }

    p.setSelectedIndexById = function(id, notDispatchEvent)
    {
        this._normalNav.setSelectedIndexById(id, notDispatchEvent);
        this._deviceNav.setSelectedIndexById(id, notDispatchEvent);
    }

    p.tweenBgAlpha = function(alpha)
    {
        if(!pinetree.isDevice)
        {
            var bg = this._normalNav.bg;
            if(bg && bg.alpha != alpha)
            {
                TweenMax.to(bg, this.tweenTime, {alpha:alpha, ease:Linear.easeNone});
            }

            bg = pt.footerPage.bg;
            if(bg && bg.alpha != alpha)
            {
                TweenMax.to(bg, this.tweenTime, {alpha:alpha, ease:Linear.easeNone});
            }
        }
    }

    p.showDeviceBg = function(value)
    {
        if(!this._deviceBg) return;

        TweenMax.killTweensOf(this._deviceBg);

        if(value)
        {
            this._deviceBg.visible = true;
            if(!this._deviceBg.tweenAlphaByCSS(0.95, this.tweenTime / 3, 0, "linear"))
            {
                TweenMax.to(this._deviceBg, this.tweenTime / 3, {alpha: 0.95, ease:Linear.easeNone});
            }
        }
        else
        {
            if(!this._deviceBg.tweenAlphaByCSS(0, this.tweenTime / 5, 0, "linear", this._onHideDeviceBgComplete, [this._deviceBg]))
            {
                TweenMax.to(this._deviceBg, this.tweenTime / 5, {alpha: 0, ease:Linear.easeNone,
                    onComplete:this._onHideDeviceBgComplete, onCompleteParams:[this._deviceBg]});
            }
        }
    }

    p._onHideDeviceBgComplete = function(target)
    {
        target.visible = false;
    }

    p.getNavigation = function()
    {
        return this._navigation;
    }

    p._onNavChange = function(id)
    {
        pinetreesite.siteController.gotoPage(id);
    }

    p.resize = function(sw, sh)
    {
        this.updateNav();
        this._navigation.update(sw, sh);

        if(pinetree.isSmallMode)
        {
            if(this._deviceBg)
            {
                this._deviceBg.width = sw;
                this._deviceBg.height = sh;
            }

            pt.footerPage.y = 0;
        }
        else
        {
            TweenMax.killTweensOf(this._navigation, false, {y:true});
            this.y = pt.config.menuPosition == "bottom" ? sh - pt.currentBottomHeight : 0;

            pt.footerPage.y = sh - pt.currentBottomHeight;
        }
    }

    p.toString = function()
    {
        return "[Object NavView]";
    }

    pinetreepages.NavView = NavView;
}());

/**
 * @author foreverpinetree[at]gmail.com
 */
(function()
{

	var Navigation = function(data)
	{
        pinetree.Sprite.call(this);

        this.startY = 0;

		this.transition = Quad.easeOut;
		this.tweenTime = 1.0;

		this._data = data;
		
		this._childItems = null;
		
		this._mainMenu = null;

        this.menuOffsetX = 0;

        this._stageBg = null;
        
		this._bg = null;
        this._bgAlpha = pt.bgAlpha;
        this._isShowingChild = false;
		
		this._prevSelected = "";
		this._currentSelected = "";
		this._currentSelectedName  = "";

        this._showingChildId = "";

		this._menuStartX = 0;

        this._triggerRect = null;
        
		this.ON_CHANGE = new pinetree.Signal();

        __defineGetterSetter(this, ["bg"]);
	}

    var p = __extends(Navigation, pinetree.Sprite);
		
    p.init = function()
    {
        this._mainMenu = new pinetreepages.MainContainer(pt.onOverMainMenuColor,
            pt.onOutMainMenuColor, pt.onSelectMainMenuColor,
            22, 12, 0, 0, 0, 0, 0, 0);
        this.addChild(this._mainMenu);
        this._mainMenu.selectable = false;
        this._mainMenu.x = this.menuOffsetX;
        this._mainMenu.initWithData(this._data);
        this._mainMenu.ON_OVER.add(this, this._onOverMainMenuItem);
        this._mainMenu.ON_OUT.add(this, this._onOutMainMenuItem);
        this._mainMenu.ON_CLICK.add(this, this._onClickMainMenuItem);

        this._bg = new pinetree.Quad();
        this._bg.alpha = this._bgAlpha;
        this._bg.color = pt.bgColor;
        this.addChildAt(this._bg, 0);
        this._bg.width = pt.stageWidth;
        this._bg.height = pt.FOOTER_HEIGHT_CONST;

        var vo;
        var len = this._data.length;
        var childMenu;
        this._childItems = {};

        this._mainMenu.showMenu(this.tweenTime, this.tweenTime * 0.8, 0.1);
        this._mainMenu.y = Math.floor((pt.FOOTER_HEIGHT_CONST - this._mainMenu.height) / 2);

        this._stageBg = new pinetree.Quad();
        this._stageBg.alpha = 0;
        this._stageBg.color = 0x000000;
        this._stageBg.width = pt.stageWidth;
        this._stageBg.height = pt.stageHeight;

        var mainItem;

        var isBottom = pt.config.menuPosition == "bottom";

        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];
            if(vo.hasChild)
            {
                mainItem = this._mainMenu.getItem(i);

                childMenu = new pinetreepages.ChildContainer(pt.onOverChildMenuColor,
                    pt.onOutChildMenuColor, pt.onSelectChildMenuColor,
                    12, 12, 0, 0, 0, 0, 0, 0);
                childMenu.mainWidth = mainItem.width;
                this._mainMenu.addChildAt(childMenu, 0);
                childMenu.ON_CLICK.add(this, this._onClickChildMenuItem);
                childMenu.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onChildOut, this);
                childMenu.tweenTime = 0.4;

                childMenu.initWithData(vo.childs);

                this._childItems[vo.id] = childMenu;

                childMenu.x = childMenu.originX = mainItem.x;

                if(isBottom)
                    childMenu.y = childMenu.originY = - childMenu.contentHeight + pt.FOOTER_HEIGHT_CONST - this._mainMenu.y;
                else
                    childMenu.y = childMenu.originY = pt.FOOTER_HEIGHT_CONST - this._mainMenu.y;
                childMenu.visible = false;

                childMenu.hide();
            }
        }

        /*this._triggerRect = new pinetreecom.TriggerRect(pt.stageWidth, pt.FOOTER_HEIGHT_CONST, 0x00ff00, 0);
        this.addChildAt(this._triggerRect, 0);
        this._triggerRect.ON_ROLL_OUT.add(this, this._onMenuOut);
        this._triggerRect.isEnabled = this.visible;*/
    }

    p._showMainMenuComplete = function()
    {
        this._mainMenu.mouseChildren = true;
    }

    p._onOverMainMenuItem = function(item, evt)
    {
        item.over();

        if(item.data.hasChild)
        {
            this._showChildMenu(item);
        }
        else
        {
            this._hideChildMenu();
        }
    }

    p._onOutMainMenuItem = function(item, evt)
    {
        if(!item.data.hasChild)
        {
            this._mainMenu.tweenOutAllItem();
        }
    }

    p._showChildMenu = function(item)
    {
        var vo = item ? item.data : null;
        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            if(navVo != vo && navVo.hasChild)
            {
                this._childItems[navVo.id].mouseEnabled = this._childItems[navVo.id].mouseChildren = false;
                this._childItems[navVo.id].hide();
            }
        }

        if(vo)
        {
            //this.stretchMainMenuBg(true, this._childItems[vo.id]);

            this._isShowingChild = true;
            this._showingChildId = vo.id;
            this._childItems[vo.id].show();
            this._childItems[vo.id].mouseEnabled = this._childItems[vo.id].mouseChildren = true;
        }
        else
        {
            //this.stretchMainMenuBg(false, null);
        }

        pinetreesite.siteController.bringToMiddle(this._stageBg, 0);

        TweenMax.killTweensOf(this._stageBg);
        TweenMax.to(this._stageBg, this.tweenTime / 3, {alpha:0.5});
    }

    p._hideChildMenu = function()
    {
        if(!this._isShowingChild) return;

        this._mainMenu.tweenOutAllItem();

        this._isShowingChild = false;
        this._showingChildId = "";
        this._showChildMenu(null);

        TweenMax.killTweensOf(this._stageBg);
        TweenMax.to(this._stageBg, this.tweenTime / 3, {alpha:0,
            onComplete:this._onHideStageBgComplete, onCompleteParams:[this._stageBg]});

    }

    p._onHideStageBgComplete = function(target)
    {
        target && target.removeFromParent();
    }

    p.close = function()
    {
        TweenMax.killTweensOf(this._stageBg);
        this._stageBg.alpha = 0;
        this._stageBg.removeFromParent();
    }

    p.stretchMainMenuBg = function(isShow, childContainer)
    {
        var triggerHeight = 0;

        if(isShow)
        {
            var childHeight = childContainer.contentHeight;
            var bgHeight = childHeight + pt.FOOTER_HEIGHT_CONST;
            TweenMax.to(this._bg, this.tweenTime, {height:bgHeight, ease:Quart.easeOut});

            //triggerHeight = bgHeight;
        }
        else
        {
            TweenMax.to(this._bg, this.tweenTime, {height:pt.FOOTER_HEIGHT_CONST, ease:Quart.easeOut});

            triggerHeight = pt.FOOTER_HEIGHT_CONST;
        }

        /*if(this._triggerRect && this._triggerRect.isEnabled)
        {
            this._triggerRect.height = triggerHeight;
        }*/
    }

    p._onClickChildMenuItem = function(item, evt)
    {
        if (item.data.isLink)
        {
            this._handlerExternallink(item.data);
            return;
        }

        this._onMenuOut();

        this.setSelectedIndexById(item.data.id);
    }

    p._onClickMainMenuItem = function(item)
    {
        if(!item.data.hasChild)
        {
            if (item.data.isLink)
            {
                this._handlerExternallink(item.data);
                return;
            }

            this._onMenuOut();

            this.setSelectedIndexById(item.data.id);
        }
    }

    p._handlerExternallink = function(vo)
    {
        navigateToURL(vo.link, vo.window);
    }

    p._onChildOut = function(evt)
    {
        this._hideChildMenu();
    }

    p._onMenuOut = function()
    {
        this._hideChildMenu();
        this._mainMenu.tweenOutAllItem();
    }

    p._hideMainMenuComplete = function()
    {
        this._mainMenu.visible = false;
    }

    p.getMainMenuWidth = function()
    {
        return this._mainMenu.contentWidth;
    }

    p.getBg = function()
    {
        return this._bg;
    }

    p.setSelectedIndexById = function(id, notDispatchEvent)
    {
        if(this._currentSelected == id)
            return;

        notDispatchEvent = __defaultSet(notDispatchEvent, false);

        this._prevSelected = this._currentSelected;
        this._currentSelected = id;

        pt.currentPageID = this._currentSelected;
        pt.prevPageID = this._prevSelected;

        var navVo;
        var subNavVo;
        var i, j;
        var len, subLen;
        var mainItemID;
        var childItemID = -1;

        len = this._data.length;

        loop:
        for(i = 0; i < len; i ++)
        {
            navVo = this._data[i];

            if(navVo.hasChild)
            {
                subLen = navVo.childs.length;

                for(j = 0; j < subLen; j ++)
                {
                    subNavVo = navVo.childs[j];

                    if(subNavVo.id == id)
                    {
                        mainItemID = i;
                        childItemID = j;

                        this._currentSelectedName = subNavVo.name;
                        break loop;
                    }
                }
            }
            else if(navVo.id == id)
            {
                mainItemID = i;

                this._currentSelectedName = navVo.name;
                break;
            }
        }

        if(mainItemID == undefined) return;

        this._mainMenu.selectItem(mainItemID);

        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            navVo.hasChild && this._childItems[navVo.id].unselectItems();
        }

        if(childItemID >= 0)
        {
            navVo = this._data[mainItemID];
            this._childItems[navVo.id].selectItem(childItemID);
        }

        if(!notDispatchEvent)
        {
            this.ON_CHANGE.dispatch(id);
        }
    }

    p.update = function(sw, sh)
    {
        if(this._bg)
        {
            this._bg.width = sw;
        }

        if(this._stageBg)
        {
            this._stageBg.width = sw;
            this._stageBg.height = sh;
        }

        /*if(this._triggerRect && this._triggerRect.isEnabled)
        {
            this._triggerRect.width = sw;
        }*/
    }

    p.dispose = function()
    {
        //this._triggerRect && this._triggerRect.dispose();
        this._mainMenu.dispose();
        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            if(navVo.hasChild)
                this._childItems[navVo.id].dispose();
        }

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;
    }

    pinetreepages.Navigation = Navigation;
}());

/**
 * @author foreverpinetree[at]gmail.com
 */
(function()
{

    var DeviceNavigation = function(data)
    {
        pinetree.Sprite.call(this);

        this.menuBtn = null;

        this._menuOpenTexture = pinetreepages.assetsMgr.getCommonTexture(pinetreepages.EnumTextures.DEVICE_MENU_ICON);
        this._menuCloseTexture = pinetreepages.assetsMgr.getCommonTexture(pinetreepages.EnumTextures.DEVICE_CLOSE_MENU_ICON);

        this.startY = pt.TOP_HEIGHT + 30;

        this.transition = Quad.easeOut;
        this.tweenTime = 1.0;

        this._data = data;

        this._childItems = null;

        this._mainMenu = null;

        this.edgeX = 35;

        this._mainMenuX = 20;
        this._childMenuX = 35;

        this._bgWidth = pt.stageWidth;
        this._bgAlpha = 0.9;

        this._isShowingMenu = false;
        this._isShowingChild = false;

        this._prevSelected = "";
        this._currentSelected = "";
        this._currentSelectedName  = "";

        this._showingChildIndex = "";

        this._menuStartX = 0;

        this.parentView = null;

        this.ON_CHANGE = new pinetree.Signal();

        this.x = - this._bgWidth;

        __defineGetterSetter(this, ["isShowingMenu"]);
    }

    var p = __extends(DeviceNavigation, pinetree.Sprite);

    p.init = function()
    {
        this.menuBtn = new pinetreecom.TextureButton(pt.onOutColor, pt.onOutColor, pt.bgColor, pt.bgColor, 1, 0.9, 0, 0);
        this.menuBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onClickMenuBtn, this);
        this.menuBtn.setTextures(this._menuOpenTexture, null);
        this.menuBtn.show();
        pinetree.staticStage.addChildAt(this.menuBtn, 1);
        this.menuBtn.x = 5;
        this.menuBtn.y = (pt.TOP_HEIGHT - this.menuBtn.height) >> 1;

        this._mainMenu = new pinetreepages.DeviceMainContainer(pt.onOverMainMenuColor,
            pt.onOutMainMenuColor, pt.onSelectMainMenuColor,
            20, 10, 0, 0, 0, 0, 0, 0);
        this.addChild(this._mainMenu);
        this._mainMenu.startX = this._mainMenuX;
        this._mainMenu.initWithData(this._data);
        this._mainMenu.contentWidth = this._bgWidth;
        this._mainMenu.ON_OVER.add(this, this._onOverMainMenuItem);
        this._mainMenu.ON_OUT.add(this, this._onOutMainMenuItem);
        this._mainMenu.ON_CLICK.add(this, this._onClickMainMenuItem);

        this._topBg = new pinetree.Quad();
        pinetree.staticStage.addChildAt(this._topBg, 0);
        this._topBg.color = pt.bgColor;
        this._topBg.alpha = this._bgAlpha;
        this._topBg.width = pt.stageWidth;
        this._topBg.height = pt.TOP_HEIGHT;

        var vo;
        var len = this._data.length;
        var childMenu;
        this._childItems = {};

        var mainItem;

        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];
            if(vo.hasChild)
            {
                childMenu = new pinetreepages.DeviceChildContainer(pt.onOverChildMenuColor,
                    pt.onOutColor, pt.onSelectChildMenuColor,
                    30, 12, 0, 0, 0, 0, 0, 0);
                this.addChild(childMenu);
                childMenu.ON_CLICK.add(this, this._onClickChildMenuItem);
                childMenu.tweenTime = 0.4;

                childMenu.edgeX = this.edgeX;

                childMenu.initWithData(vo.childs);
                childMenu.visible = false;

                this._childItems[vo.id] = childMenu;

                mainItem = this._mainMenu.getItem(i);

                childMenu.x = childMenu.originX = this._childMenuX;
                childMenu.y = childMenu.originY = Math.floor(this.startY + mainItem.y + 75);

                childMenu.hide();
            }
        }

        this._mainMenu.y = this.startY;
        this._mainMenu.showMenu(this.tweenTime, 0, 0);
    }

    p._onClickMenuBtn = function(evt)
    {
        if(this._isShowingMenu)
        {
            TweenMax.to(this, this.tweenTime / 5, {x:-this._bgWidth, ease:Cubic.easeOut});
            this._hideChildMenu();
        }
        else
        {
            TweenMax.to(this, this.tweenTime * 0.5, {x:0, ease:Cubic.easeOut});
            window.scrollTo(0, 0);
        }

        this._isShowingMenu = ! this._isShowingMenu;

        if(this.parentView)
        {
            this.parentView.showDeviceBg(this._isShowingMenu);
        }

        this.refreshMenuButton();
    }

    p.refreshMenuButton = function()
    {
        var tex = this._isShowingMenu ? this._menuCloseTexture : this._menuOpenTexture;
        this.menuBtn.setTextures(tex, null);
    }

    p.close = function()
    {
        if(!this._isShowingMenu) return;

        this._isShowingMenu = false;

        TweenMax.to(this, this.tweenTime / 5, {x:-this._bgWidth, ease:Cubic.easeOut});
        this._hideChildMenu();

        if(this.parentView)
        {
            this.parentView.showDeviceBg(this._isShowingMenu);
        }

        this.refreshMenuButton();
    }

    p._onCloseMenu = function(evt)
    {
        this.close();
    }

    p.setVisible = function(value)
    {
        pinetree.Sprite.prototype.setVisible.call(this, value);
        this._topBg.visible = value;
        this.menuBtn.visible = value;
    }

    p.getIsShowingMenu = function()
    {
        return this._isShowingMenu;
    }

    p.hide = function()
    {
        this.x = -this._bgWidth;
        this._isShowingMenu = false;
        this._hideChildMenu();

        if(this.parentView)
        {
            this.parentView.showDeviceBg(this._isShowingMenu);
        }

        this.refreshMenuButton();
    }

    p._showMainMenuComplete = function()
    {
        this._mainMenu.mouseChildren = true;
    }

    p._onOverMainMenuItem = function(item, evt)
    {
        item.over();
    }

    p._onOutMainMenuItem = function(item, evt)
    {
        this._mainMenu.tweenOutAllItem();
    }

    p._showChildMenu = function(item)
    {
        var vo = item ? item.data : null;
        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            if(navVo != vo && navVo.hasChild)
            {
                this._childItems[navVo.id].hide();
            }
        }

        if(vo)
        {
            if(this._isShowingChild)
            {
                this._mainMenu.closeChildSpace(this._showingChildIndex, this.tweenTime * 0.2,
                    Delegate.create(this, this._onCloseComplete, vo.index == this._showingChildIndex ? null : vo));
                return;
            }
            this._isShowingChild = true;
            this._showingChildIndex = vo.index;
            this._mainMenu.openChildSpace(vo.index, this._childItems[vo.id].contentHeight + 40, 0,
                Delegate.create(this, this._onOpenComplete, vo));
        }
    }

    p._onCloseComplete = function(vo)
    {
        this._isShowingChild = false;
        if(vo)
        {
            this._showChildMenu(this._mainMenu.getItem(vo.index));
        }
    }

    p._onOpenComplete = function(vo)
    {
        this._childItems[vo.id].show(this.tweenTime * 0.2);
    }

    p._hideChildMenu = function()
    {
        if(!this._isShowingChild) return;

        var vo = this._data[this._showingChildIndex];
        if(vo)
        {
            this._childItems[vo.id].hide();
            this._mainMenu.closeChildSpace(this._showingChildIndex, this.tweenTime * 0.2,
                Delegate.create(this, this._onCloseComplete, null));
        }
    }

    p._onClickBack = function()
    {
        this._hideChildMenu();
    }

    p._onClickChildMenuItem = function(item, evt)
    {
        if (item.data.isLink)
        {
            this._handlerExternallink(item.data);
            return;
        }

        this._onMenuOut(null);

        this.setSelectedIndexById(item.data.id);
    }

    p._onClickMainMenuItem = function(item)
    {
        if(!item.data.hasChild)
        {
            if (item.data.isLink)
            {
                this._handlerExternallink(item.data);
                return;
            }

            this._onMenuOut(null);

            this.setSelectedIndexById(item.data.id);
        }
        else
        {
            if(!this._isShowingChild || item.data.index != this._showingChildIndex)
            {
                this._showChildMenu(item);
            }
            else
            {
                this._hideChildMenu();
            }
        }
    }

    p._handlerExternallink = function(vo)
    {
        navigateToURL(vo.link, vo.window);
    }

    p._onMenuOut = function(evt)
    {
        this._mainMenu.tweenOutAllItem();
    }

    p._hideMainMenuComplete = function()
    {
        this._mainMenu.visible = false;
    }

    p.setSelectedIndexById = function(id, notDispatchEvent)
    {
        if(this._currentSelected == id)
            return;

        notDispatchEvent = __defaultSet(notDispatchEvent, false);

        if(this.x > -this._bgWidth)
        {
            TweenMax.killTweensOf(this, false, {x:true});
            TweenMax.to(this, this.tweenTime * 0.5, {x:-this._bgWidth, ease:Cubic.easeOut});

            this._hideChildMenu();
            this._isShowingMenu = false;

            if(this.parentView)
            {
                this.parentView.showDeviceBg(this._isShowingMenu);
            }

            this.refreshMenuButton();
        }

        this._prevSelected = this._currentSelected;
        this._currentSelected = id;

        pt.currentPageID = this._currentSelected;
        pt.prevPageID = this._prevSelected;

        var navVo;
        var subNavVo;
        var i, j;
        var len, subLen;
        var mainItemID;
        var childItemID = -1;

        len = this._data.length;

        loop:
            for(i = 0; i < len; i ++)
            {
                navVo = this._data[i];

                if(navVo.hasChild)
                {
                    subLen = navVo.childs.length;

                    for(j = 0; j < subLen; j ++)
                    {
                        subNavVo = navVo.childs[j];

                        if(subNavVo.id == id)
                        {
                            mainItemID = i;
                            childItemID = j;

                            this._currentSelectedName = subNavVo.name;
                            break loop;
                        }
                    }
                }
                else if(navVo.id == id)
                {
                    mainItemID = i;

                    this._currentSelectedName = navVo.name;
                    break;
                }
            }

        if(mainItemID == undefined) return;

        this._mainMenu.selectItem(mainItemID);

        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            navVo.hasChild && this._childItems[navVo.id].unselectItems();
        }

        if(childItemID >= 0)
        {
            navVo = this._data[mainItemID];
            this._childItems[navVo.id].selectItem(childItemID);
        }

        if(!notDispatchEvent)
        {
            this.ON_CHANGE.dispatch(id);
        }
    }

    p.update = function(sw, sh)
    {
        this.startY = pt.TOP_HEIGHT + 30;

        this.menuBtn.y = (pt.TOP_HEIGHT - this.menuBtn.height) >> 1;

        this._topBg.width = sw;
        this._topBg.height = pt.TOP_HEIGHT;

        this._bgWidth = sw;

        if(!this._isShowingMenu)
        {
            this.x = - this._bgWidth;
        }

        var mainItem, vo, childMenu, len = this._data.length;
        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];
            if(vo.hasChild)
            {
                mainItem = this._mainMenu.getItem(i);
                childMenu = this._childItems[vo.id];
                childMenu.y = childMenu.originY = Math.floor(this.startY + mainItem.y + 75);
            }
        }

        this._mainMenu.y = this.startY;
    }

    p.dispose = function()
    {
        this._mainMenu.dispose();
        var navVo;
        for (var key in this._data)
        {
            navVo = this._data[key];
            if(navVo.hasChild)
                this._childItems[navVo.id].dispose();
        }

        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        if(this.menuBtn)
        {
            this.menuBtn.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onClickMenuBtn, this);
            this.menuBtn.dispose();
            this.menuBtn = null;
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.DeviceNavigation = DeviceNavigation;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-19.
 */
(function()
{
    var NavVo = function()
    {
        this.index = 0;
        this.parent = null;
        this.name = "";
        this.childs = [];
        this.src = "";
        this.dataSize = 0;
        this.link = "";
        this.window = "_blank";
        this.isLink = false;
        this.thumburl = "";
        this.id = "";
        this.bg = "";
        this.bgCoverAlpha = 0;
        this.menuBgAlpha = 0.8;
        this.module = "";
        this.classRef = "";
        this.depth = "bottom";
        this.showParticleAnimation = false;
        this.hidden = false;

        this.onOverColor = 0;
        this.onOutColor = 0;
        this.bgColor = 0;
        this.textColor = 0;
        
        __defineGetterSetter(this, ["hasChild", "available"]);
    }

    NavVo.from = function(obj)
    {
        var vo = new pinetreepages.NavVo();
        vo.name = obj.name;
        vo.src = obj.src;
        vo.dataSize = obj.dataSize || 0;
        vo.window = obj.window;
        vo.isLink = obj.link && obj.link != "";
        vo.link = obj.link;
        vo.thumburl = obj.thumburl || vo.thumburl;
        vo.id = obj.id;
        vo.bg = obj.bg || "";
        vo.bgCoverAlpha = __defaultSet(obj.bgCoverAlpha, vo.bgCoverAlpha);
        vo.menuBgAlpha = __defaultSet(obj.menuBgAlpha, vo.menuBgAlpha);
        vo.module = obj.module || "";
        vo.depth = obj.depth || vo.depth;
        vo.showParticleAnimation = __defaultSet(obj.showParticleAnimation, vo.showParticleAnimation);
        vo.hidden = !!obj.hidden;

        vo.onOverColor = __defaultSet(obj.onOverColor, pt.onOverColor);

        return vo;
    }

    var p = NavVo.prototype;

    p.getHasChild = function()
    {
        return this.childs.length > 0;
    }

    p.getAvailable = function()
    {
        return this.id != "" || this.getHasChild();
    }
    
    pinetreepages.NavVo = NavVo;
}());

(function()
{
	var MenuItem = function(data, onOverColor, onOutColor, onSelectColor,
        onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
	{
        pinetree.Sprite.call(this);

        this._data = data;

        this.selectable = false;

		this._isAniType = false;
		this._available = true;
		this._isSelected = false;
		this.originX = 0;
		this.originY = 0;
		this.txt = null;
		this.bg = null;
		this.hasChild = false;
		this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        //if value of "fontSizeToggle" is true, that means you can't set the font size via css,
        // but you can change the font size via <code>setFontSize</code> method.
        this.fontSizeToggle = false;

        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();
        this.ON_CLICK = new pinetree.Signal();

        this._bgHeight = bgHeight != undefined ? bgHeight : -1;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;

        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onSelectColor = (!onSelectColor || onSelectColor < 0) ? onOverColor : onSelectColor;

        __defineGetterSetter(this, ["data", "text", "selected", "fontSize"]);
	}
    
    var p = __extends(MenuItem, pinetree.Sprite);
		
    p.getData = function()
    {
        return this._data;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this.bg = new pinetree.Quad();
            this.addChild(this.bg);
            this.txt = new pinetree.TextField();
            this.addChild(this.txt);

            this.text = this._data ? this._data.name : " ";
            this.bg.width = this.txt.textWidth;
            this.bg.height = this._bgHeight != -1 ? this._bgHeight : this.txt.height;
            this.bg.color = this._onOutBgColor;
            this.bg.alpha = this._onOutBgAlpha;

            this.buttonMode = true;
            this.mouseChildren = false;

            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.addEventListener(pinetree.MouseEvent.CLICK, this.onClick, this);

            this.txt.textColor = this._onOutColor;
            this.available = this._data ? this._data.available : true;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setText = function(value)
    {
        this.txt.text = value;
        //this.txt.width = this.txt.textWidth + 10;
    }

    p.setFontSize = function(value)
    {
        if(!this.fontSizeToggle)
            return;

        this.txt.fontSize = value;

        this.bg.height = this._bgHeight != -1 ? this._bgHeight : this.txt.height;
    }

    p.setSelected = function(value)
    {
        this._isSelected = value;

        if(value)
        {
            if(!this.hasChild)
            {
                this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
                this.mouseEnabled = false;
            }

            this.bg.stopTweenColor();
            TweenMax.killTweensOf(this.bg);
            this.bg.tweenColor(this._onSelectBgColor, this.tweenTime / 2, this.transition);
            this.txt.tweenColor(this._onSelectColor, this.tweenTime / 2, this.transition);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.mouseEnabled = true;
            this.txt.tweenColor(this._onOutColor, this.tweenTime / 2, this.transition);
        }
    }

    p.setIsAniType = function(value)
    {
        this._isAniType = value;
    }

    p.onOver = function(evt)
    {
        this.txt.stopTweenColor();
        this.txt.tweenColor(this._onOverColor, this.tweenTime / 2, this.transition);
        this._isAniType && TweenLite.to(this.txt, this.tweenTime / 2, {x:this.originX + 10, ease:Quart.easeOut});
        this.bg.tweenColor(this._onOverBgColor, this.tweenTime / 2, this.transition);
        TweenMax.to(this.bg, this.tweenTime / 2, {alpha:this._onOverBgAlpha, ease:this.transition});

        this.ON_OVER.dispatch(this, evt);
    }

    p.onOut = function(evt)
    {
        var color = this.hasChild ? this._onSelectColor : this._onOutColor;

        this.txt.stopTweenColor();
        this.txt.tweenColor(this._onOutColor, this.tweenTime / 2, this.transition);
        this._isAniType && TweenLite.to(this.txt, this.tweenTime / 2, {x:this.originX, ease:Quart.easeOut});
        this.bg.tweenColor(this._onOutBgColor, this.tweenTime / 2, this.transition);
        TweenMax.to(this.bg, this.tweenTime / 2, {alpha:this._onOutBgAlpha, ease:this.transition});

        this.ON_OUT.dispatch(this, evt);
    }

    p.onClick = function(evt)
    {
        this.ON_CLICK.dispatch(this, evt);
    }

    p.getAvailable = function() { return this._available; }
    p.setAvailable = function(value)
    {
        this._available = value;

        this.mouseEnabled = this._available;
    }
    p.dispose= function()
    {
        this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
        this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
        this.removeEventListener(pinetree.MouseEvent.CLICK, this.onClick, this);

        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();
        this.ON_CLICK && this.ON_CLICK.removeAll();

        this.ON_OVER = null;
        this.ON_OUT = null;
        this.ON_CLICK = null;
    }

    pinetreepages.MenuItem = MenuItem;
}());

(function()
{

	var ChildContainer = function(onOverColor, onOutColor, onSelectColor, gap, fontSize,
                                  onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight
        )
	{
        pinetree.Sprite.call(this);

		this._data = null;
        this._dataCount = 0;
		
		this._items = null;
		
		this.originX = 0;
		this.originY = 0;

        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onSelectColor = onSelectColor != undefined ? onSelectColor : onOverColor;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;

        this._bgWidth = 0;
        this._bgHeight = 0;

        this.mainWidth = 0;

        this._gap = gap || 0;
        this._fontSize = fontSize || 14;

        this._bg = new pinetree.Shape();
        this.addChild(this._bg);
        this._bg.className = "shadow_20px";

        this._contentWidth = 0;
        this._contentHeight = 0;

        this.edgeX = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.ON_CLICK = new pinetree.Signal();
        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
    }
    
    var p = __extends(ChildContainer, pinetree.Sprite);

    p.initWithData = function(data)
    {
        if(!data) return;

        this._data = data;
        this._dataCount = data.length;
        this._setup();

        var gap = 20;
        var g = this._bg.graphics;
        g.lineStyle(0, 0, 0);
        g.beginFill(pt.childMenuBgColor, 1);

        if(pt.config.menuPosition == "bottom")
        {
            g.moveTo(0, 0);
            g.lineTo(this._bgWidth, 0);
            g.lineTo(this._bgWidth, this._bgHeight - pt.FOOTER_HEIGHT_CONST - 1);
            g.lineTo(this.mainWidth + gap, this._bgHeight - pt.FOOTER_HEIGHT_CONST - 1);
            g.lineTo(this.mainWidth + gap, this._bgHeight - 1);
            g.lineTo(0, this._bgHeight - 1);
            g.lineTo(0, 0);
        }
        else
        {
            g.moveTo(0, 0);
            g.lineTo(this.mainWidth + gap, 0);
            g.lineTo(this.mainWidth + gap, pt.FOOTER_HEIGHT_CONST + 1);
            g.lineTo(this._bgWidth, pt.FOOTER_HEIGHT_CONST + 1);
            g.lineTo(this._bgWidth, this._bgHeight);
            g.lineTo(0, this._bgHeight);
            g.lineTo(0, 0);
        }

        g.stroke();
        g.endFill();

        this._bg.x = - gap >> 1;
    }
		
    p._setup = function()
    {
        var vo, item, len = this._data.length;
        this._items = [];

        this._contentWidth = 0;
        this._contentHeight = 0;

        var offsetY = 20;

        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];

            item = new pinetreepages.ChildMenuItem(vo, this._onOverColor, this._onOutColor, this._onSelectColor,
                this._onOverBgColor, this._onOutBgColor, this._onSelectBgColor, this._onOverBgAlpha,
                this._onOutBgAlpha, 0
            );
            this.addChild(item);
            item.isAniType = false;
            item.id = i;
            item.fontSize = this._fontSize;
            item.ON_CLICK.add(this, this.onClick);
            item.ON_OVER.add(this, this.onOver);
            item.ON_OUT.add(this, this.onOut);
            item.bg.visible = false;

            item.txt.textColor = this._onOutColor;
            item.y = this._contentHeight + offsetY - 8;

            if(this._contentWidth < item.width)
                this._contentWidth = item.width;
            this._contentHeight += this._gap + item.height;
            this._items.push(item);
        }

        this._contentWidth += 50;
        this._contentHeight += pt.FOOTER_HEIGHT_CONST + offsetY;

        this._bgWidth = this._contentWidth;
        this._bgHeight = this._contentHeight;

        if(pt.config.menuPosition == "top")
        {
            this._bg.y = - pt.FOOTER_HEIGHT_CONST;
        }
    }
		
    p.onClick = function(item, evt)
    {
        this.ON_CLICK.dispatch(item, evt);
    }
		
    p.onOver = function(item, evt)
    {
        if(item)
        {
            item.txt.tweenColor(this._onOverColor, this.tweenTime, this.transition);
            item.over();

            this.ON_OVER.dispatch(item, evt);
        }
    }
		
    p.onOut = function(item, evt)
    {
        if(item)
        {
            item.txt.tweenColor(this._onOutColor, this.tweenTime, this.transition);
            item.out();

            this.ON_OUT.dispatch(item, evt);
        }
    }
		
    p.selectItem = function(index)
    {
        this.unselectItems(index);

        if(this._items[index])
        {
            this._items[index].selected = true;
            this._items[index].txt.testColor = this._onOverColor;
        }
    }
		
    p.unselectItems = function(exceptIndex)
    {
        var item;
        var len = this._data.length;
        
        for(var i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item && item.id != exceptIndex)
            {
                item.txt.tweenColor(this._onOutColor, item.tweenTime, item.transition);
                item.out();
                item.selected = false;
            }
        }
    }

    p.setContentWidth = function(value)
    {
        this._contentWidth = value;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }
		
    p.show = function(delay)
    {
        //this.alpha = 0;
        this.visible = true;
        this.mouseChildren = true;
        TweenMax.killTweensOf(this);
        TweenMax.to(this, this.tweenTime, {alpha:1, delay:delay || 0, ease:this.transition});

        pt.isShowingChild = true;
    }
		
    p.hide = function(delay)
    {
        this.mouseChildren = false;
        TweenMax.killTweensOf(this);
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:this.transition, delay:delay || 0,
            onComplete:Delegate.create(this, this._hideComplete)});

        pt.isShowingChild = false;
    }

    p._hideComplete = function()
    {
        this.visible = false;
    }

    p.dispose = function()
    {
        var item;
        for(var key in this._items)
        {
            item = this._items[key];
            if(item)
            {
                item.dispose();
            }
        }

        this._items.splice(0, this._items.length);

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();

        this.ON_CLICK = null;
        this.ON_OVER = null;
        this.ON_OUT = null;
    }

    pinetreepages.ChildContainer = ChildContainer;
}());

(function()
{

	var MainContainer = function(onOverColor, onOutColor, onSelectColor, gap, fontSize,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight
    )
	{
        pinetree.Sprite.call(this);

		this._data = null;
		this._items = null;
		
		this._onOverColor = onOverColor;
		this._onOutColor = onOutColor;
        this._onSelectColor = onSelectColor != undefined ? onSelectColor : onOverColor;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;
        this._bgHeight = bgHeight || 40;

		this._gap = gap || 0;
		this._fontSize = fontSize || 16;
		this._contentWidth  = 0;
		this._contentHeight = 0;

		this.tweenTime = 1.0;
		this.transition = Quad.easeOut;
		
        this.ON_CLICK = new pinetree.Signal();
        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
	}

    var p = __extends(MainContainer, pinetree.Sprite);
		
    p.initWithData = function(data)
    {
        this._data = data;
        this._setup();
    }

    p._setup = function()
    {
        var vo, item, len = this._data.length;

        this._items = [];
        this.removeAllChildren();

        this._contentWidth = 0;
        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];
            if(!(vo instanceof pinetreepages.NavVo))
            {
                trace("vo is not a NavVo, at MainContainer::_setup()");
                continue;
            }

            item = new pinetreepages.MainMenuItem(vo, this._onOverColor, this._onOutColor, this._onSelectColor,
                this._onOverBgColor, this._onOutBgColor, this._onSelectBgColor, this._onOverBgAlpha,
                this._onOutBgAlpha, this._bgHeight
            );

            this.addChild(item);

            item.hasChild = vo.hasChild;
            item.id = i;
            item.fontSize = this._fontSize;
            item.ON_CLICK.add(this, this.onClick);
            item.ON_OVER.add(this, this.onOver);
            item.ON_OUT.add(this, this.onOut);
            item.x = this._contentWidth;
            this._contentWidth += item.txt.width + this._gap;

            if(this._contentHeight == 0)
            {
                this._contentHeight = item.txt.height;
            }

            //item.buttonMode = !vo.hasChild;
            item.visible = false;
            item.tweenTime = 0.5;
            item.bg.width = item.txt.width;
            this._items.push(item);
        }
    }

    p.onClick = function(item, evt)
    {
        this.ON_CLICK.dispatch(item, evt);
    }

    p.selectItem = function(index)
    {
        this.unselectItems(index);

        var item = this._items[index];
        if(item)
        {
            item.selected = true;
        }
    }

    p.unselectItems = function(exceptIndex)
    {
        if(exceptIndex == undefined) exceptIndex = -1;

        var item;
        var len = this._data.length;

        for(var i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item && item.id != exceptIndex)
            {
                item.selected = false;
            }
        }
    }

    p.onOver = function(item, evt)
    {
        for (var key in this._items)
        {
            if(item != this._items[key])
            {
                this._items[key].forceOut();
            }
        }
        this.ON_OVER.dispatch(item, evt);
    }

    p.onOut = function(item, evt)
    {
        this.ON_OUT.dispatch(item, evt);
    }

    p.tweenOutAllItem = function(exceptIndex)
    {
        var exceptItem = exceptIndex != undefined && exceptIndex != -1 ? this._items[exceptIndex] : null;

        for (var key in this._items)
        {
            if(this._items[key] != exceptItem)
                this._items[key].out();
        }
    }

    p.showMenu = function(time, delay, interval, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(interval == undefined) delay = 0.1;

        var mainItem, len = this._items.length;
        for (var i = 0; i < len; i ++)
        {
            mainItem = this._items[i];
            if(mainItem)
            {
                mainItem.alpha = 0;
                mainItem.visible = true;
                TweenMax.to(mainItem, time, {alpha:0.9, delay:delay + interval * i, ease:this.transition,
                    onComplete:Delegate.create(this, this.tweenComplete), onCompleteParams:[i, len - 1, callback]});
            }
        }
    }

    p.hideMenu = function(time, delay, interval, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(interval == undefined) delay = 0.1;

        var mainItem, len = this._items.length;
        for (var i = len - 1; i >= 0; i --)
        {
            mainItem = this._items[i];
            if(mainItem)
            {
                TweenMax.to(mainItem, time, {alpha:0, delay:delay + interval * (len - 1 - i), ease:this.transition,
                    onComplete:Delegate.create(this, this.tweenComplete), onCompleteParams:[i, 0, callback]});
            }
        }
    }

    p.tweenComplete = function(startIndex, endIndex, callback)
    {
        if(startIndex == endIndex)
        {
            callback && callback();
        }
    }

    p.getItem = function(index)
    {
        return this._items[index];
    }

    p.getItemByID = function(id)
    {
        var vo;
        var len = this._data.length;

        for (var i = 0; i < len; i ++)
        {
            vo = this._data[i];

            if(vo.id == id)
            {
                return this.getItem(i);
            }
        }
        return null;
    }

    p.getContentWidth = function()
    {
        return this._contentWidth;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.getHeight = function()
    {
        return this._contentHeight;
    }

    p.dispose = function()
    {
        for(var key in this._items)
        {
            this._items[key].dispose();
        }

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();

        this.ON_CLICK = null;
        this.ON_OVER = null;
        this.ON_OUT = null;
    }

    pinetreepages.MainContainer = MainContainer;
}());

(function()
{
	var ChildMenuItem = function(data, onOverColor, onOutColor, onSelectColor,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
    {
        pinetreepages.MenuItem.call(this, data, onOverColor, onOutColor, onSelectColor,
            onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight);

        this.className = this._className + " childmenu";
        this.bgWidth = 0;
    }

    var p = __extends(ChildMenuItem, pinetreepages.MenuItem);

    p.addedToStage = function()
    {
        pinetreepages.MenuItem.prototype.addedToStage.call(this);
        this.buttonMode = true;
    }
		
    p.onOver = function(evt)
    {
        pinetreepages.MenuItem.prototype.onOver.call(this, evt);
    }

    p.onOut = function(evt)
    {
        pinetreepages.MenuItem.prototype.onOut.call(this, evt)
    }

    p.setSelected = function(value)
    {
        pinetreepages.MenuItem.prototype.setSelected.call(this, value);
        this.over();
    }

    p.over = function()
    {
    }

    p.out = function()
    {
    }

    p.forceOut = function()
    {
        this.out();
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);
        pinetreepages.MenuItem.prototype.dispose.call(this);
    }

    pinetreepages.ChildMenuItem = ChildMenuItem;
}());

(function()
{
    var MainMenuItem = function(data, onOverColor, onOutColor, onSelectColor,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
    {
        pinetreepages.MenuItem.call(this, data, onOverColor, onOutColor, onSelectColor,
            onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight);

        this.className = this._className + " mainmenu";

        this.onOverRectAlpha = 0.5;
        this.onOutRectAlpha = 0.1;

        this.bgRect = new pinetree.Shape();
        this.bgRect.alpha = this.onOutRectAlpha;
        //this.addChildAt(this.bgRect, 0);
    }

    var p = __extends(MainMenuItem, pinetreepages.MenuItem);

    p.setText = function(value)
    {
        pinetreepages.MenuItem.prototype.setText.call(this, value);

        /*if(this.data.hasChild)
        {
            this.txt.text += " +";
        }*/
    }

    p.onOver = function(evt)
    {
        pinetreepages.MenuItem.prototype.onOver.call(this, evt);
    }

    p.onOut = function(evt)
    {
        if(!this.data.hasChild)
        {
            pinetreepages.MenuItem.prototype.onOut.call(this, evt);
        }
    }

    p.setSelected = function(value)
    {
        pinetreepages.MenuItem.prototype.setSelected.call(this, value);

        var color = this._isSelected ? this._onSelectBgColor : this._onOutBgColor;
        this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        var alpha = value ? this.onOverRectAlpha : this.onOutRectAlpha;
        TweenMax.to(this.bgRect, this.tweenTime, {alpha:alpha, ease:this.transition});
    }

    p.over = function()
    {
        var color = this.hasChild ? pt.onOutChildMenuColor : this._onOverColor;

        this.txt.tweenColor(color, this.tweenTime / 2, this.transition);
        this.bg.tweenColor(this._onOverBgColor, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOverRectAlpha, ease:this.transition});
    }

    p.out = function()
    {
        var color = (this.hasChild && this._isSelected) || this._isSelected ? this._onSelectColor : this._onOutColor;
        this.txt.tweenColor(color, this.tweenTime / 2, this.transition);
        color = this._isSelected ? this._onSelectColor : this._onOutBgColor;
        this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOutRectAlpha, ease:this.transition});
    }

    p.forceOut = function()
    {
         var color = this._onOutColor;
         this.txt.tweenColor(color, this.tweenTime / 2, this.transition);
         color = this._isSelected ? this._onSelectColor : this._onOutBgColor;
         this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOutRectAlpha, ease:this.transition});
    }

    pinetreepages.MainMenuItem = MainMenuItem;
}());

(function()
{
	var DeviceMenuItem = function(data, onOverColor, onOutColor, onSelectColor,
        onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
	{
        pinetree.Sprite.call(this);

        this._data = data;

        this.selectable = false;

		this._isAniType = false;
		this._available = true;
		this._isSelected = false;
		this.originX = 0;
		this.originY = 0;
		this.txt = null;
		this.bg = null;
		this.hasChild = false;
		this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.line = null;

        //if value of "fontSizeToggle" is true, that means you can't set the font size via css,
        //but you can change the font size via <code>setFontSize</code> method.
        this.fontSizeToggle = false;

        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();
        this.ON_CLICK = new pinetree.Signal();

        this._bgHeight = bgHeight != undefined ? bgHeight : -1;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;

        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onSelectColor = (!onSelectColor || onSelectColor < 0) ? onOverColor : onSelectColor;

        __defineGetterSetter(this, ["data", "text", "selected", "fontSize"]);
	}
    
    var p = __extends(DeviceMenuItem, pinetree.Sprite);
		
    p.getData = function()
    {
        return this._data;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this.txt = new pinetree.TextField();
            this.addChild(this.txt);

            this.bg = new pinetree.Quad();
            this.addChild(this.bg);

            this.text = this._data ? this._data.name : " ";
            this.txt.x = 0;
            this.txt.y = 0;
            //this.bg.width = this.txt.textWidth;
            //this.bg.height = this._bgHeight != -1 ? this._bgHeight : this.txt.height;
            this.bg.color = 0xff0000//this._onOutBgColor;
            this.bg.alpha = 0//this._onOutBgAlpha;

            this.buttonMode = true;
            this.mouseChildren = false;

            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this.onClick, this);

            this.txt.textColor = this._onOutColor;
            this.available = this._data ? this._data.available : true;

            this.line = new pinetree.Quad();
            this.line.color = this._onOverColor;
            this.line.visible = false;
            this.addChild(this.line);
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setText = function(value)
    {
        this.txt.text = value;
        //this.txt.width = this.txt.textWidth + 10;
    }

    p.setFontSize = function(value)
    {
        if(!this.fontSizeToggle)
            return;

        this.txt.fontSize = value;

        //this.bg.height = this._bgHeight != -1 ? this._bgHeight : this.txt.height;
    }

    p.setSelected = function(value)
    {
        this._isSelected = value;

        if(value)
        {
            if(!this.hasChild)
            {
                this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
                this.mouseEnabled = false;
            }

            //TweenMax.killTweensOf(this.bg);
            //this.bg.tweenColor(this._onSelectBgColor, this.tweenTime / 2, this.transition);
            this.txt.tweenColor(this._onSelectColor, this.tweenTime / 2, this.transition);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
            this.mouseEnabled = true;
            this.txt.tweenColor(this._onOutColor, this.tweenTime / 2, this.transition);
        }
    }

    p.setIsAniType = function(value)
    {
        this._isAniType = value;
    }

    p.onOver = function(evt)
    {
        this.txt.tweenColor(this._onOverColor, this.tweenTime / 2, this.transition);
        this._isAniType && TweenLite.to(this.txt, this.tweenTime / 2, {x:this.originX + 10, ease:Quart.easeOut});
        //this.bg.tweenColor(this._onOverBgColor, this.tweenTime / 2, this.transition);
        //TweenMax.to(this.bg, this.tweenTime / 2, {alpha:this._onOverBgAlpha, ease:this.transition});

        this.ON_OVER.dispatch(this, evt);
    }

    p.onOut = function(evt)
    {
        var color = this.hasChild ? this._onSelectColor : this._onOutColor;

        this.txt.tweenColor(this._onOutColor, this.tweenTime / 2, this.transition);
        this._isAniType && TweenLite.to(this.txt, this.tweenTime / 2, {x:this.originX, ease:Quart.easeOut});
        //this.bg.tweenColor(this._onOutBgColor, this.tweenTime / 2, this.transition);
        //TweenMax.to(this.bg, this.tweenTime / 2, {alpha:this._onOutBgAlpha, ease:this.transition});

        this.ON_OUT.dispatch(this, evt);
    }

    p.onClick = function(evt)
    {
        this.ON_CLICK.dispatch(this, evt);
    }

    p.getAvailable = function() { return this._available; }
    p.setAvailable = function(value)
    {
        this._available = value;

        this.mouseEnabled = this._available;
    }
    p.dispose= function()
    {
        this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this.onOver, this);
        this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOut, this);
        this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this.onClick, this);

        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();
        this.ON_CLICK && this.ON_CLICK.removeAll();

        this.ON_OVER = null;
        this.ON_OUT = null;
        this.ON_CLICK = null;
    }

    pinetreepages.DeviceMenuItem = DeviceMenuItem;
}());

(function()
{
	var DeviceChildMenuItem = function(data, onOverColor, onOutColor, onSelectColor,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
    {
        pinetreepages.DeviceMenuItem.call(this, data, onOverColor, onOutColor, onSelectColor,
            onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight);

        this.className = this._className + " devicechildmenu";
        this.bgWidth = 0;
    }

    var p = __extends(DeviceChildMenuItem, pinetreepages.DeviceMenuItem);

    p.addedToStage = function()
    {
        pinetreepages.DeviceMenuItem.prototype.addedToStage.call(this);

        if(!this._data) return;
        this.txt.x = 0;
        this.txt.y = 0;
        this.bg.width = this.txt.width = this.bgWidth;

        this.buttonMode = true;
    }
		
    p.onOver = function(evt)
    {
        pinetreepages.DeviceMenuItem.prototype.onOver.call(this, evt);
    }

    p.onOut = function(evt)
    {
        pinetreepages.DeviceMenuItem.prototype.onOut.call(this, evt)
    }

    p.setSelected = function(value)
    {
        pinetreepages.DeviceMenuItem.prototype.setSelected.call(this, value);
        this.over();
    }

    p.over = function()
    {
        /*if(!this._thumbnail) return;
        TweenMax.to(this.txt, this.tweenTime / 2, {alpha:1, ease:this.transition});*/
    }

    p.out = function()
    {
        /*if(!this._thumbnail) return;
        TweenMax.to(this.txt, this.tweenTime / 2, {alpha:0.3, ease:this.transition});*/
    }

    p.forceOut = function()
    {
        this.out();
    }

    p.dispose = function()
    {
        pinetreepages.DeviceMenuItem.prototype.dispose.call(this);

        TweenMax.killTweensOf(this);
    }

    pinetreepages.DeviceChildMenuItem = DeviceChildMenuItem;
}());

(function()
{
    var DeviceMainMenuItem = function(data, onOverColor, onOutColor, onSelectColor,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight)
    {
        pinetreepages.DeviceMenuItem.call(this, data, onOverColor, onOutColor, onSelectColor,
            onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight);

        this.className = this._className + " devicemainmenu";

        this.onOverRectAlpha = 0.5;
        this.onOutRectAlpha = 0.1;

        this.bgRect = new pinetree.Shape();
        this.bgRect.alpha = this.onOutRectAlpha;
        //this.addChildAt(this.bgRect, 0);
    }

    var p = __extends(DeviceMainMenuItem, pinetreepages.DeviceMenuItem);

    p.setText = function(value)
    {
        pinetreepages.DeviceMenuItem.prototype.setText.call(this, value);

        if(this.data.hasChild)
        {
            this.txt.text += " +";
        }
    }

    p.onOver = function(evt)
    {
        pinetreepages.DeviceMenuItem.prototype.onOver.call(this, evt);
    }

    p.onOut = function(evt)
    {
        pinetreepages.DeviceMenuItem.prototype.onOut.call(this, evt);

    }

    p.setSelected = function(value)
    {
        pinetreepages.DeviceMenuItem.prototype.setSelected.call(this, value);

        var color = this._isSelected ? this._onSelectBgColor : this._onOutBgColor;
        this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        var alpha = value ? this.onOverRectAlpha : this.onOutRectAlpha;
        TweenMax.to(this.bgRect, this.tweenTime, {alpha:alpha, ease:this.transition});
    }

    p.over = function()
    {
        this.txt.tweenColor(this._onOverColor, this.tweenTime / 2, this.transition);
        this.bg.tweenColor(this._onOverBgColor, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOverRectAlpha, ease:this.transition});
    }

    p.out = function()
    {
        var color = (this.hasChild && this._isSelected) || this._isSelected ? this._onSelectColor : this._onOutColor;
        this.txt.tweenColor(color, this.tweenTime / 2, this.transition);
        color = this._isSelected ? this._onSelectColor : this._onOutBgColor;
        this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOutRectAlpha, ease:this.transition});
    }

    p.forceOut = function()
    {
         var color = this._onOutColor;
         this.txt.tweenColor(color, this.tweenTime / 2, this.transition);
         color = this._isSelected ? this._onSelectColor : this._onOutBgColor;
         this.bg.tweenColor(color, this.tweenTime / 2, this.transition);

        TweenMax.to(this.bgRect, this.tweenTime, {alpha:this.onOutRectAlpha, ease:this.transition});
    }

    pinetreepages.DeviceMainMenuItem = DeviceMainMenuItem;
}());

(function()
{
	var DeviceChildContainer = function(onOverColor, onOutColor, onSelectColor, gap, fontSize,
                                  onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight
    )
	{
        pinetree.Sprite.call(this);

		this._data = null;
        this._dataCount = 0;
		
		this._items = null;
		
		this.originX = 0;
		this.originY = 0;

        this._onOverColor = onOverColor;
        this._onOutColor = onOutColor;
        this._onSelectColor = onSelectColor != undefined ? onSelectColor : onOverColor;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;
        this._bgHeight = bgHeight || 30;

        this._gap = gap || 0;
        this._fontSize = fontSize || 14;

        this._bg = new pinetree.Quad();
        this._bg.alpha = 0;

        this._contentHeight = 0;

        this.edgeX = 0;

        this.tweenTime = 1.0;
        this.transition = Quad.easeOut;

        this.ON_CLICK = new pinetree.Signal();
        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
    }
    
    var p = __extends(DeviceChildContainer, pinetree.Sprite);

    p.initWithData = function(data)
    {
        if(!data) return;

        this._data = data;
        this._dataCount = data.length;
        this._setup();
        
        //this._bg.width = this._maxWidth;
        //this._bg.height =  this.height;
        //this.addChildAt(this._bg, 0);
    }
		
    p._setup = function()
    {
        var vo, item, len = this._data.length;
        this._items = [];

        this._contentWidth = 0;
        this._contentHeight = 0;

        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];

            item = new pinetreepages.DeviceChildMenuItem(vo, this._onOverColor, this._onOutColor, this._onSelectColor,
                this._onOverBgColor, this._onOutBgColor, this._onSelectBgColor, this._onOverBgAlpha,
                this._onOutBgAlpha, 0
            );
            this.addChild(item);
            item.isAniType = false;
            item.id = i;
            item.fontSize = this._fontSize;
            item.ON_CLICK.add(this, this.onClick);
            item.ON_OVER.add(this, this.onOver);
            item.ON_OUT.add(this, this.onOut);

            //item.bg.height = this._bgHeight;

            item.txt.textColor = this._onOutColor;
            item.y = this._contentHeight;
            this._contentWidth = Math.max(this._contentWidth, item.txt.width);
            this._contentHeight += this._gap + item.height;
            this._items.push(item);
            item.bg.height = 45;
            item.bg.y = -15;

        }

        for(i = 0; i < len; i ++)
        {
            item = this._items[i];
            item.bg.width = this._contentWidth + 50;
        }

        this._contentHeight -= this._gap;
    }
		
    p.onClick = function(item, evt)
    {
        this.ON_CLICK.dispatch(item, evt);
    }
		
    p.onOver = function(item, evt)
    {
        item.txt.tweenColor(this._onOverColor, this.tweenTime, this.transition);
        item.over();

        this.ON_OVER.dispatch(item, evt);
    }
		
    p.onOut = function(item, evt)
    {
        item.txt.tweenColor(this._onOutColor, this.tweenTime, this.transition);
        item.out();

        this.ON_OUT.dispatch(item, evt);
    }
		
    p.selectItem = function(index)
    {
        this.unselectItems(index);

        this._items[index].selected = true;
        this._items[index].txt.testColor = this._onOverColor;
    }
		
    p.unselectItems = function(exceptIndex)
    {
        var item;
        var len = this._data.length;
        
        for(var i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item.id != exceptIndex)
            {
                item.txt.tweenColor(this._onOutColor, item.tweenTime, item.transition);
                item.out();
                item.selected = false;
            }
        }
    }

    p.setContentWidth = function(value)
    {
        this._contentWidth = value;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }
		
    p.show = function(delay)
    {
        //this.alpha = 0;
        this.visible = true;
        this.mouseChildren = true;
        TweenMax.killTweensOf(this);
        TweenMax.to(this, this.tweenTime, {alpha:1, delay:delay || 0, ease:this.transition});
    }
		
    p.hide = function(delay)
    {
        this.mouseChildren = false;
        TweenMax.killTweensOf(this);
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:this.transition, delay:delay || 0,
            onComplete:Delegate.create(this, this._hideComplete)});
    }

    p._hideComplete = function()
    {
        this.visible = false;
    }

    p.dispose = function()
    {
        var item;
        for(var key in this._items)
        {
            item = this._items[key];
            if(item)
            {
                item.dispose();
            }
        }

        this._items.splice(0, this._items.length);

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();

        this.ON_CLICK = null;
        this.ON_OVER = null;
        this.ON_OUT = null;
    }

    pinetreepages.DeviceChildContainer = DeviceChildContainer;
}());

(function()
{
	var DeviceMainContainer = function(onOverColor, onOutColor, onSelectColor, gap, fontSize,
                                 onOverBgColor, onOutBgColor, onSelectBgColor, onOverBgAlpha, onOutBgAlpha, bgHeight
    )
	{
        pinetree.Sprite.call(this);

		this._data = null;
		this._items = null;
		
		this._onOverColor = onOverColor;
		this._onOutColor = onOutColor;
        this._onSelectColor = onSelectColor != undefined ? onSelectColor : onOverColor;
        this._onOverBgColor = onOverBgColor || 0x000000;
        this._onOutBgColor = onOutBgColor || 0x000000;
        this._onSelectBgColor = onSelectBgColor || 0x000000;
        this._onOverBgAlpha = onOverBgAlpha || 0;
        this._onOutBgAlpha = onOutBgAlpha || 0;
        this._bgHeight = bgHeight;

		this._gap = gap || 0;
		this._fontSize = fontSize || 16;
		this._contentWidth  = 0;
		this._contentHeight = 0;

        this.startX = 0;

		this.tweenTime = 1.0;
		this.transition = Quad.easeOut;
		
        this.ON_CLICK = new pinetree.Signal();
        this.ON_OVER = new pinetree.Signal();
        this.ON_OUT = new pinetree.Signal();

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
	}

    var p = __extends(DeviceMainContainer, pinetree.Sprite);
		
    p.initWithData = function(data)
    {
        this._data = data;
        this._setup();
    }

    p._setup = function()
    {
        var vo, item, len = this._data.length;

        this._items = [];
        this.removeAllChildren();

        this._contentWidth = 0;
        for(var i = 0; i < len; i ++)
        {
            vo = this._data[i];
            if(!(vo instanceof  pinetreepages.NavVo))
            {
                trace("vo is not a NavVo, at DeviceMainContainer::_setup()");
                continue;
            }

            item = new pinetreepages.DeviceMainMenuItem(vo, this._onOverColor, this._onOutColor, this._onSelectColor,
                this._onOverBgColor, this._onOutBgColor, this._onSelectBgColor, this._onOverBgAlpha,
                this._onOutBgAlpha, this._bgHeight
            );

            this.addChild(item);

            item.hasChild = vo.hasChild;
            item.id = i;
            item.fontSize = this._fontSize;
            item.ON_CLICK.add(this, this.onClick);
            item.ON_OVER.add(this, this.onOver);
            item.ON_OUT.add(this, this.onOut);
            if(vo.hasChild)
                item.cursor = "default";
            else
                item.buttonMode = true;
            item.x = this.startX;
            item.tweenTime = 0.5;
            item.originY = item.y = i * (item.txt.height + this._gap);
            if(i != 0)
            {
                item.line.width = item.bg.width;
                item.line.height = 1;
                item.line.y = - this._gap - item.height + 15;
                item.line.alpha = 0.3;
                //item.line.visible = true;
            }
            pinetreecom.DrawUtil.drawRect(item.bgRect, item.bg.width, item.bg.height - 6, 0xffffff,
                0, 1, pt.onOutMainMenuColor, 1);

            this._items.push(item);

            item.bg.width = item.txt.width + 50;
            item.bg.height = 45;
            item.bg.y = -15;

            item.visible = false;
        }
    }

    p.onClick = function(item, evt)
    {
        this.ON_CLICK.dispatch(item, evt);
    }

    p.selectItem = function(index)
    {
        this.unselectItems(index);

        var item = this._items[index];
        if(item)
        {
            item.selected = true;
        }
    }

    p.openChildSpace = function(mainIndex, childHeight, delay, callback)
    {
        var len = this._items.length, mainItem;
        for(var i = mainIndex + 1; i < len; i ++)
        {
            mainItem = this._items[i];
            TweenMax.to(mainItem, this.tweenTime / 2, {y:mainItem.originY + childHeight, delay:delay, ease:Quart.easeOut});
        }

        pinetreecom.DelayCaller.delayCall(null, callback, this.tweenTime * 0.2 + delay);
    }

    p.closeChildSpace = function(mainIndex, delay, callback)
    {
        var len = this._items.length, mainItem;
        for(var i = mainIndex + 1; i < len; i ++)
        {
            mainItem = this._items[i];
            TweenMax.to(mainItem, this.tweenTime / 2, {y:mainItem.originY, ease:Quart.easeOut, delay:delay});
        }
        pinetreecom.DelayCaller.delayCall(null, callback, this.tweenTime * 0.3 + delay);
    }

    p.unselectItems = function(exceptIndex)
    {
        if(exceptIndex == undefined) exceptIndex = -1;

        var item;
        var len = this._data.length;

        for(var i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item.id != exceptIndex)
            {
                item.selected = false;
            }
        }
    }

    p.onOver = function(item, evt)
    {
        for (var key in this._items)
        {
            if(item != this._items[key])
            {
                this._items[key].forceOut();
            }
        }
        this.ON_OVER.dispatch(item, evt);
    }

    p.onOut = function(item, evt)
    {
        this.ON_OUT.dispatch(item, evt);
    }

    p.tweenOutAllItem = function(exceptIndex)
    {
        var exceptItem = exceptIndex != undefined && exceptIndex != -1 ? this._items[exceptIndex] : null;

        for (var key in this._items)
        {
            if(this._items[key] != exceptItem)
                this._items[key].out();
        }
    }

    p.showMenu = function(time, delay, interval, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(interval == undefined) delay = 0.1;

        var mainItem, len = this._items.length;
        for (var i = 0; i < len; i ++)
        {
            mainItem = this._items[i];
            mainItem.alpha = 0;
            mainItem.visible = true;
            TweenMax.to(mainItem, time, {alpha:0.9, delay:delay + interval * i, ease:this.transition,
                onComplete:Delegate.create(this, this.tweenComplete), onCompleteParams:[i, len - 1, callback]});
        }
    }

    p.hideMenu = function(time, delay, interval, callback)
    {
        if(time == undefined) time = 1.0;
        if(delay == undefined) delay = 0;
        if(interval == undefined) delay = 0.1;

        var mainItem, len = this._items.length;
        for (var i = len - 1; i >= 0; i --)
        {
            mainItem = this._items[i];
            TweenMax.to(mainItem, time, {alpha:0, delay:delay + interval * (len - 1 - i), ease:this.transition,
                onComplete:Delegate.create(this, this.tweenComplete), onCompleteParams:[i, 0, callback]});
        }
    }

    p.tweenComplete = function(startIndex, endIndex, callback)
    {
        if(startIndex == endIndex)
        {
            callback && callback();
        }
    }

    p.getItem = function(index)
    {
        return this._items[index];
    }

    p.getItemByID = function(id)
    {
        var vo;
        var len = this._data.length;

        for (var i = 0; i < len; i ++)
        {
            vo = this._data[i];

            if(vo.id == id)
            {
                return this.getItem(i);
            }
        }
        return null;
    }

    p.getContentWidth = function(){ return this._contentWidth; }
    p.setContentWidth = function(value)
    {
        this._contentWidth = value;
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.dispose = function()
    {
        for(var key in this._items)
        {
            this._items[key].dispose();
        }

        this.ON_CLICK && this.ON_CLICK.removeAll();
        this.ON_OVER && this.ON_OVER.removeAll();
        this.ON_OUT && this.ON_OUT.removeAll();

        this.ON_CLICK = null;
        this.ON_OVER = null;
        this.ON_OUT = null;
    }

    pinetreepages.DeviceMainContainer = DeviceMainContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var FooterView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this.MUSIC_STATUS = "music_status";

        this._footerLabel = pt.config.footer;

        this._footerTxt = null;

        this._socialContainer = null;
        this._socialOffsetY = 10;

        this._musicData = pt.config.music.data || [];
        this._isActive = !!pt.config.music.setting.active || false;
        this._isMusicOpening = pinetree.isDevice ? false : !!pt.config.music.setting.isOpen;
        this._musicPlayer = null;

        this._storageMute = pinetreecom.StorageManager.get(this.MUSIC_STATUS) == "0";

        this._musicBtn = null;

        this._bg = null;
    }

    var p = __extends(FooterView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this.initUI();
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);

        this.redraw();
    }

    p.initUI = function()
    {
        this._bg = new pinetree.Quad();
        this.addChild(this._bg);
        this._bg.width = pt.stageWidth;
        this._bg.color = pt.bgColor;
        this._bg.alpha = 0;

        this._footerTxt = new pinetree.TextField();
        this.addChild(this._footerTxt);
        this._footerTxt.className += " footer";
        this._footerTxt.alpha = 0;

        if(pinetree.isSmallMode)
        {
            this._footerTxt.x = 30;
            this._footerTxt.htmlText = this._footerLabel;
        }
        else
        {
            this._footerTxt.x = 20;
            this._footerTxt.htmlText = this._footerLabel;
        }

        this._musicBtn = new pinetreecom.ToggleButton(true, pt.onOutColor);
        this.addChild(this._musicBtn);
        var onIcon = pt.getCommonTexture(pinetreepages.EnumTextures.VOLUME_ON_ICON);
        var offIcon = pt.getCommonTexture(pinetreepages.EnumTextures.VOLUME_OFF_ICON);
        this._musicBtn.setTextures(onIcon, offIcon);
        this._musicBtn.ON_CHANGE.add(this, this._onMusicStateChange);

        this._musicPlayer = new pinetreecom.MusicPlayer();

        if (this._musicData.length > 0 && this._isActive)
        {
            if(this._isMusicOpening && !this._storageMute)
            {
                this._musicPlayer.startWith(this._musicData);
                this._musicPlayer.volume = pt.config.music.setting.volume;
            }
            else
            {
                this._musicBtn.setState(pinetreecom.ToggleButton.STATE_OFF);
                this._musicPlayer.mute = true;
                pt.isMute = true;
            }
        }
        else
        {
            this._musicBtn.visible = false;
        }

        this._socialContainer = new pinetreecom.SocialContainer(10, 5, 450, 1, 1.0);
        this.addChild(this._socialContainer);
        this._socialContainer.ON_LOAD_EACH_COMPLETE.add(this, this._onEachSocialIconLoadComplete);
        this._socialContainer.data = pt.config.socials;

        TweenMax.to(this._footerTxt, this.tweenTime, {alpha:1, ease:Quad.easeOut});
    }

    p.getBg = function()
    {
        return this._bg;
    }

    p._onEachSocialIconLoadComplete = function()
    {
        /*if(pinetree.isSmallMode)
        {
            this._socialContainer.x = 30 - pt.DEVICE_MENU_BG_WIDTH;
            this._socialContainer.y = (pt.stageHeight - this._socialContainer.height) - this._socialOffsetY;
        }
        else
        {
            this._socialContainer.x = pt.LEFT_WIDTH - this._socialContainer.width - 30;
            this._socialContainer.y = (pt.stageHeight - this._socialContainer.height) - this._socialOffsetY;
        }*/
        this.redraw();
    }

    p._onMusicStateChange = function(e)
    {
        if(e == pinetreecom.ToggleButton.STATE_ON)
        {
            pt.isMute = !this._isActive;
            this.unmute();

            pinetreecom.StorageManager.set(this.MUSIC_STATUS, "1");
        }
        else
        {
            this.mute();
            pt.isMute = true;

            pinetreecom.StorageManager.set(this.MUSIC_STATUS, "0");
        }
    }

    p.mute = function()
    {
        if(!this._isActive) return;

        if(!pt.isMute)
        {
            this._musicPlayer.mute = true;
            this._musicBtn.setState(pinetreecom.ToggleButton.STATE_OFF);
        }
    }

    p.unmute = function()
    {
        if(!this._isActive) return;

        if(!this._musicPlayer.isInitialized)
        {
            this._musicPlayer.startWith(this._musicData);
            this._musicPlayer.volume = pt.config.music.setting.volume;
        }

        if(!pt.isMute)
        {
            this._musicPlayer.mute = false;
            this._musicBtn.setState(pinetreecom.ToggleButton.STATE_ON);
        }
    }

    p.resize = function(sw, sh)
    {
        var musicPlace = 0;

        if(pinetree.isSmallMode)
        {
            if(this._musicBtn.visible)
            {
                musicPlace = this._musicBtn.width;
            }

            this._footerTxt.x = sw - this._footerTxt.width - 30;
            this._footerTxt.y = sh - this._footerTxt.height - 15;

            this._socialContainer.x = sw - this._socialContainer.width - 30 - musicPlace;
            this._socialContainer.y = sh - this._socialContainer.height - this._footerTxt.height - 15 - this._socialOffsetY;

            this._musicBtn.x = sw - this._musicBtn.width - 20;
            this._musicBtn.y = this._socialContainer.y - (this._musicBtn.height >> 1) + 8;

            if(this._bg)
            {
                this._bg.visible = false;
            }
        }
        else
        {
            this._musicBtn.x = sw - this._musicBtn.width;
            this._musicBtn.y = (pt.currentBottomHeight - this._musicBtn.height) >> 1;

            if(this._musicBtn.visible)
            {
                musicPlace = this._musicBtn.width;
            }

            this._footerTxt.x = sw - this._footerTxt.width - musicPlace - 25;
            this._footerTxt.y = (pt.currentBottomHeight - this._footerTxt.height) >> 1;

            this._socialContainer.y = (pt.currentBottomHeight - this._socialContainer.height) >> 1;

            if(pt.config.footerPosition == "bottom" && pt.config.menuPosition == "top")
            {
                this._socialContainer.x = 25;
            }
            else
            {
                this._socialContainer.x = this._footerTxt.x - 10 - this._socialContainer.width;
            }

            if(this._bg)
            {
                if(pt.config.footerPosition == "bottom" && pt.config.menuPosition == "top")
                {
                    this._bg.visible = true;
                    this._bg.width = sw;
                    this._bg.height = pt.currentBottomHeight;
                }
                else
                {
                    this._bg.visible = false;
                }
            }
        }
    }

    p.dispose = function()
    {
        this._socialContainer && this._socialContainer.dispose();
        this._socialContainer = null;

        this._musicBtn && this._musicBtn.dispose();
        this._musicBtn = null;

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object FooterView]";
    }

    pinetreepages.FooterView = FooterView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var BackgroundView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._preImg = null;
        this._currentImg = null;

        this._container = null;

        this.tweenTime = 1.0;
        this.transition = Linear.easeNone;

        this._cover = null;
        this._coverAlpha = 0;
        this._coverColor = pt.bgColor;

        this._src = "";

        this._tileURL = pt.config.background.tileURL;
        this._tileAlpha = pt.config.background.tileAlpha;

        this._tileImg = null;
    }

    var p = __extends(BackgroundView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._container = new pinetree.Sprite();
            this.addChild(this._container);

            this._cover = new pinetree.Quad();
            this._cover.alpha = this._coverAlpha;
            this._cover.color = this._coverColor;
            this.addChild(this._cover);

            this._tileImg = new pinetreecom.TileRectImage(0, 0, this._tileURL);
            this._tileImg.alpha = this._tileAlpha;
            if(this._tileAlpha > 0)
            {
                this.addChild(this._tileImg);
            }

            var colors = [pt.onOutColor, pt.onOverColor];
            this.particleAnimator = new pinetreecom.ParticleAnimator([pinetreecom.ParticleCircle], colors);
            this.addChild(this.particleAnimator);

            this.redraw();
        }

        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.showTile = function(isShow)
    {
        if(this._tileAlpha <= 0 || !this._tileImg) return;
        TweenMax.to(this._tileImg, this.tweenTime * 0.5, {alpha:isShow ? this._tileAlpha : 0,
            onComplete:this._onTweenTile, onCompleteParams:[this._tileImg, isShow]});
    }

    p._onTweenTile = function(target, isVisible)
    {
        target.visible = isVisible;
    }

    p.changeBackground = function(src)
    {
        if(!this.isInitialized || this._src == src || !src) return;

        this._src = src;

        this._preImg = this._currentImg;
        this._currentImg = new pinetreecom.FullRectImage(1, 1, pt.config.background.align || "lt");
        this._currentImg.ON_LOAD_COMPLETE.add(this, this.onLoadImageComplete);
        this._currentImg.load(src);
    }

    p.onLoadImageComplete = function(unused)
    {
        if(!this.isInitialized) return;

        this._currentImg.alpha = 0;
        this._container.addChild(this._currentImg);

        /*this._currentImg.show(this.tweenTime * 1.2, this.tweenTime * 1.2,
            Quint.easeInOut, Delegate.create(this, this.onTweenComplete));*/
        this._currentImg.visible = true;

        this.redraw();

        TweenMax.to(this._currentImg, this.tweenTime * 1.5, {alpha:1, delay:this.tweenTime, ease:this.transition,
            onComplete:Delegate.create(this, this.onTweenComplete)});
    }

    p.onTweenComplete = function()
    {
        if(!this.isInitialized) return;

        if(this._preImg)
        {
            this._preImg.removeFromParent();
            this._preImg.dispose();
            this._preImg = null;
        }
    }

    p.changeCoverAlpha = function(value)
    {
        if(!this._cover || this._coverAlpha == value)
        {
            return;
        }

        if(this._coverAlpha <= 0)
        {
            this._cover.width = pt.stageWidth;
            this._cover.height = pt.stageHeight;
        }

        this._coverAlpha = value;
        TweenMax.to(this._cover, this.tweenTime * 1.5, {alpha:this._coverAlpha, ease:Linear.easeNone});
    }

    p.resize = function(sw, sh)
    {
        this._currentImg && this._currentImg.redraw(sw, sh);
        this._preImg && this._preImg.redraw(sw, sh);

        if(this._tileImg && this._tileAlpha > 0)
        {
            this._tileImg.setSize(sw, sh);
        }

        if(this._cover && this._cover.alpha > 0)
        {
            this._cover.width = sw;
            this._cover.height = sh;
        }
    }

    p.dispose = function()
    {
        this.particleAnimator.dispose();
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object BackgroundView]";
    }

    pinetreepages.BackgroundView = BackgroundView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var HomeView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._MAX_THUMB_COUNT = 9;

        this._logoURL = "data/images/logo/logo.png";
        this._discoverLabel = "DISCOVER";
        this._discoverLink = "gallery";
        this._backgroundImages = [];
        this._thumbSize = 120;
        this._thumbGap = 10;
        this._thumbArray = [];

        this._isInited = false;

        this._bgDuration = 5;

        this._logo = null;
        this._bgContainer = null;
        this._bgCover = null;
        this._discoverBtn = null;

        this._prevImg = null;
        this._currentImg = null;

        this._thumbContainer = null;

        this._currentIndex = 0;
        this._dataCount = 0;

        this._pnBtns = null;
    }

    var p = __extends(HomeView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            this._logoURL = data.logo || this._logoURL;
            this._discoverLabel = data.discoverLabel || this._discoverLabel;
            this._discoverLink = data.discoverLink || this._discoverLink;
            this._backgroundImages = data.backgroundImages || this._backgroundImages;
            this._thumbGap = data.thumbnails.setting.gap || this._thumbGap;
            this._thumbArray = data.thumbnails.data || this._thumbArray;

            if(this._thumbArray.length > this._MAX_THUMB_COUNT)
            {
                this._thumbArray.splice(this._MAX_THUMB_COUNT);
            }

            this._dataCount = this._backgroundImages.length;
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._bgContainer = new pinetree.Sprite();
        this.addChild(this._bgContainer);

        this._bgCover = new pinetree.Quad();
        this._bgCover.color = pt.bgColor;
        this._bgCover.alpha = pt.bgAlpha;
        this.addChild(this._bgCover);

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON);
        var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.3, 0, 0);
        prevBtn.setTextures(tex, null);

        tex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON);
        var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.3, 0, 0);
        nextBtn.setTextures(tex, null);

        this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false);
        this._pnBtns.onOverColor = pt.onOverColor;
        this._pnBtns.onOutColor = pt.onOutColor;
        this._pnBtns.hide(0);
        this.addChild(this._pnBtns);
        this._pnBtns.useMouseWheel = false;
        this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);

        this._pnBtns.show();
        this._pnBtns.enabled = false;
        this._pnBtns.showPNButtons(this._dataCount > 0, this._dataCount > 0);

        this._logo = new pinetreecom.Thumbnail(0, 0, 0, 0, false, null, true, null, true);
        this.addChild(this._logo);
        this._logo.visible = false;
        this._logo.ON_LOAD_COMPLETE.add(this, this._onLoadLogoComplete);
        this._logo.load(this._logoURL);

        this._discoverBtn = this._btnLeft = new pinetreecom.TextButton(150, 35, 0, 0, 0, 11, 12, false, null, true, 1,
            pt.bgColor, pt.textColor, pt.onOverColor, pt.bgcolor, 1, 1, 1, 0,
            pt.onOverColor, pt.onOutColor, 0, 1, 3, 3, 3, 3);
        this.addChild(this._discoverBtn);
        this._discoverBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onDiscover, this);
        this._discoverBtn.text = this._discoverLabel;

        this._thumbContainer = new pinetreepages.HomeThumbContainer(this._thumbSize, this._thumbGap, this._thumbArray);
        this._thumbContainer.rotation = -45;
        this.addChild(this._thumbContainer);

        this._loadBackgroundImage();

        this.transitionIn();
    }

    p._onLoadLogoComplete = function(e)
    {
        if(e)
        {
            this._logo.visible = true;
            this.redraw();
        }
    }

    p._loadBackgroundImage = function()
    {
        var url = this._backgroundImages[this._currentIndex];
        if(this._currentImg)
        {
            this._prevImg && this._prevImg.removeFromParent(true);
            this._prevImg = this._currentImg;
            this._bgContainer.addChild(this._prevImg);
        }

        this._currentImg = new pinetreecom.FullRectImage(1, 1, "ct");
        this._currentImg. ON_LOAD_COMPLETE.add(this, this._onLoadBackgroundImgInit);
        this._currentImg.load(url);
    }

    p._onLoadBackgroundImgInit = function(img)
    {
        this._bgContainer.addChild(img);
        img.x = pt.stageWidth;
        img.redraw(pt.stageWidth, pt.stageHeight);
        img.show(0, 0);
        TweenMax.to(img, this.tweenTime * 1.2, {x:0, ease:Quart.easeOut});

        if(this._prevImg)
        {
            TweenMax.to(this._prevImg, this.tweenTime * 1.2, {x:-pt.stageWidth, ease:Quart.easeOut});
        }

        this._pnBtns.enabled = true;

        pinetreecom.DelayCaller.delayCall(this, this._delayLoadNext, this._bgDuration);
    }

    p._delayLoadNext = function()
    {
        this._currentIndex ++;
        if(this._currentIndex >= this._dataCount)
        {
            this._currentIndex = 0;
        }

        this._pnBtns.enabled = false;
        this._pnBtns.showPNButtons(this._dataCount > 0, this._dataCount > 0);
        this._loadBackgroundImage();
    }

    p._onDiscover = function(evt)
    {
        pinetreesite.siteController.gotoPage(this._discoverLink);
    }

    p._onClickPNButton = function(e)
    {
        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._thumbContainer.prev();
        }
        else
        {
            this._thumbContainer.next();
        }
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        if(pinetree.isSmallMode)
        {

        }
        else
        {
            this._logo.x = (sw - this._logo.imageWidth) >> 1;
            this._logo.y = 50;

            this._pnBtns.prevBtn.x = 50;
            this._pnBtns.nextBtn.x = sw - 50 - this._pnBtns.nextBtn.width;
            this._pnBtns.x = 0;
            this._pnBtns.y = (sh - this._pnBtns.height) >> 1;

            this._discoverBtn.x = (sw - this._discoverBtn.width) >> 1;
            this._discoverBtn.y = (sh - this._discoverBtn.height - 50);
        }

        if(this._currentImg)
        {
            this._currentImg.redraw(sw, sh);
        }
        this._bgCover.setSize(sw, sh);

        this._thumbContainer.x = sw >> 1;
        this._thumbContainer.y = sh >> 1;
    }

    p.transitionIn = function()
    {
        this.redraw();

        var sw = pt.stageWidth;
        var sh = pt.stageHeight;

        if(pinetree.isSmallMode)
        {

        }
        else
        {

        }

        var y = 0;

        this._discoverBtn.x = (sw - this._discoverBtn.width) >> 1;
        this._discoverBtn.y = sh;

        this._discoverBtn.visible = true;
        y = (sh - this._discoverBtn.height - 50);
        TweenMax.to(this._discoverBtn, this.tweenTime, {y:y, ease:Quart.easeOut});

        this._isInited = true;

        this.transitionInComplete();
    }

    p.transitionInComplete = function()
    {
        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
    }

    p.transitionOut = function()
    {
        this._isInited = false;

        pinetreecom.DelayCaller.removeByOwner(this);

        if(pinetree.isSmallMode)
        {

        }
        else
        {

        }
        this.transitionOutComplete();
    }

    p.dispose = function()
    {
        if(this._prevImg)
        {
            TweenMax.killTweensOf(this._prevImg);
            this._prevImg.dispose();
            this._prevImg = null;
        }

        if(this._currentImg)
        {
            TweenMax.killTweensOf(this._currentImg);
            this._currentImg.dispose();
            this._currentImg = null;
        }

        this._thumbContainer && this._thumbContainer.dispose();
        this._thumbContainer = null;

        this._discoverBtn && this._discoverBtn.dispose();
        this._discoverBtn = null;

        this._logo && this._logo.dispose();
        this._logo = null;

        this._pnBtns && this._pnBtns.dispose();
        this._pnBtns = null;

        this._dataLoader && this._dataLoader.dispose();
        this._dataLoader = null;

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object HomeView]";
    }

    pinetreepages.HomeView = HomeView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var AboutView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._title = "";
        this._description = "";
        this._imageurls = null;

        this._gapX = 5;
        this._padding = 35;

        this._imageWidth = 0;
        this._imageHeight = 0;
        this._textWidth = 0;
        this._textHeight = 0;
        this._itemHeight = 0;

        this.sliderWidth = pinetree.isDevice ? 0 : 150;
        this.sliderHeight = pinetree.isDevice ? 0 : 10;
        this.sliderStartX = 30;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.onOutColor;
        this.sliderBGAlpha = 0.1;

        this._bgColor = pt.bgColor;
        this._textColor = pt.textColor;

        this._dataLoader = null;

        this._imageLoader = null;
        this._txtContainer = null;
        this._container = null;
        this._hscroller = null;
        this._triggerRect = null;
    }

    var p = __extends(AboutView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            this._title = data.title || this._title;
            this._description = data.description || this._description;
            this._imageurl = data.imageurl;
            this._textWidth = data.textWidth;
            this._textHeight = data.textHeight;
            this._imageWidth = data.imageWidth;
            this._imageHeight = data.imageHeight;
            this._itemHeight = Math.max(this._textHeight, this._imageHeight);
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._container = new pinetree.Sprite();
        this._container.alpha = 0;

        this._hscroller = new pinetreecom.HScroller(this.sliderWidth, this.sliderHeight, 1, 1,
            this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
            this.sliderBGColor, this.sliderBGAlpha, null, false, true, false);
        this.addChild(this._hscroller);
        this._hscroller.ON_CHANGE.add(this, this._onScrollProgress);

        this._hscroller.addTarget(this._container, 0, 0, 0);

        this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
        this._container.addChild(this._imageLoader);

        this._txtContainer = new pinetreecom.TextContainer(this._textWidth, this._textHeight,
            this._bgColor, 0, true, true, null);
        this._container.addChild(this._txtContainer);
        this._txtContainer.gapBetweenTitleAndInfo = 25;
        this._txtContainer.sliderOverColor = pt.onOverColor;
        this._txtContainer.sliderOutColor = pt.onOverColor;
        this._txtContainer.sliderBGAlpha = 0;
        this._txtContainer.paddingLeft = this._padding;
        this._txtContainer.paddingRight = this._padding;
        this._txtContainer.paddingTop = 0;
        this._txtContainer.paddingBottom = 0;
        this._txtContainer.init();

        this._txtContainer.title = this._title;
        this._txtContainer.information = this._description;

        this._txtContainer.scrollGapX = 0;
        this._txtContainer.scrollerHeight = this._txtContainer.infoScrollHeight;
        this._txtContainer.x = this._imageWidth;
        this._txtContainer.y = 0;

        this._triggerRect = new pinetreecom.TriggerRect(1, 1, 0x00ff00, 0);
        this.addChildAt(this._triggerRect, 0);

        this._hscroller.reset();
        this._hscroller.enabled = false;
        this._hscroller.scrollMC.alpha = 0;

        if(!pinetree.isDevice)
        {
            this._hscroller.mouseWheelArea = this._triggerRect;
            this._hscroller.enabled = true;
            this._hscroller.show();
        }

        this._imageLoader.load(this._imageurl);

        this.transitionIn();
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p._onImageLoadComplete = function ()
    {

    }

    p._onIOError = function(evt)
    {
        this._onImageLoadComplete(null);
    }

    p.resize = function(sw, sh)
    {
        if(pinetree.isDevice)
        {

        }
        else
        {
            var contentWidth = this._imageWidth + this._textWidth + this.sliderStartX * 2;

            var x = ((sw - contentWidth) >> 1) + this.sliderStartX;
            if(x < this.sliderStartX) x = this.sliderStartX;

            this._hscroller.setSize(contentWidth, sh, sw,
                ((sw -this.sliderWidth) >> 1) - x, this._itemHeight + 30);

            this._hscroller.x = x;
            this._hscroller.y = (sh - this._itemHeight) >> 1;
            this._hscroller.scrollerWidth = this.sliderWidth;

            if(this._triggerRect)
            {
                this._triggerRect.width = sw;
                this._triggerRect.height = sh;
            }
        }
    }

    p.transitionIn = function()
    {
        this.redraw();

        if(pinetree.isDevice)
        {
            this._container.alpha = 1;
        }
        else
        {
            this._hscroller.y = - this._itemHeight;
            this._container.alpha = 1;

            var y = (pt.stageHeight - this._itemHeight) >> 1;
            TweenMax.to(this._hscroller, this.tweenTime * 1.2, {y:y, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});
        }
    }

    p.transitionInComplete = function()
    {
        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
        this.redraw();

        this._hscroller.tweenScrollerAlpha(1, this.tweenTime / 2);
    }

    p.transitionOut = function()
    {
        if(pinetree.isDevice)
        {

        }
        else
        {
            TweenMax.to(this._hscroller, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
                onComplete:Delegate.create(this, this.transitionOutComplete)});
        }
    }

    p.dispose = function()
    {
        if(this._hscroller)
        {
            this._hscroller.removeFromParent(true);
            this._hscroller = null;
        }

        if(this._triggerRect)
        {
            this._triggerRect.removeFromParent(true);
            this._triggerRect = null;
        }

        this._dataLoader && this._dataLoader.dispose();
        this._dataLoader = null;

        this._imageLoader && this._imageLoader.dispose();
        this._imageLoader = null;

        this._txtContainer && this._txtContainer.dispose();
        this._txtContainer = null;

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object AboutView]";
    }

    pinetreepages.AboutView = AboutView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var AboutDeviceView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._title = "";
        this._description = "";
        this._imageurl = "";

        this._padding = 30;

        this._imageWidth = 0;
        this._imageHeight = 0;
        this._textWidth = 100;

        this.sliderWidth = pinetree.isDevice ? 0 : 25;
        this.sliderHeight = pinetree.isDevice ? 0 : 5;

        this._maxContentWidth = 640;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.bgColor;
        this.sliderBGAlpha = 0.5;

        this._bgColor = pt.bgColor;
        this._textColor = pt.textColor;

        this._dataLoader = null;

        this._container = null;
        this._imageLoader = null;
        this._txtContainer = null;
    }

    var p = __extends(AboutDeviceView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
            this.registerAutoDispose(this._dataLoader);
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            this._title = data.title || this._title;
            this._description = data.description || this._description;
            this._imageurl = data.imageurl || "";
            this._imageWidth = data.imageWidth;
            this._imageHeight = data.imageHeight;
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
        this._container.addChild(this._imageLoader);
        this._imageLoader.x = this._padding;
        this._imageLoader.y = this._padding + pt.TOP_HEIGHT;
        this.registerAutoDispose(this._imageLoader);

        this._txtContainer = new pinetreecom.DeviceTextContainer(pt.stageWidth, this._bgColor, 0, true, true);
        this._container.addChild(this._txtContainer);
        this._txtContainer.paddingLeft = this._padding;
        this._txtContainer.paddingRight = this._padding;
        this._txtContainer.paddingTop = 0;
        this._txtContainer.paddingBottom = 0;
        this._txtContainer.init();
        this.registerAutoDispose(this._txtContainer);

        this._txtContainer.title = this._title;
        this._txtContainer.information = this._description;

        this._txtContainer.x = 0;
        this._txtContainer.y = this._imageHeight + this._imageLoader.y + this._padding;

        this._imageLoader.load(this._imageurl);

        this.transitionIn();
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p._onImageLoadComplete = function ()
    {

    }

    p._onIOError = function(evt)
    {
        this._onImageLoadComplete(null);
    }

    p.resize = function(sw, sh)
    {
        var contentWidth = sw;
        if(contentWidth > this._maxContentWidth) contentWidth = this._maxContentWidth;
        this._txtContainer.contentWidth = contentWidth;
        this._txtContainer.scrollGapX = 0;

        this.height = this._txtContainer.y + this._txtContainer.contentHeight + this._padding;

        if(this._height < sh - pt.TOP_HEIGHT - this._padding * 2)
        {
            this._container.y = (sh - pt.TOP_HEIGHT - this._padding * 2 - this._height) >> 1;
        }
        else
        {
            this._container.y = 0;
        }

        this._container.x = (sw - contentWidth) >> 1;
    }

    p.transitionIn = function()
    {
        this.redraw();

        if(!this.tweenAlphaByCSS(1, this.tweenTime, 0, "ease-out", Delegate.create(this, this.transitionInComplete)))
        {
            TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});
        }
    }

    p.transitionInComplete = function()
    {
        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
        this.redraw();
    }

    p.transitionOut = function()
    {
        if(!this.tweenAlphaByCSS(0, this.tweenTime, 0, "ease-out", Delegate.create(this, this.transitionOutComplete)))
        {
            TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionOutComplete)});
        }
    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object AboutDeviceView]";
    }

    pinetreepages.AboutDeviceView = AboutDeviceView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function(){
    var ClientView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);
    }

    var p = __extends(ClientView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function()
    {

    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ClientView]";
    }

    pinetreepages.ClientView = ClientView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ContactView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._title = "";
        this._formTitle = "";
        this._description = "";
        this._imageurl = null;
        this._mapLink = "";
        this._setting = null;

        this._padding = 35;
        this._paddingX = 20;

        this._imageWidth = 0;
        this._imageHeight = 0;
        this._formWidth = 0;
        this._textWidth = 0;
        this._textHeight = 0;
        this._itemHeight = 0;

        this.sliderWidth = pinetree.isDevice ? 0 : 150;
        this.sliderHeight = pinetree.isDevice ? 0 : 10;
        this.sliderStartX = 30;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.onOutColor;
        this.sliderBGAlpha = 0.1;

        this._bgColor = pt.bgColor;
        this._textColor = pt.textColor;

        this._dataLoader = null;

        this._readMoreLabel = "Google Map";

        this._icon = null;
        this._readMoreTxt = null;
        this._hitArea = null;

        this._imageLoader = null;
        this._txtContainer = null;
        this._container = null;
        this._titleTxt = null;
        this._hscroller = null;
        this._triggerRect = null;

        this.mouseChildren = this.mouseEnabled = false;
    }

    var p = __extends(ContactView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            var obj = data.data;
            this._title = obj.title || this._title;
            this._formTitle = obj.formTitle || this._formTitle;
            this._description = obj.description || this._description;
            this._imageurl = obj.imageurl;
            this._mapLink = obj.mapLink || this._mapLink;
            this._readMoreLabel = obj.readMoreLabel || this._readMoreLabel;
            this._textWidth = obj.textWidth;
            this._textHeight = obj.textHeight;
            this._formWidth = obj.formWidth || this._textWidth;
            this._imageWidth = obj.imageWidth;
            this._imageHeight = obj.imageHeight;
            this._itemHeight = Math.max(this._textHeight, this._imageHeight);
            this._setting = data.setting;
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._container = new pinetree.Sprite();
        this._container.alpha = 0;

        this._hscroller = new pinetreecom.HScroller(this.sliderWidth, this.sliderHeight, 1, 1,
            this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
            this.sliderBGColor, this.sliderBGAlpha, null, false, true, false);
        this.addChild(this._hscroller);
        this._hscroller.ON_CHANGE.add(this, this._onScrollProgress);

        this._hscroller.addTarget(this._container, 0, 0, 0);

        this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
        this._container.addChild(this._imageLoader);

        if(this._mapLink != "")
        {
            this._readMoreTxt = new pinetree.TextField();
            this._readMoreTxt.className += " contact_read_more_label";
            this._readMoreTxt.useMouseHand = true;
            this._readMoreTxt.selectable = false;
            this._container.addChild(this._readMoreTxt);
            this._readMoreTxt.alpha = 0;
            this._readMoreTxt.width = this._imageWidth;
            this._readMoreTxt.htmlText = this._readMoreLabel;
            this.registerAutoDispose(this._readMoreTxt);

            var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
            this._icon = new pinetree.TextureImage(tex);
            this._icon.alpha = 0;
            this._icon.buttonMode = true;
            this._container.addChild(this._icon);
            pinetreecom.ColorUtil.setColor(this._icon, pt.bgColor);
            this._icon.x = (this._imageWidth - this._icon.width) >> 1;
            this.registerAutoDispose(this._icon);

            this._hitArea = new pinetree.Sprite();
            this._hitArea.width = this._imageWidth;
            this._hitArea.height = this._imageHeight;
            this._container.addChild(this._hitArea);
            this._hitArea.buttonMode = true;
            this._hitArea.alpha = 0;
            this._hitArea.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverHitarea, this);
            this._hitArea.addEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutHitarea, this);
            this._hitArea.addEventListener(pinetree.MouseEvent.CLICK, this.onClickHitarea, this);
        }

        this._txtContainer = new pinetreecom.TextContainer(this._textWidth, this._textHeight,
            this._bgColor, 0, true, true, null);
        this._container.addChild(this._txtContainer);
        this._txtContainer.gapBetweenTitleAndInfo = 25;
        this._txtContainer.sliderOverColor = pt.onOverColor;
        this._txtContainer.sliderOutColor = pt.onOverColor;
        this._txtContainer.sliderBGAlpha = 0;
        this._txtContainer.paddingLeft = this._padding;
        this._txtContainer.paddingRight = this._paddingX;
        this._txtContainer.paddingTop = 0;
        this._txtContainer.paddingBottom = 0;
        this._txtContainer.init();

        this._txtContainer.title = this._title;
        this._txtContainer.information = this._description;

        this._txtContainer.scrollGapX = 0;
        this._txtContainer.scrollerHeight = this._textHeight - this._txtContainer.titleHeight
            - this._txtContainer.gapBetweenTitleAndInfo;
        this._txtContainer.x = this._imageWidth;

        this._titleTxt = new pinetree.TextField();
        this._titleTxt.className += " contact_form_title";
        this._container.addChild(this._titleTxt);
        this._titleTxt.selectable = false;
        this._titleTxt.x = this._txtContainer.x + this._textWidth + this._paddingX;
        this._titleTxt.htmlText = this._formTitle;

        this._contactForm = new pinetreecom.ContactForm("data/php/contact.php", this._formWidth, this._textColor);
        this._contactForm.mouseChildren = false;
        this._container.addChild(this._contactForm);
        this._contactForm.initWith(this._setting);
        this._contactForm.x = this._txtContainer.x + this._textWidth + this._paddingX;
        this._contactForm.y = this._txtContainer.gapBetweenTitleAndInfo + this._txtContainer.titleHeight;
        var offsetX = (this._formWidth - 218) >> 1;
        var offsetY = (235 - 100) >> 1;
        this._contactForm.updateMsgBoxPosition(this._contactForm.x + offsetX, this._contactForm.y + offsetY);

        this._triggerRect = new pinetreecom.TriggerRect(1, 1, 0x00ff00, 0);
        this.addChildAt(this._triggerRect, 0);

        this._hscroller.reset();
        this._hscroller.enabled = false;
        this._hscroller.scrollMC.alpha = 0;

        if(!pinetree.isDevice)
        {
            this._hscroller.mouseWheelArea = this._triggerRect;
            this._hscroller.enabled = true;
            this._hscroller.show();
        }

        this._imageLoader.load(this._imageurl);

        this.transitionIn();
    }

    p._onOverHitarea = function(evt)
    {
        TweenMax.to(this._imageLoader.imageLoader.fg, this.tweenTime / 3, {alpha: pt.bgAlpha, ease:Quad.easeOut});

        var y = this._imageHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        if(this._icon)
        {
            this._icon.y = y - this._icon.height - gap - 20 + iconOffsetY;
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, y:y - this._icon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        }

        if(this._readMoreTxt)
        {
            this._readMoreTxt.y = y + gap + 20;
            TweenMax.to(this._readMoreTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});
        }
    }

    p.onOutHitarea = function(evt)
    {
        TweenMax.to(this._imageLoader.imageLoader.fg, this.tweenTime / 3, {alpha:0, ease:Quad.easeOut});

        var y = this._imageHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, y:y - this._icon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        TweenMax.to(this._readMoreTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});
    }

    p.onClickHitarea = function(evt)
    {
        navigateToURL(this._mapLink, "_blank");
        this.onOutHitarea(null);
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p._onImageLoadComplete = function (evt)
    {
        if(evt)
        {
            this._imageLoader.setRealFitSize(this._imageWidth, this._itemHeight);
        }
    }

    p._onIOError = function(evt)
    {
        this._onImageLoadComplete(null);
    }

    p.resize = function(sw, sh)
    {
        if(pinetree.isDevice)
        {

        }
        else
        {
            var contentWidth = this._imageWidth + this._textWidth + this._formWidth + this._paddingX + this.sliderStartX * 2;

            var x = ((sw - contentWidth) >> 1) + this.sliderStartX;
            if(x < this.sliderStartX) x = this.sliderStartX;

            this._hscroller.x = x;
            this._hscroller.y = (sh + pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._itemHeight) >> 1;

            this._hscroller.setSize(contentWidth, sh, sw,
                ((sw -this.sliderWidth) >> 1) - x, this._itemHeight + 30);
            this._hscroller.scrollerWidth = this.sliderWidth;

            if(this._triggerRect)
            {
                this._triggerRect.width = sw;
                this._triggerRect.height = sh;
            }
        }
    }

    p.transitionIn = function()
    {
        this.redraw();

        this.mouseChildren = this.mouseEnabled = true;

        if(pinetree.isDevice)
        {
            this._txtContainer.alpha = 0;
            TweenMax.to(this._contactForm, this.tweenTime, {alpha:1, delay:0.1, ease:Cubic.easeInOut});
            TweenMax.to(this._txtContainer, this.tweenTime, {alpha:1, delay:0.2, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});

            this._container.alpha = 1;
        }
        else
        {
            this._hscroller.y = - this._itemHeight;
            this._container.alpha = 1;

            var y = (pt.stageHeight + pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._itemHeight) >> 1;
            TweenMax.to(this._hscroller, this.tweenTime * 1.2, {y:y, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});
        }
    }

    p.transitionInComplete = function()
    {
        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
        this.redraw();

        this._hscroller.tweenScrollerAlpha(1, this.tweenTime / 2);
    }

    p.transitionOut = function()
    {
        this.mouseChildren = this.mouseEnabled = false;
        this._contactForm.mouseChildren = false;

        if(pinetree.isDevice)
        {

        }
        else
        {
            TweenMax.to(this._hscroller, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
                onComplete:Delegate.create(this, this.transitionOutComplete)});
        }
    }

    p.dispose = function()
    {
        if(this._hscroller)
        {
            this._hscroller.removeFromParent(true);
            this._hscroller = null;
        }

        if(this._triggerRect)
        {
            this._triggerRect.removeFromParent(true);
            this._triggerRect = null;
        }

        this._dataLoader && this._dataLoader.dispose();
        this._dataLoader = null;

        if(this._imageLoader)
        {
            this._imageLoader.dispose();
            this._imageLoader = null;
        }

        if(this._hitArea)
        {
            this._hitArea.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOverHitarea, this);
            this._hitArea.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this.onOutHitarea, this);
            this._hitArea.removeEventListener(pinetree.MouseEvent.CLICK, this.onClickHitarea, this);
            this._hitArea.dispose();
            this._hitArea = null;
        }

        if(this._icon)
        {
            TweenMax.killTweensOf(this._icon);
        }

        if(this._readMoreTxt)
        {
            TweenMax.killTweensOf(this._readMoreTxt);
        }

        this._txtContainer && this._txtContainer.dispose();
        this._txtContainer = null;

        this._contactForm && this._contactForm.dispose();
        this._contactForm = null;

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ContactView]";
    }

    pinetreepages.ContactView = ContactView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ContactDeviceView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._title = "";
        this._description = "";
        this._imageurl = "";
        this._mapLink = "";
        this._imageWidth = 0;
        this._imageHeight = 0;

        this._setting = null;

        this._padding = 30

        this._textWidth = 0;

        this._bgColor = pt.bgColor;
        this._textColor = pt.textColor;

        this._dataLoader = null;

        this._container = null;
        this._imageLoader = null;
        this._txtContainer = null;

        this.mouseChildren = this.mouseEnabled = false;
    }

    var p = __extends(ContactDeviceView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
            this.registerAutoDispose(this._dataLoader);
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            var obj = data.data;
            this._title = obj.title || this._title;
            this._description = obj.description || this._description;
            this._imageurl = obj.imageurl || "";
            this._mapLink = obj.mapLink || this._mapLink;
            this._imageWidth = obj.imageWidth;
            this._imageHeight = obj.imageHeight;
            this._textWidth = obj.deviceTextWidth || obj.textWidth;
            this._setting = data.setting;
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
        this._container.addChild(this._imageLoader);
        this._imageLoader.x = this._padding;
        this._imageLoader.y = this._padding + pt.TOP_HEIGHT;
        this.registerAutoDispose(this._imageLoader);

        if(this._mapLink != "")
        {
            this._imageLoader.addEventListener(pinetree.MouseEvent.CLICK, this._onClickImg, this);
        }

        this._txtContainer = new pinetreecom.DeviceTextContainer(this._textWidth, this._bgColor, 0, true, true);
        this._container.addChild(this._txtContainer);
        this._txtContainer.paddingLeft = this._padding;
        this._txtContainer.paddingRight = this._padding;
        this._txtContainer.paddingTop = 0;
        this._txtContainer.paddingBottom = 0;
        this._txtContainer.init();
        this.registerAutoDispose(this._txtContainer);

        this._txtContainer.title = this._title;
        this._txtContainer.information = this._description;

        this._txtContainer.x = 0;
        this._txtContainer.y = this._imageHeight + this._imageLoader.y + this._padding;

        var textWidth = this._textWidth - this._padding - this._padding - 10;
        this._contactForm = new pinetreecom.ContactForm("data/php/contact.php", textWidth, this._textColor);
        this._contactForm.mouseChildren = false;
        this._container.addChild(this._contactForm);
        this._contactForm.initWith(this._setting);
        this._contactForm.x = this._padding;
        this._contactForm.y = this._txtContainer.y + this._txtContainer.contentHeight + this._padding;
        var offsetX = (textWidth - 218) >> 1;
        var offsetY = (270 - 100) >> 1;
        this._contactForm.updateMsgBoxPosition(this._contactForm.x + offsetX, this._contactForm.y + offsetY);
        this.registerAutoDispose(this._contactForm);

        this._imageLoader.load(this._imageurl);

        this.transitionIn();
    }

    p._onClickImg = function(evt)
    {
        navigateToURL(this._mapLink, "_blank");
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p._onImageLoadComplete = function (evt)
    {
        if(evt)
        {
            this._imageLoader.setRealFitSize(this._imageWidth, this._itemHeight);
        }
    }

    p._onIOError = function(evt)
    {
        this._onImageLoadComplete(null);
    }

    p.resize = function(sw, sh)
    {
        this.height = this._contactForm.y + this._contactForm.height + this._padding;

        if(this._height < sh - pt.TOP_HEIGHT - this._padding * 2)
        {
            this._container.y = (sh - pt.TOP_HEIGHT - this._padding * 2 - this._height) >> 1;
        }
        else
        {
            this._container.y = 0;
        }

        this._container.x = (sw - this._textWidth) >> 1;
    }

    p.transitionIn = function()
    {
        this.redraw();

        this.mouseChildren = this.mouseEnabled = true;

        if(!this.tweenAlphaByCSS(1, this.tweenTime, 0, "ease-out", Delegate.create(this, this.transitionInComplete)))
        {
            TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});
        }
    }

    p.transitionInComplete = function()
    {
        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
        this.redraw();
    }

    p.transitionOut = function()
    {
        this.mouseChildren = this.mouseEnabled = false;
        this._contactForm.mouseChildren = false;

        if(!this.tweenAlphaByCSS(0, this.tweenTime, 0, "ease-out", Delegate.create(this, this.transitionOutComplete)))
        {
            TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this.transitionOutComplete)});
        }
    }

    p.dispose = function()
    {
        if(this._imageLoader)
        {
            this._imageLoader.removeEventListener(pinetree.MouseEvent.CLICK, this._onClickImg, this);
        }

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ContactDeviceView]";
    }

    pinetreepages.ContactDeviceView = ContactDeviceView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function(){
    var ExternalView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);
    }

    var p = __extends(ExternalView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function()
    {

    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ExternalView]";
    }

    pinetreepages.ExternalView = ExternalView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var GalleryView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._galleryFacade = new pinetreepages.GalleryFacade();
        this._galleryFacade.ON_DISPOSE_COMPLETE.add(this, this._mvcDisposed);

        this._container = new pinetree.Sprite();
        this.addChild(this._container);
    }

    var p = __extends(GalleryView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.analyzeParams = function(linkId, linkParams)
    {
        pinetreepages.ViewBase.prototype.analyzeParams.call(this, linkId, linkParams);
        if(this._galleryFacade)
        {
            this._galleryFacade.updateLinkParams(this.linkId, this.linkParams);
        }
    }

    p.active = function()
    {
        this._galleryFacade.active();
    }

    p.inactive = function()
    {
        this._galleryFacade.inactive();
    }

    p.transitionIn = function()
    {
        this._galleryFacade.startUp({container:this._container, source:this.data.src,
            name:this.data.name, size:this.data.size});
        this._galleryFacade.updateLinkParams(this.linkId, this.linkParams);
        this.transitionInComplete();
    }

    p.transitionOut = function()
    {
        this._galleryFacade && this._galleryFacade.predispose();
    }

    p._mvcDisposed = function()
    {
        this.transitionOutComplete();
    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object GalleryView]";
    }

    pinetreepages.GalleryView = GalleryView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-19.
 */
(function()
{

    var GalleryFacade = function()
    {
        pinetreemvc.Facade.call(this);

        this.$ = {
            //notification
            NFT_START_UP:"notification_start_up",
            NFT_DATA_LOAD_CATEGORY_COMPLETE:"notification_data_load_category_complete",
            NFT_DATA_LOAD_COMPLETE:"notification_data_load_complete",
            NFT_CATEGORY_CHANGE:"notification_category_change",
            NFT_BACK_TO_CATEGORY:"notification_back_to_category",
            NFT_IMAGE_CHANGE:"notification_image_change",
            NFT_IMAGE_CHANGE_BY_TIMER:"notification_image_change_by_timer",
            NFT_IMAGE_LOAD_COMPLETE:"notification_image_load_complete",
            NFT_SLIDESHOW_START:"notification_slideshow_start",
            NFT_SLIDESHOW_PAUSE:"notification_slideshow_pause",
            NFT_SLIDESHOW_RESUME:"notification_slideshow_resume",
            NFT_SLIDESHOW_STOP:"notification_slideshow_stop",
            NFT_LINK_PARAMETERS_CHANGE:"notification_link_parameters_change",
            NFT_ACTIVE:"notification_active",
            NFT_INACTIVE:"notification_inactive",
            //data
            name:"",
            categorySetting:null,
            setting:null,
            root:null,
            //ui
            timerUI:null,
            imagesUI:null,
            thumbnailsUI:null,
            categoriesUI:null
        }
    }

    var p = __extends(GalleryFacade, pinetreemvc.Facade);

    p.startUp = function(data)
    {
        this.registerCommand(this.$.NFT_START_UP, pinetreepages.GalleryStartUpCommand);
        this.registerCommand(this.$.NFT_CATEGORY_CHANGE, pinetreepages.GalleryChangeCategoryCommand);
        this.sendNotification(this.$.NFT_START_UP, data);
    }

    p.active = function()
    {
        this.sendNotification(this.$.NFT_ACTIVE, null);
    }

    p.inactive = function()
    {
        this.sendNotification(this.$.NFT_INACTIVE, null);
    }

    p.updateLinkParams = function(linkId, linkParams)
    {
        this.sendNotification(this.$.NFT_LINK_PARAMETERS_CHANGE, {linkId:linkId, linkParams:linkParams});
    }

    pinetreepages.GalleryFacade = GalleryFacade;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-8.
 */
(function()
{
    var GalleryCategorySetting = function()
    {
        this.panelWidth = 420;
        this.thumbRadius = 400;
        this.itemHeight = 300;
        this.bgColor = 0xffffff;
        this.bgAlpha = 1.0;
        this.gap = 10;
        this.panelBgAlpha = 0.95;
        this.needTweenTextColor = true;
    }

    GalleryCategorySetting.from = function(obj)
    {
        var setting = new pinetreepages.GalleryCategorySetting();
        setting.panelWidth = obj.panelWidth;
        setting.thumbRadius = obj.thumbRadius;
        setting.itemHeight = obj.itemHeight;
        setting.bgColor = obj.bgColor == undefined ? setting.bgColor :
            pt.fromColorString(obj.bgColor);
        setting.bgAlpha = __defaultSet(obj.bgAlpha, setting.bgAlpha);
        setting.gap = obj.gap;
        setting.panelBgAlpha = __defaultSet(obj.panelBgAlpha, setting.panelBgAlpha);
        setting.needTweenTextColor = __defaultSet(obj.needTweenTextColor, setting.needTweenTextColor);
        return setting;
    }

    pinetreepages.GalleryCategorySetting = GalleryCategorySetting;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GallerySetting = function()
    {
        this.thumbWidth = 400;
        this.thumbHeight = 400;
        this.gap = 0;
        this.tweenType = 1;
        this.showTip = true;
        this.useShadow = false;
        this.tipOverAlpha = 1;
        this.tipOutAlpha = 1;
        this.tipType = 1;
        this.tipOffsetX = 0;
        this.needTweenTipBg = true;
        this.tipBgAlpha = pt.bgAlpha;
        this.tipBgColor = pt.bgColor;
        this.tipTitleColor = pt.onOverColor;
        this.tipTitleFontSize = 14;
        this.tipDescriptionColor = pt.textColor;
        this.buttonBgOverColor = pt.onOverColor;
        this.buttonBgOutColor = pt.onOutColor;
        this.buttonTextOverColor = pt.onOverColor;
        this.buttonTextOutColor = pt.onOutColor;
        this.buttonCornerSize = 0;
        this.imageBgColor = 0xcccccc;
        this.duration = 5.0;
        this.textWidth = 0;
        this.isVerticalFit = true;
        this.isBlur = false;
        this.isBlackWhite = false;
        this.isShowBlackWhiteFirst = true;
        this.needInfoButton = true;
        this.needPinterestButton = true;
        this.needHomeButton = true;
        this.needDownloadButton = true;
        this.needZoomButton = true;
        this.autoPlay = true;
        this.thumbZoomValue = 1.03;
        this.readMoreLabel = "READ MORE";
        this.isZoomIn = false;
    }

    GallerySetting.from = function(obj)
    {
        var setting = new pinetreepages.GallerySetting();
        setting.thumbWidth = obj.thumbWidth;
        setting.thumbHeight = obj.thumbHeight;
        setting.textWidth = obj.textWidth;
        setting.gap = obj.gap || 0;
        setting.tweenType = __defaultSet(obj.tweenType, setting.tweenType);
        setting.tipOverAlpha = __defaultSet(obj.tipOverAlpha, setting.tipOverAlpha);
        setting.tipOutAlpha = __defaultSet(obj.tipOutAlpha, setting.tipOutAlpha);
        setting.tipType = __defaultSet(obj.tipType, setting.tipType);
        setting.needTweenTipBg = __defaultSet(obj.needTweenTipBg, setting.needTweenTipBg);
        setting.tipBgAlpha = __defaultSet(obj.tipBgAlpha, setting.tipBgAlpha);
        setting.tipBgColor = obj.tipBgColor == undefined ? setting.tipBgColor :
            pt.fromColorString(obj.tipBgColor);
        setting.showTip = __defaultSet(obj.showTip, setting.showTip);
        setting.useShadow = __defaultSet(obj.useShadow, setting.useShadow);
        setting.tipOffsetX = __defaultSet(obj.tipOffsetX, setting.tipOffsetX);
        setting.tipTitleColor = obj.tipTitleColor == undefined ? setting.tipTitleColor :
            pt.fromColorString(obj.tipTitleColor);
        setting.tipDescriptionColor = obj.tipDescriptionColor == undefined ? setting.tipDescriptionColor :
            pt.fromColorString(obj.tipDescriptionColor);
        setting.imageBgColor = obj.imageBgColor == undefined ? setting.imageBgColor :
            pt.fromColorString(obj.imageBgColor);
        setting.tipTitleFontSize = obj.tipTitleFontSize || setting.tipTitleFontSize;
        setting.duration = __defaultSet(obj.duration, setting.duration);
        setting.isVerticalFit = __defaultSet(obj.isVerticalFit, setting.isVerticalFit);
        setting.needInfoButton = __defaultSet(obj.needInfoButton, setting.needInfoButton);
        setting.needPinterestButton = __defaultSet(obj.needPinterestButton, setting.needPinterestButton);
        setting.needHomeButton = __defaultSet(obj.needHomeButton, setting.needHomeButton);
        setting.needDownloadButton = __defaultSet(obj.needDownloadButton, setting.needDownloadButton);
        setting.needZoomButton = __defaultSet(obj.needZoomButton, setting.needZoomButton);
        setting.isZoomIn = __defaultSet(obj.isZoomIn, setting.isZoomIn);
        setting.autoPlay = __defaultSet(obj.autoPlay, setting.autoPlay);
        setting.isBlur = __defaultSet(obj.isBlur, setting.isBlur);
        setting.thumbZoomValue = __defaultSet(obj.thumbZoomValue, setting.thumbZoomValue);
        setting.readMoreLabel = __defaultSet(obj.readMoreLabel, setting.readMoreLabel);

        setting.buttonCornerSize = __defaultSet(obj.buttonCornerSize, setting.buttonCornerSize);
        setting.buttonBgOverColor = obj.buttonBgOverColor == undefined ? setting.buttonBgOverColor :
            pt.fromColorString(obj.buttonBgOverColor);
        setting.buttonBgOutColor = obj.buttonBgOutColor == undefined ? setting.buttonBgOutColor :
            pt.fromColorString(obj.buttonBgOutColor);
        setting.buttonTextOverColor = obj.buttonTextOverColor == undefined ? setting.buttonTextOverColor :
            pt.fromColorString(obj.buttonTextOverColor);
        setting.buttonTextOutColor = obj.buttonTextOutColor == undefined ? setting.buttonTextOutColor :
            pt.fromColorString(obj.buttonTextOutColor);

        var o = obj.isBlackWhite;
        if(o)
        {
            setting.isBlackWhite = __defaultSet(o.active, setting.isBlackWhite);
            setting.isShowBlackWhiteFirst = __defaultSet(o.showBlackWhiteFirst, setting.isShowBlackWhiteFirst);
        }

        return setting;
    }

    pinetreepages.GallerySetting = GallerySetting;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryCategoryVo = function()
    {
        this.index = 0;
        this.source = "";
        this.title = "";
        this.description = "";
        this.imageurl = "";
        this.thumburl = "";
        this.thumbRadius = 0;
        this.itemHeight = 0;
        this.bgColor = 0xffffff;
        this.bgAlpha = 1.0;
        this.needTweenTextColor = true;
    }

    GalleryCategoryVo.from = function(obj)
    {
        var vo = new pinetreepages.GalleryCategoryVo();
        vo.source = obj.source;
        vo.title = obj.title;
        vo.description = obj.description;
        vo.imageurl = obj.imageurl;
        vo.thumburl = obj.thumburl;
        vo.bgColor = obj.bgColor == undefined ? undefined : pt.fromColorString(obj.bgColor);
        vo.bgAlpha = obj.bgAlpha;
        return vo;
    }

    pinetreepages.GalleryCategoryVo = GalleryCategoryVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryImageVo = function()
    {
        this.index = 0;
        this.total = 0;
        this.title = "";
        this.preview = "";
        this.description = "";
        this.imageurls = [];
        this.thumburl = "";

        this.thumbWidth = 0;
        this.thumbHeight = 0;

        this.videoWidth = 640;
        this.videoHeight = 360;
        this.videourl = "";
        this.videoType = "video";

        this.tweenType = 1;

        this.menuName = "";

        this.name = "";

        this.isBlur = false;
        this.isBlackWhite = false;
        this.isShowBlackWhiteFirst = true;

        this.showTip = true;
        this.useShadow = false;
        this.tipType = 1;
        this.tipOffsetX = 0;
        this.tipBgAlpha = 1;
        this.tipBgColor = pt.bgColor;
        this.tipTitleColor = -1;
        this.tipTitleFontSize = 14;
        this.tipDescriptionColor = -1;
        this.tipOverAlpha = -1;
        this.tipOutAlpha = -1;
        this.needTweenTipBg = true;
        this.tipMaxWidth = 0;
        this.zoomValue = 1;

        this.tipIsLeft = true;
        this.tipIsTop = true;

        this.buttonText = "READ MORE";
        this.buttonBgOverColor = -1;
        this.buttonBgOutColor = -1;
        this.buttonTextOverColor = -1;
        this.buttonTextOutColor = -1;
        this.buttonCornerSize = 0;
        this.isOver = false;

        this.readMoreLabel = "";

        this.isImage = true;
    }

    GalleryImageVo.from = function(obj)
    {
        var vo = new pinetreepages.GalleryImageVo();
        vo.title = obj.title;
        vo.name = obj.name || vo.name;
        vo.preview = obj.preview || vo.preview;
        vo.description = obj.description;

        var imageurl = obj.imageurl || "";
        if(imageurl)
        {
            imageurl = imageurl.replace(/,\s*/, ",");
        }
        vo.imageurls = imageurl.split(",");

        vo.thumburl = obj.thumburl;

        vo.thumbWidth = obj.thumbWidth || 0;
        vo.thumbHeight = obj.thumbHeight || 0;

        vo.tipOverAlpha = __defaultSet(obj.tipOverAlpha, vo.tipOverAlpha);
        vo.tipOutAlpha = __defaultSet(obj.tipOutAlpha, vo.tipOutAlpha);

        vo.tipTitleColor = obj.tipTitleColor == undefined ?
            vo.tipTitleColor : pt.fromColorString(obj.tipTitleColor);
        vo.tipDescriptionColor = obj.tipDescriptionColor == undefined ?
            vo.tipDescriptionColor : pt.fromColorString(obj.tipDescriptionColor);

        vo.tipMaxWidth = __defaultSet(obj.tipMaxWidth, vo.tipMaxWidth);

        vo.isOver = __defaultSet(obj.isOver, vo.isOver);
        vo.buttonBgOverColor = obj.buttonBgOverColor == undefined ? vo.buttonBgOverColor :
            pt.fromColorString(obj.buttonBgOverColor);
        vo.buttonBgOutColor = obj.buttonBgOutColor == undefined ? vo.buttonBgOutColor :
            pt.fromColorString(obj.buttonBgOutColor);
        vo.buttonTextOverColor = obj.buttonTextOverColor == undefined ? vo.buttonTextOverColor :
            pt.fromColorString(obj.buttonTextOverColor);
        vo.buttonTextOutColor = obj.buttonTextOutColor == undefined ? vo.buttonTextOutColor :
            pt.fromColorString(obj.buttonTextOutColor);

        if(pinetree.isDevice)
        {
            vo.videoWidth = __defaultSet(obj.videoWidth, vo.videoWidth);
            vo.videoHeight = __defaultSet(obj.videoHeight, vo.videoHeight);

            var vw = pt.stageWidth;
            var vh = pt.stageHeight - pt.TOP_HEIGHT - pt.DEVICE_FOOTER_HEIGHT;
            var vscale = Math.max(vo.videoWidth / vw, vo.videoHeight / vh);
            vo.videoWidth = Math.floor(vo.videoWidth / vscale);
            vo.videoHeight = Math.floor(vo.videoHeight / vscale);
        }
        else
        {
            vo.videoWidth = __defaultSet(obj.videoWidth, vo.videoWidth);
            vo.videoHeight = __defaultSet(obj.videoHeight, vo.videoHeight);
        }
	
        vo.videourl = obj.videourl || "";
        vo.videoType = __defaultSet(obj.videoType, "video");

        var align = obj.tipAlign || "";
        vo.tipIsLeft = !(align.indexOf("right") > -1);
        vo.tipIsTop = !(align.indexOf("bottom") > -1);

        vo.isImage = vo.videourl == "";
        return vo;
    }

    pinetreepages.GalleryImageVo = GalleryImageVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryCategoryProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    GalleryCategoryProxy.NAME = "GalleryCategoryProxy";

    var p = __extends(GalleryCategoryProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.GalleryCategorySetting.from(jsonData.setting);
        this.facade.$.categorySetting = setting;

        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.GalleryCategoryVo.from(jsonData.data[i]);
            vo.index = i;
            vo.thumbRadius = setting.thumbRadius;
            vo.itemHeight = setting.itemHeight;
            vo.bgColor = __defaultSet(vo.bgColor, setting.bgColor);
            vo.bgAlpha = __defaultSet(vo.bgAlpha, setting.bgAlpha);
            vo.needTweenTextColor = setting.needTweenTextColor;
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_CATEGORY_COMPLETE, data);
    }

    pinetreepages.GalleryCategoryProxy = GalleryCategoryProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryImageProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    GalleryImageProxy.NAME = "GalleryImageProxy";

    var p = __extends(GalleryImageProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.GallerySetting.from(jsonData.setting);
        this.facade.$.setting = setting;

        var menuName = this.facade.$.name;
        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.GalleryImageVo.from(jsonData.data[i]);
            vo.index = i;
            vo.total = len;
            vo.tweenType = setting.tweenType;
            vo.isBlur = setting.isBlur;
            vo.isBlackWhite = setting.isBlackWhite;
            vo.isShowBlackWhiteFirst = setting.isShowBlackWhiteFirst;
            vo.showTip = setting.showTip;
            vo.useShadow = setting.useShadow;
            if(vo.tipOverAlpha < 0)
                vo.tipOverAlpha = setting.tipOverAlpha;
            if(vo.tipOutAlpha < 0)
                vo.tipOutAlpha = setting.tipOutAlpha;
            vo.tipType = setting.tipType;
            vo.tipOffsetX = setting.tipOffsetX;
            vo.tipBgAlpha = setting.tipBgAlpha;
            vo.tipBgColor = setting.tipBgColor;
            vo.needTweenTipBg = setting.needTweenTipBg;
            vo.tipTitleColor = vo.tipTitleColor < 0 ? setting.tipTitleColor : vo.tipTitleColor;
            vo.tipTitleFontSize = setting.tipTitleFontSize;
            vo.tipDescriptionColor = vo.tipDescriptionColor < 0 ? setting.tipDescriptionColor : vo.tipDescriptionColor;
            vo.thumbWidth = vo.thumbWidth <= 0 ? setting.thumbWidth : vo.thumbWidth;
            vo.thumbHeight = vo.thumbHeight <= 0 ? setting.thumbHeight : vo.thumbHeight;
            vo.buttonCornerSize = setting.buttonCornerSize;
            vo.buttonBgOverColor = vo.buttonBgOverColor < 0 ? setting.buttonBgOverColor : vo.buttonBgOverColor;
            vo.buttonBgOutColor = vo.buttonBgOutColor < 0 ? setting.buttonBgOutColor : vo.buttonBgOutColor;
            vo.buttonTextOverColor = vo.buttonTextOverColor < 0 ? setting.buttonTextOverColor : vo.buttonTextOverColor;
            vo.buttonTextOutColor = vo.buttonTextOutColor < 0 ? setting.buttonTextOutColor : vo.buttonTextOutColor;
            vo.zoomValue = setting.thumbZoomValue;
            vo.readMoreLabel = setting.readMoreLabel;
            vo.menuName = menuName;
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_COMPLETE, data);
    }

    pinetreepages.GalleryImageProxy = GalleryImageProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryImagesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
        viewComponent.ON_SLIDESHOW_START.add(this, this.onSlideshowStart);
        viewComponent.ON_SLIDESHOW_STOP.add(this, this.onSlideshowStop);
        viewComponent.ON_SLIDESHOW_PAUSE.add(this, this.onSlideshowPause);
        viewComponent.ON_SLIDESHOW_RESUME.add(this, this.onSlideshowResume);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_CHANGE_BY_TIMER,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    GalleryImagesMediator.NAME = "GalleryImagesMediator";

    var p = __extends(GalleryImagesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.load(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE_BY_TIMER:
                this.viewComponent.loadByTimer(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onSlideshowStart = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_START);
    }
    
    p.onSlideshowStop = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_STOP);
    }
    
    p.onSlideshowPause = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_PAUSE);
    }
    
    p.onSlideshowResume = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_RESUME);
    }
    
    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.GalleryImagesMediator = GalleryImagesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryThumbnailsMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
        viewComponent.ON_BACK_TO_CATEGORY.add(this, this.onBackToCategory);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_LINK_PARAMETERS_CHANGE,
            facade.$.NFT_ACTIVE,
            facade.$.NFT_INACTIVE
        ];
    }

    GalleryThumbnailsMediator.NAME = "GalleryThumbnailsMediator";

    var p = __extends(GalleryThumbnailsMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                //
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            case this.facade.$.NFT_ACTIVE:
                this.viewComponent.active();
                break;
            case this.facade.$.NFT_INACTIVE:
                this.viewComponent.inactive();
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    p.onBackToCategory = function()
    {
        this.sendNotification(this.facade.$.NFT_BACK_TO_CATEGORY);
    }

    pinetreepages.GalleryThumbnailsMediator = GalleryThumbnailsMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryCategoriesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_CATEGORY_COMPLETE,
            facade.$.NFT_BACK_TO_CATEGORY,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    GalleryCategoriesMediator.NAME = "GalleryCategoriesMediator";

    var p = __extends(GalleryCategoriesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_CATEGORY_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_BACK_TO_CATEGORY:
                this.viewComponent.backFromThumbnailsPage();
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        var vo = this.viewComponent.data[index];
        this.sendNotification(this.facade.$.NFT_CATEGORY_CHANGE, vo);
    }

    p.onLoadComplete = function(unused)
    {

    }

    pinetreepages.GalleryCategoriesMediator = GalleryCategoriesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryTimerMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_SLIDESHOW_START.add(this, this.onSlideshowStart);
        viewComponent.ON_SLIDESHOW_STOP.add(this, this.onSlideshowStop);
        viewComponent.ON_SLIDESHOW_PAUSE.add(this, this.onSlideshowPause);
        viewComponent.ON_SLIDESHOW_RESUME.add(this, this.onSlideshowResume);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_CHANGE_BY_TIMER,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP
        ];
    }

    GalleryTimerMediator.NAME = "GalleryTimerMediator";

    var p = __extends(GalleryTimerMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE_BY_TIMER:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE_BY_TIMER, index);
    }

    p.onSlideshowStart = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_START);
    }
    
    p.onSlideshowStop = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_STOP);
    }
    
    p.onSlideshowPause = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_PAUSE);
    }
    
    p.onSlideshowResume = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_RESUME);
    }

    pinetreepages.GalleryTimerMediator = GalleryTimerMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryStartUpCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(GalleryStartUpCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var container = data.container;
        var source = data.source;
        var name = data.name;
        var fileSize = data.size;

        this.facade.$.root = container;
        this.facade.$.name = name;

        var timerUI = new pinetreepages.GalleryTimer();
        var imagesUI = new pinetreepages.GalleryImages();
        var thumbnailsUI = new pinetreepages.GalleryThumbnails();
        var categoriesUI = new pinetreepages.GalleryCategories();

        container.addChild(timerUI);
        container.addChild(categoriesUI);
        container.addChild(thumbnailsUI);
        container.addChild(imagesUI);

        this.facade.$.timerUI = timerUI;
        this.facade.$.imagesUI = imagesUI;
        this.facade.$.thumbnailsUI = thumbnailsUI;
        this.facade.$.categoriesUI = categoriesUI;

        this.facade.registerMediator(null, pinetreepages.GalleryTimerMediator, timerUI);
        this.facade.registerMediator(null, pinetreepages.GalleryCategoriesMediator, categoriesUI);
        this.facade.registerMediator(null, pinetreepages.GalleryThumbnailsMediator, thumbnailsUI);
        this.facade.registerMediator(null, pinetreepages.GalleryImagesMediator, imagesUI);

        //this.facade.registerProxy(null, pinetreepages.GalleryCategoryProxy, source, fileSize);
        this.facade.removeProxy(pinetreepages.GalleryImageProxy.NAME);
        this.facade.registerProxy(null, pinetreepages.GalleryImageProxy, source, fileSize);
    }

    pinetreepages.GalleryStartUpCommand = GalleryStartUpCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryChangeCategoryCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(GalleryChangeCategoryCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var source = data.source;
        var fileSize = data.size;

        this.facade.removeProxy(pinetreepages.GalleryImageProxy.NAME);
        this.facade.registerProxy(null, pinetreepages.GalleryImageProxy, source, fileSize);
    }

    pinetreepages.GalleryChangeCategoryCommand = GalleryChangeCategoryCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var GalleryThumbnailTipsOne = function(data, w, h)
    {
        pinetree.Sprite.call(this);

        this._data = data;

        this.tweenTime = 1;
        this.transition = Quad.easeOut;

        this._bgColor = data.tipBgColor;
        this._bgAlpha = __defaultSet(data.tipBgAlpha, pt.bgAlpha);

        this._width = w;
        this._height = h;

        this._btnText = "";

        this._gapY = 15;

        this._btnWidth = 130;
        this._btnHeight = 32;

        this._offsetY = 15;

        this._onOverAlpha = data.tipOverAlpha;
        this._onOutAlpha = data.tipOutAlpha;

        this._offsetWidth = Math.floor(w / 3);

        this._title = this._data.title;
        this._name = this._data.name;

        this._titleTxt = null;
        this._btn = null;
        this._nameTxt = null;

        this._btnBgOverColor = 0;
        this._btnBgOutColor = 0;
        this._btnTextOverColor = 0;
        this._btnTextOutColor = 0;
        this._btnIsOver = false;

        this._needTweenTipBg = true;

        this.selectable = false;
        this.buttonMode = true;
        this.useMouseHand = true;

        this.alpha = this._onOutAlpha;

        this._tweenBgAlphaPercent = 1;
    }

    var p = __extends(GalleryThumbnailTipsOne, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._btnText = this._data.readMoreLabel;
            this._btnBgOverColor = this._data.buttonBgOverColor;
            this._btnBgOutColor = this._data.buttonBgOutColor;
            this._btnTextOverColor = this._data.buttonTextOverColor;
            this._btnTextOutColor = this._data.buttonTextOutColor;
            this._btnIsOver = this._data.isOver;
            this._needTweenTipBg = this._data.needTweenTipBg;

            this._titleTxt = new pinetree.TextField();
            this._titleTxt.useMouseHand = true;
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.x = this._offsetWidth >> 1;
            this._titleTxt.className += " gallery_thumbnail_title_type1";
            this._titleTxt.fontSize = this._data.tipTitleFontSize;
            this._titleTxt.textColor = this._data.tipTitleColor;
            this._titleTxt.width = this._width - this._offsetWidth;
            this._titleTxt.height = 10;
            this._titleTxt.htmlText = this._title;
            this._titleTxt.y = Math.floor(this._height / 2 - this._titleTxt.height - this._gapY) + this._offsetY;

            this._nameTxt = new pinetree.TextField();
            this._nameTxt.useMouseHand = true;
            this._nameTxt.selectable = false;
            this.addChild(this._nameTxt);
            this._nameTxt.x = this._offsetWidth >> 1;
            this._nameTxt.className += " gallery_thumbnail_name";
            this._nameTxt.textColor = this._data.tipTitleColor;
            this._nameTxt.width = this._width - this._offsetWidth;
            this._nameTxt.height = 10;
            this._nameTxt.htmlText = this._name;
            this._nameTxt.y = Math.floor(this._height / 2 - this._nameTxt.height - this._gapY
                - this._titleTxt.height - this._gapY + 10) + this._offsetY;

            var bSize = this._data.buttonCornerSize;

            if(this._btnIsOver)
            {
                this._btn = new pinetreecom.TextButton(this._btnWidth, this._btnHeight, 0, 0, 0, 8, 12, false, null, true, 1,
                    this._btnTextOverColor, this._btnTextOutColor, this._btnBgOverColor, this._btnBgOutColor, 1, 1, 0, pt.bgAlpha,
                    this._btnBgOverColor, this._btnBgOutColor, pt.bgAlpha, 0, bSize, bSize, bSize, bSize);
            }
            else
            {
                this._btn = new pinetreecom.TextButton(this._btnWidth, this._btnHeight, 0, 0, 0, 8, 12, false, null, true, 1,
                    this._btnTextOverColor, this._btnTextOutColor, this._btnBgOverColor, this._btnBgOutColor, 1, 1, pt.bgAlpha, 0,
                    this._btnBgOverColor, this._btnBgOutColor, 0, pt.bgAlpha, bSize, bSize, bSize, bSize);
            }

            if(this._btnText)
            {
                this.addChild(this._btn);
            }

            this._btn.x = (this._width - this._btnWidth) >> 1;
            this._btn.y = Math.floor(this._height / 2 + this._gapY) + this._offsetY;

            this.backgroundAlpha = this._bgAlpha;
            this.backgroundColor = this._bgColor;


        }

        pinetree.Sprite.prototype.addedToStage.call(this);

        this.setSize(this._width, this._height);

        this._btn.text = this._btnText;
    }

    p.over = function()
    {
        if(this._needTweenTipBg)
        {
            TweenMax.to(this, this.tweenTime / 3, {_tweenBgAlphaPercent:0, ease:Quad.easeOut,
                onUpdate:this._onTweenBgAlphaUpdate, onUpdateParams:[this]});
        }

        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOverAlpha, ease:Quad.easeOut});
    }

    p.out = function()
    {
        if(this._needTweenTipBg)
        {
            TweenMax.to(this, this.tweenTime / 3, {_tweenBgAlphaPercent:1, ease:Quad.easeOut,
                onUpdate:this._onTweenBgAlphaUpdate, onUpdateParams:[this]});
        }

        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOutAlpha, ease:Quad.easeOut});
    }

    p._onTweenBgAlphaUpdate = function(owner)
    {
        owner.backgroundAlpha = owner._tweenBgAlphaPercent * owner._bgAlpha;
    }

    p.setSize = function(w, h)
    {
        this._width = w;
        this._height = h;

        this._offsetWidth = Math.floor(w / 3);

        if(this.stage)
        {
            this.width = this._width;
            this.height = this._height;

            this._titleTxt.width = this._width - this._offsetWidth;
            this._titleTxt.height = 10;
            this._titleTxt.htmlText = this._title;
            this._titleTxt.y = Math.floor(this._height / 2 - this._titleTxt.height - this._gapY) + this._offsetY;

            this._nameTxt.width = this._width - this._offsetWidth;
            this._nameTxt.height = 10;
            this._nameTxt.htmlText = this._name;
            this._nameTxt.y = Math.floor(this._height / 2 - this._nameTxt.height - this._gapY
                - this._titleTxt.height - this._gapY + 10) + this._offsetY;

            this._btn.x = (this._width - this._btnWidth) >> 1;
            this._btn.y = Math.floor(this._height / 2 + this._gapY) + this._offsetY;
        }
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        this._btn && this._btn.dispose();
        this._btn = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.GalleryThumbnailTipsOne = GalleryThumbnailTipsOne;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var GalleryThumbnailTipsTwo = function(data, w, h, useShadow)
    {
        pinetree.Sprite.call(this);

        this.tweenTime = 1;
        this.transition = Quad.easeOut;

        this._bgColor = data.tipBgColor;
        this._bgAlpha = __defaultSet(data.tipBgAlpha, pt.bgAlpha);
        this._bg = null;

        this._useShadow = useShadow;

        this._thumbWidth = w;
        this._thumbHeight = h;

        this._tipWidth = 0;
        this._tipHeight = 0;
        this._tipMaxWidth = data.tipMaxWidth;

        this.className = "shadow_20px";

        this._onOverAlpha = data.tipOverAlpha;
        this._onOutAlpha = data.tipOutAlpha;

        this._yPercent = 0.2;

        this._padding = 15;
        this._shadowBlur = 10;

        this._title = data.title;

        this._titleTxt = new pinetree.TextField();
        this._titleTxt.y = this._padding;
        this._titleTxt.useMouseHand = true;
        this._titleTxt.selectable = false;
        this.addChild(this._titleTxt);
        this._titleTxt.x = this._padding;
        this._titleTxt.className += " gallery_thumbnail_title_type2";
        this._titleTxt.fontSize = data.tipTitleFontSize;
        this._titleTxt.textColor = data.tipTitleColor;

        this.selectable = false;
        this.buttonMode = true;
        this.useMouseHand = true;

        if(this._useShadow)
        {
            this._bg = new pinetree.CanvasQuad(0, 0, 0, 0);
            this._bg.setShadow(0x121212, 1, this._shadowBlur, 0, 0);
            this._bg.color = this._bgColor;
            this._bg.alpha = this._bgAlpha;
            this.addChildAt(this._bg, 0);
        }
        else
        {
            this.backgroundColor = this._bgColor;
            this.backgroundAlpha = this._bgAlpha;
        }

        this.tweenPercent = 0;

        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);
        this.clip = this._clipRect;

        this.alpha = this._onOutAlpha;
    }

    var p = __extends(GalleryThumbnailTipsTwo, pinetree.Sprite);

    p.addedToStage = function()
    {
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.over = function()
    {
        this.visible = true;

        this._tipWidth = this._thumbWidth * 0.7;
        if(this._tipMaxWidth > 0 && this._tipWidth > this._tipMaxWidth)
        {
            this._tipWidth = this._tipMaxWidth;
        }

        if(this.parent && this.visible)
        {
            this._titleTxt.width = this._tipWidth - this._padding - this._padding;
            this._titleTxt.height = 1;
            this._titleTxt.htmlText = this._title;

            this._tipHeight = this._titleTxt.height + this._padding + this._padding;
            if(this._useShadow)
            {
                this._tipHeight += this._shadowBlur;
            }

            var bgWidth = this._useShadow ? this._tipWidth - this._shadowBlur : this._tipWidth;
            var bgHeight = this._useShadow ? this._tipHeight - this._shadowBlur : this._tipHeight;

            if(this._bg)
            {
                this._bg.width = bgWidth;
                this._bg.height = bgHeight;
            }

            this.width = bgWidth;
            this.height = bgHeight;

            var y = Math.floor(this._thumbHeight * this._yPercent);
            if(y + bgHeight > this._thumbHeight)
            {
                y = this._thumbHeight - bgHeight;
            }
            this.y = y;
        }

        this.tweenPercent = 0;
        TweenMax.to(this, this.tweenTime / 3, {tweenPercent:1, ease:Quad.easeOut,
            onUpdate:this._onTweenUpdate, onUpdateParams:[this],
            onComplete:this._onTweenComplete, onCompleteParams:[this]});

        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOverAlpha, ease:Quad.easeOut});
    }

    p.out = function()
    {
        TweenMax.to(this, this.tweenTime / 3, {tweenPercent:0, ease:Quad.easeOut,
            onUpdate:this._onTweenUpdate, onUpdateParams:[this],
            onComplete:this._onTweenComplete, onCompleteParams:[this]});

        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOutAlpha, ease:Quad.easeOut});
    }

    p._onTweenUpdate = function(owner)
    {
        var w = owner._tipWidth * owner.tweenPercent;
        owner._clipRect.width = w;
        owner._clipRect.height = owner._tipHeight;
        owner.clip = owner._clipRect;
    }

    p._onTweenComplete = function(owner)
    {

    }

    p.setSize = function(w, h)
    {
        this._thumbWidth = w;
        this._thumbHeight = h;
    }

    p.dispose = function()
    {
        this._bg && this._bg.dispose();
        this._bg = null;

        TweenMax.killTweensOf(this);
        TweenMax.killTweensOf(this._titleTxt);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.GalleryThumbnailTipsTwo = GalleryThumbnailTipsTwo;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var GalleryThumbnailTipsThree = function(data, w, h)
    {
        pinetree.Sprite.call(this);

        this.data = data;

        this.tweenTime = 1;
        this.transition = Quad.easeOut;

        this._bg = null;
        this._icon = null;
        this._previewTxt = null;

        this._bgColor = data.tipBgColor;
        this._bgAlpha = data.tipBgAlpha;

        this._width = w;
        this._height = h;

        this._padding = 30;

        this._offsetWidth = Math.floor(w / 5);
        if(this._offsetWidth < this._padding * 3)
            this._offsetWidth = this._padding * 3;

        this._readMoreLabel = data.readMoreLabel;

        this._onOverAlpha = data.tipOverAlpha;
        this._onOutAlpha = data.tipOutAlpha;

        this.selectable = false;
        this.buttonMode = true;
        this.useMouseHand = true;

        this.width = this._width;
        this.height = this._height;

        this.alpha = this._onOutAlpha;
    }

    var p = __extends(GalleryThumbnailTipsThree, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._bg = new pinetree.Quad();
            this._bg.alpha = this._bgAlpha;
            this._bg.color = this._bgColor;
            this.addChildAt(this._bg, 0);

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.className += " read_more_text";
            this._previewTxt.useMouseHand = true;
            this._previewTxt.selectable = false;
            this.addChild(this._previewTxt);
            this._previewTxt.alpha = 0;
            this._previewTxt.fontSize = 14;
            this._previewTxt.textColor = pt.bgColor;
            this._previewTxt.htmlText = this._readMoreLabel;

            var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
            this._icon = new pinetree.TextureImage(tex);
            this._icon.alpha = 0;
            this._icon.buttonMode = true;
            this.addChild(this._icon);
            pinetreecom.ColorUtil.setColor(this._icon, pt.bgColor);
            this._icon.x = (this._width - this._icon.width) >> 1;
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._width - this._previewTxt.width) >> 1;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);

        this.setSize(this._width, this._height);
    }

    p.over = function()
    {
        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOverAlpha, ease:Quad.easeOut});

        TweenMax.to(this._bg, this.tweenTime / 3, {x:this._padding, y:this._padding,
            width:this._width - this._padding * 2, height:this._height - this._padding * 2, ease:Quad.easeOut});

        var y = this._height >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        if(this._icon)
        {
            this._icon.x = (this._width - this._icon.width) >> 1;
            this._icon.y = y - this._icon.height - gap - 20 + iconOffsetY;
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, y:y - this._icon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._width - this._previewTxt.width) >> 1;
            this._previewTxt.y = y + gap + 20;
            TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});
        }
    }

    p.out = function()
    {
        TweenMax.to(this, this.tweenTime / 3, {alpha:this._onOutAlpha, ease:Quad.easeOut});

        TweenMax.to(this._bg, this.tweenTime / 3, {x:0, y:0, width:this._width, height:this._height, ease:Quad.easeOut});

        var y = this._height >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, y:y - this._icon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});
    }

    p.setSize = function(w, h)
    {
        this._width = w;
        this._height = h;

        this._offsetWidth = Math.floor(w / 5);
        if(this._offsetWidth < this._padding * 3)
            this._offsetWidth = this._padding * 3;

        this._bg.width = w;
        this._bg.height = h;

        this.width = this._width;
        this.height = this._height;
    }

    p.dispose = function()
    {
        if(this._icon)
        {
            TweenMax.killTweensOf(this._icon);
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        if(this._previewTxt)
        {
            TweenMax.killTweensOf(this._previewTxt);
            this._previewTxt = null;
        }

        if(this._bg)
        {
            this._bg.dispose();
            this._bg = null;
        }

        TweenMax.killTweensOf(this);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.GalleryThumbnailTipsThree = GalleryThumbnailTipsThree;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-12.
 */
(function()
{
    var GalleryThumbnailRender = function()
    {
        pinetreecom.ListItemBase.call(this);

        this._isShowing = false;

        this._icon = null;

        this._bgAlpha = 0.9;

        this._itemWidth = 0;
        this._itemHeight = 0;
        this._currentItemWidth = 0;

        this._isBlur = false;
        this._isBlackWhite = false;
        this._isShowBlackWhiteFirst = true;
        this._showTip = true;
        this._useShadow = false;
        this._zoomValue = 1;
        this._tweenType = 1;

        this.selectable = false;
        this.useMouseHand = true;

        this.mouseChildren = false;
        this.mouseEnabled = false;

        __defineGetterSetter(this, ["isShowing"]);
    }

    var p = __extends(GalleryThumbnailRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, data.thumbWidth, data.thumbHeight, data);

        this._isBlur = data.isBlur;
        this._isBlackWhite = data.isBlackWhite;
        this._isShowBlackWhiteFirst = data.isShowBlackWhiteFirst;
        this._showTip = data.showTip;
        this._useShadow = data.useShadow;
        this._zoomValue = data.zoomValue;
        this._tweenType = data.tweenType;

        if(this._showTip && data.tipOverAlpha == 0 && data.tipOutAlpha == 0)
        {
            this._showTip = false;
        }

        /*if(pinetree.isDevice)
        {
            this._showTip = false;
        }*/

        if(this._isBlur)
        {
            this._thumbnail = new pinetreecom.BlurThumbnail(this._itemWidth, this._itemHeight,
                pt.bgColor, pt.bgColor, true, null, true, null, false);
        }
        else if(this._isBlackWhite)
        {
            this._thumbnail = new pinetreecom.BlackWhiteThumbnail(this._itemWidth, this._itemHeight,
                pt.bgColor, pt.bgColor, true, null, true, null, false, this._isShowBlackWhiteFirst);
        }
        else
        {
            this._thumbnail = new pinetreecom.Thumbnail(this._itemWidth, this._itemHeight, pt.bgColor, pt.bgColor, true, null);
        }
        this._thumbnail.backgroundAlpha = this._bgAlpha;
        this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
        this._thumbnail.ON_TWEEN_COMPLETE.add(this, this._onImgTweenComplete);
        this.addChild(this._thumbnail);
        this._thumbnail.buttonMode = true;

        if(!data.isImage)
        {
            this._icon = new pinetree.TextureImage();
            this.addChild(this._icon);
            this._icon.alpha = 1;
            this._icon.texture = pt.getCommonTexture(pinetreepages.EnumTextures.VIDEO_ICON);
            this._icon.x = (this._itemWidth - this._icon.width) >> 1;
            this._icon.y = (this._itemHeight - this._icon.height) >> 1;
            pinetreecom.ColorUtil.setColor(this._icon, pt.videoIconColor);
        }

        this._currentItemWidth = this._itemWidth;

        if(!pinetree.isDevice)
        {
            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        this.buttonMode = true;

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        if(this._tweenType == 1)
        {
            this.alpha = 0;
        }
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            if(this._showTip)
            {
                switch(this.data.tipType)
                {
                    case 1:
                        this._tips = new pinetreepages.GalleryThumbnailTipsOne(this.data, this._itemWidth, this._itemHeight);
                        break;
                    case 2:
                        this._tips = new pinetreepages.GalleryThumbnailTipsTwo(this.data, this._itemWidth, this._itemHeight,
                            this._useShadow);
                        this._tips.x = this.data.tipOffsetX;
                        break;
                    case 3:
                        this._tips = new pinetreepages.GalleryThumbnailTipsThree(this.data, this._itemWidth, this._itemHeight);
                        break;
                    case 4:
                        this._tips = new pinetreepages.GalleryThumbnailTipsOne(this.data, this._itemWidth, this._itemHeight);
                        break;
                }

                if(this._tips)
                {
                    this.addChild(this._tips);
                }
            }
        }
        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.removedFromStage = function()
    {
        if(!this._isShowing) return;

        if(this._thumbnail)
        {
            this._thumbnail.onOut(this.tweenTime / 2, Quart.easeOut);
        }
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
    }

    p._onImgLoadComplete = function(img)
    {
        this._thumbnail.setRealFitSize(this._thumbnail.imageWidth, this._thumbnail.imageHeight);
        this.mouseEnabled = true;
    }

    p._onImgTweenComplete = function(img)
    {
        this._thumbnail.backgroundAlpha = 0;
    }

    p._onOver = function(evt)
    {
        //if(pinetree.isDevice) return;
        if(this._isShowing || pt.isShowingChild) return;
        if(evt && evt.elementTarget != this.htmlElement) return;
        if(pt.stage.mouseY > pt.stageHeight - pt.currentBottomHeight + 3) return;

        if(this._isBlur)
        {
            this._thumbnail.blur(0.3);
        }
        else if(this._isBlackWhite)
        {
            if(this._isShowBlackWhiteFirst)
            {
                this._thumbnail.toColorful(0.3);
            }
            else
            {
                this._thumbnail.toBlackWhite(0.3);
            }
        }

        if(!pinetree.isIE && !this._isBlur)
        {
            this._thumbnail.onOver(this.tweenTime * 3, Quart.easeOut, this._zoomValue);
        }

        if(this._showTip)
        {
            if(this._tips)
            {
                this._tips.over();
            }
        }

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, ease:Quad.easeOut});

        this._isShowing = true;
        this._isOverState = true;
    }

    p._onOut = function(evt)
    {
        if(!this._isShowing) return;
        if(evt && evt.elementTarget != this.htmlElement) return;

        if(this._isBlur)
        {
            this._thumbnail.unBlur(0.3);
        }
        else if(this._isBlackWhite)
        {
            if(this._isShowBlackWhiteFirst)
            {
                this._thumbnail.toBlackWhite(0.3);
            }
            else
            {
                this._thumbnail.toColorful(0.3);
            }
        }

        if(!pinetree.isIE && !this._isBlur)
        {
            this._thumbnail.onOut(this.tweenTime * 0.5, Quart.easeOut);
        }

        if(this._showTip)
        {
            if(this._tips)
            {
                this._tips.out();
            }
        }

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, ease:Quad.easeOut});

        this._isShowing = false;
        this._isOverState = false;
    }

    p.updateOverState = function(isOverState)
    {
        if(isOverState)
        {
            this._onOver(null);
        }
        else
        {
            this._onOut(null);
        }

        this._isOverState = isOverState;
    }

    p._onTipsOutComplete = function(tips, y)
    {
        tips.visible = false;
        tips.y = y;
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.resize = function(w, h)
    {

    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getOriginWidth = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.originWidth;
        }
        return 0;
    }

    p.getOriginHeight = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.originHeight;
        }
        return 0;
    }

    p.getCurrentWidth = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.imageWidth;
        }
        return 0;
    }

    p.getCurrentHeight = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.imageHeight;
        }
        return 0;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isShown)
        {
            var isShowing = !!this.parent;
            this.addToParent();
            if(!isShowing)
            {
                this.resetSize(this._itemWidth, this._itemHeight, true);
            }
        }
        else
        {
            this.removeFromParent();
        }
    }

    p.resetSize = function(itemWidth, itemHeight, isForceResize)
    {
        if((this._itemWidth == itemWidth && this._itemHeight == itemHeight) && !isForceResize) return;

        this._itemWidth = itemWidth;
        this._itemHeight = itemHeight;

        this._thumbnail.setRealFitSize(itemWidth, itemHeight);
        this.width = itemWidth;
        this.height = itemHeight;

        this._currentItemWidth = itemWidth;

        if(this._tips)
        {
            this._tips.setSize(itemWidth, itemHeight);
        }

        if(this._icon)
        {
            this._icon.x = (itemWidth - this._icon.width) >> 1;
            this._icon.y = (itemHeight - this._icon.height) >> 1;
        }
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.getNewPos = function (centerX, centerY, distance, itemStageX, itemStageY,
        itemX, itemY, itemWidth, itemHeight)
    {
        var angle = this.getShootAngle(centerX, centerY, itemX + itemWidth / 2, itemY + itemHeight / 2);
        var newX, newY;
        if(itemStageX + itemWidth / 2 < centerX)
        {
            newX = -1 * distance * Math.cos(angle) + itemX - itemWidth;

            if(itemStageY + itemHeight / 2 < centerY)
                newY = -1 * distance * Math.sin(angle) + itemY - itemHeight;
            else
                newY = -1 * distance * Math.sin(angle) + itemY + itemHeight;
        }
        else
        {
            newX = distance * Math.cos(angle) + itemX + itemWidth;

            if(itemStageY + itemHeight / 2 < centerY)
                newY = distance * Math.sin(angle) + itemY - itemHeight;
            else
                newY = distance * Math.sin(angle) + itemY + itemHeight;
        }

        return {x:newX, y:newY};
    }

    p.getShootAngle = function(x0, y0, x1, y1)
    {
        return Math.atan((y1 - y0) / (x1 - x0));
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this.alpha = 1;
            callback && callback();
            return;
        }

        TweenMax.killTweensOf(this);

        if(this._tweenType == 1)
        {
            if(!pt.isHorizontalScroll)
            {
                delay = time * (0.8 * Math.random());
            }

            this.alpha = 0;
            if(!this.tweenAlphaByCSS(1, time, delay, "linear", callback))
            {
                TweenMax.to(this, time, {
                    alpha: 1, delay: delay,
                    ease: transition || this.transition, onComplete: callback
                });
            }

            this.addToParent();
        }
        else
        {
            this.addToParent();

            delay = 0;
            var sw = pt.stageWidth;
            var sh = pt.stageHeight;
            var distance = Math.sqrt(sw * sw + sh * sh) / 2;
            var newPos = this.getNewPos(sw / 2, sh / 2, distance, this.stageX, this.stageY,
                this.originX, this.originY, this._itemWidth, this._itemHeight);
            this.x = newPos.x;
            this.y = newPos.y;
            TweenMax.to(this, 1.5, {
                x:this.originX, y:this.originY, delay: delay,
                ease: Cubic.easeOut, onComplete: callback
            });
        }
    };

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this._onOutComplete(callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        if(this._tweenType == 1)
        {
            if(!pt.isHorizontalScroll)
            {
                delay = time * (0.8 * Math.random());
            }

            if(!this.tweenAlphaByCSS(0, time, delay, "linear", Delegate.create(this, this._onOutComplete, callback)))
            {
                TweenMax.to(this, time, {
                    alpha: 0, delay: delay,
                    ease: transition || this.transition, onComplete: Delegate.create(this, this._onOutComplete, callback)
                });
            }
        }
        else
        {
            delay = 0;
            var sw = pt.stageWidth;
            var sh = pt.stageHeight;
            var distance = Math.sqrt(sw * sw + sh * sh) / 2;
            var newPos = this.getNewPos(sw / 2, sh / 2, distance, this.stageX, this.stageY,
                this.originX, this.originY, this._itemWidth, this._itemHeight);
            TweenMax.to(this, 1.5, {
                x:newPos.x, y:newPos.y, delay: delay,
                ease: Cubic.easeOut, onComplete: Delegate.create(this, this._onOutComplete),
                onCompleteParams: [callback]
            });
        }
    };

    p._onOutComplete = function(callback)
    {
        this.removeFromParent();
        callback && callback();
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        if(this._thumbnail)
        {
            pinetreecom.DelayCaller.removeByOwner(this._thumbnail);

            this._thumbnail.removeFromParent(true);
            this._thumbnail = null;
        }

        this._originParent = null;
        this._data = null;

        this._icon && this._icon.dispose();
        this._icon = null;

        if(this._tips)
        {
            this._tips.removeFromParent(true);
            this._tips = null;
        }

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryThumbnailRender = GalleryThumbnailRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-22.
 */
(function()
{
    var GalleryInfoContainer = function(data, textWidth, bgHeight, bottomHeight,
                                        bgColor, bgAlpha, autoPlay, isZoomIn, needInfoButton, needPinButton, timerUI,
                                        needHomeBtn, needDownloadBtn, needZoomBtn)
    {
        pinetree.Sprite.call(this);

        this._data = data;

        this._currentIndex = 0;
        this._dataCount = this._data.length;

        this._bgHeight = bgHeight;
        this._bgColor = bgColor;
        this._bgAlpha = bgAlpha;

        this._textWidth = textWidth;

        this._needInfoBtn = needInfoButton;
        this._needPinBtn = needPinButton;
        this._needHomeBtn = !!needHomeBtn;
        this._needDownloadBtn = !!needDownloadBtn;
        this._needZoomBtn = !!needZoomBtn;

        this._container = null;

        this._pinBtnEnabled = true;
        this._allEnabled = true;
        this._zoomInBtnEnabled = true;
        this._zoomOutBtnEnabled = true;

        this._pnBtns = null;
        this._playBtn = null;
        this._stopBtn = null;
        this._infoBtn = null;
        this._pinBtn = null;
        this._closeBtn = null;
        this._numTxt = null;
        this._titleTxt = null;
        this._txtContainer = null;
        this._zoomInBtn = null;
        this._zoomOutBtn = null;
        this._homeBtn = null;
        this._downloadBtn = null;

        this._useKeyControl = true;

        this._isVisible = false;
        this._isShowing = false;

        this._num = "";
        this._title = "";
        this._info = "";

        this._timerUI = timerUI;

        this._paddingX = 20;
        this._paddingY = 8;

        this._textHeight = this._bgHeight - this._paddingY - this._paddingY;

        this._bottomHeight = bottomHeight;

        this._autoPlay = autoPlay;
        this._isZoomIn = isZoomIn;

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_PLAY = new pinetree.Signal();
        this.ON_STOP = new pinetree.Signal();
        this.ON_INFO = new pinetree.Signal();
        this.ON_PINTREST = new pinetree.Signal();
        this.ON_CLOSE = new pinetree.Signal();
        this.ON_ZOOM = new pinetree.Signal();
        this.ON_DOWNLOAD = new pinetree.Signal();

        this.tweenTime = 1.0;
        this.transition = Quint.easeInOut;

        __defineGetterSetter(this, ["information", "bg", "isShowing", "bgHeight", "zoomEnabled", "pinEnabled",
            "buttonEnabled"]);
    }

    var p = __extends(GalleryInfoContainer, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._init();

            if(this._useKeyControl)
            {
                pinetreecom.KeyboardUtil.listen(this, [pinetree.Keyboards.ESCAPE], this._onKeyUp);
            }
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p._init = function()
    {
        this._container = new pinetree.Sprite();
        this._container.y = this._bottomHeight;
        this.addChild(this._container);

        this._container.width = pt.stageWidth;
        this._container.height = this._bgHeight + this._bottomHeight;

        this._container.backgroundAlpha = this._bgAlpha;
        this._container.backgroundColor = this._bgColor;

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON_H);
        var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
        prevBtn.setTextures(tex, null);

        tex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON_H);
        var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
        nextBtn.setTextures(tex, null);

        this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false);
        this._pnBtns.useKeyArrow = this._useKeyControl;
        this._pnBtns.onOverColor = pt.onOverColor;
        this._pnBtns.onOutColor = pt.onOutColor;
        this._container.addChild(this._pnBtns);
        this._pnBtns.useMouseWheel = true;
        this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);
        this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
        this._pnBtns.y = (this._bottomHeight - tex.sourceHeight) >> 1;

        tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_PLAY_ICON);
        this._playBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
        this._playBtn.setTextures(tex, null);
        this._playBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onPlay, this);
        this._playBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;

        tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_PAUSE_ICON);
        this._stopBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
        this._stopBtn.setTextures(tex, null);
        this._stopBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onStop, this);
        this._stopBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;

        this._timerUI.y = (this._bottomHeight - this._timerUI.height - 2) >> 1;

        if(this._needZoomBtn)
        {
            tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_ZOOM_IN_ICON);
            this._zoomInBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
            this._zoomInBtn.setTextures(tex, null);
            this._zoomInBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onZoom, this);
            this._zoomInBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;

            tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_ZOOM_OUT_ICON);
            this._zoomOutBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
            this._zoomOutBtn.setTextures(tex, null);
            this._zoomOutBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onZoom, this);
            this._zoomOutBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;

            if(this._isZoomIn)
            {
                this._zoomInBtn.hide(0);
                this._zoomOutBtn.show(0);
            }
            else
            {
                this._zoomInBtn.show(0);
                this._zoomOutBtn.hide(0);
            }
        }

        if(this._autoPlay)
        {
            this._playBtn.hide(0);
            this._stopBtn.show(0);
        }
        else
        {
            this._playBtn.show(0);
            this._stopBtn.hide(0);
        }

        if(this._needInfoBtn)
        {
            tex = pt.getCommonTexture(pinetreepages.EnumTextures.INFO_ICON);
            this._infoBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);

            this._infoBtn.setTextures(tex, null);
            this._infoBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onInfo, this);
            this._infoBtn.show();
            this._infoBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;
        }

        if(this._needPinBtn)
        {
            tex = pt.getCommonTexture(pinetreepages.EnumTextures.PINTEREST_ICON);
            this._pinBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);

            this._pinBtn.setTextures(tex, null);
            this._pinBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onPin, this);
            this._pinBtn.show();
            this._pinBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;
        }

        if(this._needHomeBtn)
        {
            tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_HOME_ICON);
            this._homeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
            this._homeBtn.setTextures(tex, null);
            this._homeBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onHome, this);
            this._homeBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;
            this._homeBtn.show();
        }

        if(this._needDownloadBtn)
        {
            tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_DOWNLOAD_ICON);
            this._downloadBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
            this._downloadBtn.setTextures(tex, null);
            this._downloadBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onDownload, this);
            this._downloadBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;
            this._downloadBtn.show();
        }

        tex = pt.getCommonTexture(pinetreepages.EnumTextures.CLOSE_ICON);
        this._closeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, 0, 0, 1, 0.8, 0, 0);
        this._closeBtn.setTextures(tex, null);
        this._closeBtn.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onClose, this);
        this._closeBtn.show();
        this._closeBtn.y = (this._bottomHeight - tex.sourceHeight) >> 1;

        this._numTxt = new pinetree.TextField();
        this._numTxt.fontSize = 12;
        this._numTxt.x = this._paddingX;
        this._numTxt.textColor = pt.onOverColor;
        this._container.addChild(this._numTxt);

        if(!pinetree.isDevice)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " gallery_info_title";
            this._titleTxt.x = this._paddingX + this._numTxt.width;
            this._container.addChild(this._titleTxt);

            this._txtContainer = new pinetreecom.TextContainer(pt.stageWidth, this._textHeight,
                pt.bgColor, 0, true, true, false);
            this._container.addChild(this._txtContainer);
            this._txtContainer.sliderOverColor = pt.onOverColor;
            this._txtContainer.sliderOutColor = pt.onOverColor;
            this._txtContainer.sliderBGAlpha = 0;
            this._txtContainer.paddingLeft = 0;
            this._txtContainer.paddingRight = this._paddingX;
            this._txtContainer.paddingTop = this._paddingY;
            this._txtContainer.paddingBottom = 0;
            this._txtContainer.init();

            this._txtContainer.x = this._paddingX;
            this._txtContainer.y = this._bottomHeight;
        }

        this._container.addChild(this._timerUI);
        this._container.addChild(this._playBtn);
        this._container.addChild(this._stopBtn);

        if(this._needZoomBtn)
        {
            this._container.addChild(this._zoomInBtn);
            this._container.addChild(this._zoomOutBtn);
        }

        if(this._needHomeBtn)
        {
            this._container.addChild(this._homeBtn);
        }

        if(this._needDownloadBtn)
        {
            this._container.addChild(this._downloadBtn);
        }

        if(this._needInfoBtn)
        {
            this._container.addChild(this._infoBtn);
        }

        if(this._needPinBtn)
        {
            this._container.addChild(this._pinBtn);
        }

        this._container.addChild(this._closeBtn);
    }

    p._onHome = function(evt)
    {
        var firstNavVo = pinetreepages.configUtil.siteMenuData[0];
        if(firstNavVo)
        {
            pinetreecom.LinkManager.to(firstNavVo.id);
        }
    }

    p._onDownload = function(evt)
    {
        this.ON_DOWNLOAD.dispatch();
    }

    p._onZoom = function(evt)
    {
        if(!pinetree.isDevice)
        {
            var target = evt.customTarget;
            if(target == this._zoomInBtn)
            {
                this._isZoomIn = true;
                this._zoomInBtn.hide(0);
                this._zoomOutBtn.show(0);

                this.ON_ZOOM.dispatch("in");
            }
            else
            {
                this._isZoomIn = false;
                this._zoomInBtn.show(0);
                this._zoomOutBtn.hide(0);

                this.ON_ZOOM.dispatch("out");
            }
        }
        else
        {
            this.ON_ZOOM.dispatch("in");
        }
    }

    p._onClickPNButton = function(e)
    {
        if(!this._isVisible) return;

        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            if(this._currentIndex > 0)
            {
                this._currentIndex --;
            }
        }
        else
        {
            if(this._currentIndex < this._dataCount - 1)
            {
                this._currentIndex ++;
            }
        }

        this.ON_CHANGE.dispatch(e);

        this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
    }

    p.updatePNButtons = function(currentIndex)
    {
        this._currentIndex = currentIndex;
        this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
    }

    p.updateTexts = function(num, title, info)
    {
        this._num = num;
        this._title = title;
        this._info = info;

        if(this._numTxt.alpha == 1)
        {
            TweenMax.to(this._numTxt, this.tweenTime * 0.5, {alpha:0, ease:Quad.easeOut,
                onComplete:this._onUpdateNum, onCompleteParams:[this, num]});
        }
        else
        {
            this._numTxt.htmlText = num;
            this._numTxt.y = (this._bottomHeight - this._numTxt.height) >> 1;
        }

        if(this._titleTxt)
        {
            this._titleTxt.x = this._paddingX + this._numTxt.x + this._numTxt.width;
            this._titleTxt.width = this._pnBtns.x - this._titleTxt.x - 10;
            this._titleTxt.height = 1;

            if(this._titleTxt.alpha == 1)
            {
                TweenMax.to(this._titleTxt, this.tweenTime * 0.5, {alpha:0, ease:Quad.easeOut,
                    onComplete:this._onUpdateTitle, onCompleteParams:[this, title]});
            }
            else
            {
                this._titleTxt.htmlText = title;
                this._titleTxt.y = (this._bottomHeight - this._titleTxt.height) >> 1;
            }
        }

        if(pinetree.isDevice)
        {

        }
        else
        {
            if(this._txtContainer.alpha == 1)
            {
                this._txtContainer.hide(this.tweenTime * 0.5, 0, null,
                    Delegate.create(this, this._onUpdateTextContainer, info));
            }
            else
            {
                this._txtContainer.reset();
                this._txtContainer.information = info;
                this._txtContainer.scrollerHeight = this._textHeight;
                var tw = pt.stageWidth;
                if(tw > this._textWidth)
                {
                    tw = this._textWidth;
                }
                this._txtContainer.contentWidth = tw - this._paddingX - this._paddingX;
                this._txtContainer.scrollGapX = 0;
            }
        }
    }

    p._onUpdateNum = function(owner, num)
    {
        owner._numTxt.htmlText = num;
        owner._numTxt.y = (owner._bottomHeight - owner._numTxt.height) >> 1;
        TweenMax.to(owner._numTxt, owner.tweenTime, {alpha:1, ease:Quad.easeOut});

        if(owner._titleTxt)
        {
            owner._titleTxt.x = owner._paddingX + owner._numTxt.x + owner._numTxt.width;
            owner._titleTxt.width = owner._pnBtns.x - owner._titleTxt.x - 10;
        }
    }

    p._onUpdateTitle = function(owner, title)
    {
        owner._titleTxt.width = owner._pnBtns.x - owner._titleTxt.x - 10;
        owner._titleTxt.htmlText = title;
        owner._titleTxt.y = (owner._bottomHeight - owner._titleTxt.height) >> 1;
        TweenMax.to(owner._titleTxt, owner.tweenTime, {alpha:1, ease:Quad.easeOut});
    }

    p._onUpdateTextContainer = function(info)
    {
        this._txtContainer.reset();
        this._txtContainer.show();
        this._txtContainer.information = info;
        this._txtContainer.scrollerHeight = this._textHeight;
        var tw = pt.stageWidth;
        if(tw > this._textWidth)
        {
            tw = this._textWidth;
        }
        this._txtContainer.contentWidth = tw - this._paddingX - this._paddingX;
        this._txtContainer.scrollGapX = 0;

    }

    p._onPlay = function(evt)
    {
        this.ON_PLAY.dispatch();

        this._playBtn.hide(0);
        this._stopBtn.show(0);
    }

    p._onStop = function(evt)
    {
        this.ON_STOP.dispatch();

        this._playBtn.show(0);
        this._stopBtn.hide(0);
    }

    p._onInfo = function(evt)
    {
        this.ON_INFO.dispatch();
    }

    p._onPin = function(evt)
    {
        this.ON_PINTREST.dispatch();
    }

    p._onClose = function(evt)
    {
        if(!this._isVisible) return;
        this.ON_CLOSE.dispatch();
    }

    p._onKeyUp = function(keyCode)
    {
        switch(keyCode)
        {
            case pinetree.Keyboards.ESCAPE:
                this._onClose(null);
                break;
        }
    }

    p.setButtonEnabled = function(value)
    {
        this._allEnabled = value;

        this._pnBtns.enabled = value;
        this._playBtn.mouseEnabled = value;
        this._stopBtn.mouseEnabled = value;
        if(this._needInfoBtn)
            this._infoBtn.mouseEnabled = value;
        if(this._needPinBtn)
            this._pinBtn.mouseEnabled = this._allEnabled && this._pinBtnEnabled;

        if(this._needZoomBtn)
        {
            this._zoomInBtn.mouseEnabled = this._allEnabled && this._zoomInBtnEnabled;
            this._zoomOutBtn.mouseEnabled = this._allEnabled && this._zoomOutBtnEnabled;
        }
    }

    p.setPinEnabled = function(value)
    {
        if(!this._needPinBtn) return;

        this._pinBtnEnabled = value;

        this._pinBtn.mouseEnabled = this._allEnabled && this._pinBtnEnabled;

        var pAlpha = value ? 1.0 : 0.3;

        if(this._pinBtn.isShowing)
        {
            TweenMax.killTweensOf(this._pinBtn, false, {alpha:true});
            this._pinBtn.alpha = pAlpha;
        }
    }

    p.setZoomEnabled = function(value)
    {
        if(!this._needZoomBtn)
        {
            return;
        }

        this._zoomInBtnEnabled = value;
        this._zoomOutBtnEnabled = value;

        this._zoomInBtn.mouseEnabled = this._allEnabled && this._zoomInBtnEnabled;
        this._zoomOutBtn.mouseEnabled = this._allEnabled && this._zoomOutBtnEnabled;

        var pAlpha = value ? 1.0 : 0.3;

        if(this._zoomInBtn.isShowing)
        {
            TweenMax.killTweensOf(this._zoomInBtn, false, {alpha:true});
            this._zoomInBtn.alpha = pAlpha;
        }

        if(this._zoomOutBtn.isShowing)
        {
            TweenMax.killTweensOf(this._zoomOutBtn, false, {alpha:true});
            this._zoomOutBtn.alpha = pAlpha;
        }
    }

    p.resize = function(sw, sh)
    {
        this.width = sw;
        this._container.width = sw;

        var gap = pinetree.isDevice ? 10 : 20;
        var btnW = pinetree.isDevice ? 50 : 22;

        if(sw < 600)
        {
            gap = 10;
        }

        this._closeBtn.x = sw - btnW - gap;
        if(this._needInfoBtn)
        {
            this._infoBtn.x = this._closeBtn.x - btnW - gap;
            this._playBtn.x = this._stopBtn.x = this._infoBtn.x - btnW - gap;
        }
        else
        {
            this._playBtn.x = this._stopBtn.x = this._closeBtn.x - btnW - gap;
        }

        if(this._needZoomBtn)
        {
            this._zoomInBtn.x = this._zoomOutBtn.x = this._playBtn.x - btnW - gap;
        }

        var pinX = (this._needZoomBtn ? this._zoomInBtn.x : this._playBtn.x) - btnW - gap
        if(this._pinBtn)
        {
            this._pinBtn.x = pinX;
        }

        var homeX = 0;
        if(this._needPinBtn)
        {
            homeX = pinX - btnW - gap;
        }
        else
        {
            homeX = pinX;
        }
        if(this._homeBtn)
        {
            this._homeBtn.x = homeX;
        }

        var downloadX = 0;
        if(this._needHomeBtn)
        {
            downloadX = homeX - btnW - gap;
        }
        else
        {
            downloadX = homeX;
        }
        if(this._downloadBtn)
        {
            this._downloadBtn.x = downloadX;
        }

        if(this._needDownloadBtn)
        {
            this._pnBtns.x = downloadX - btnW - gap;
        }
        else
        {
            this._pnBtns.x = downloadX;
        }

        this._pnBtns.prevBtn.x = - btnW - gap;

        if(pinetree.isDevice)
        {
            this._timerUI.x = this._playBtn.x + 8;
        }
        else
        {
            this._timerUI.x = this._playBtn.x;
        }

        if(this._txtContainer)
        {
            var tw = sw;
            if(tw > this._textWidth)
            {
                tw = this._textWidth;
            }
            this._txtContainer.contentWidth = tw - this._paddingX - this._paddingX;
            this._txtContainer.scrollGapX = 0;
        }

        if(this._titleTxt)
        {
            this._titleTxt.width = this._pnBtns.x - this._titleTxt.x - 10;
            this._titleTxt.height = 1;
            this._titleTxt.htmlText = this._title;
            this._titleTxt.y = (this._bottomHeight - this._titleTxt.height) >> 1;
        }
    }

    p.getPlayBtnStagePosition = function()
    {
        return pinetreecom.CommonUtil.getStageX(this, this._playerBtn.x);
    }

    p.open = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;
    }

    p.close = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;
    }

    p.show = function()
    {
        this._isVisible = true;
        TweenMax.to(this._container, this.tweenTime, {y:0, ease:this.transition});
    }

    p.hide = function()
    {
        this._isVisible = false;
        TweenMax.to(this._container, this.tweenTime, {y:this._bottomHeight, ease:this.transition});
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.getBgHeight = function()
    {
        return this._bgHeight;
    }

    p.dispose = function()
    {
        this._timerUI = null;

        pinetreecom.MemoryUtil.removeSignalListeners([
            this.ON_CHANGE, this.ON_PLAY, this.ON_STOP, this.ON_INFO, this.ON_PINTREST, this.ON_CLOSE,
            this.ON_ZOOM, this.ON_DOWNLOAD
        ]);

        pinetreecom.MemoryUtil.disposeObjects([this._pnBtns, this._playBtn, this._stopBtn, this._infoBtn, this._pinBtn,
            this._closeBtn, this._zoomInBtn, this._zoomOutBtn, this._txtContainer, this._numTxt, this._titleTxt,
            this._homeBtn, this._downloadBtn
        ]);

        pinetreecom.KeyboardUtil.cancelByOwner(this);

        this._pnBtns = null;
        this._playBtn = null;
        this._stopBtn = null;
        this._infoBtn = null;
        this._pinBtn = null;
        this._closeBtn = null;
        this._zoomInBtn = null;
        this._zoomOutBtn = null;
        this._txtContainer = null;
        this._numTxt = null;
        this._titleTxt = null;
        this._homeBtn = null;
        this._downloadBtn = null;

        TweenMax.killTweensOf(this._container);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.GalleryInfoContainer = GalleryInfoContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/31.
 */
(function()
{
    var GalleryImageLoader = function(imageEdge, bottomHeight, isZoomIn)
    {
        pinetree.Sprite.call(this);

        this._thumbnail = null;

        this._isZoomIn = isZoomIn;
        this._zoomVertical = false;

        this._imageEdge = imageEdge;
        this._bottomHeight = bottomHeight;

        this._currentWidth = 0;
        this._currentHeight = 0;

        this._isLoading = false;

        this.tweenTime = 1.0;
        this.transition = Cubic.easeOut;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();

        __defineGetterSetter(this, ["isZoomIn", "mouseMovable", "bitmapData"]);
    }

    var p = __extends(GalleryImageLoader, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._thumbnail = new pinetreecom.Thumbnail(0, 0, 0, 0, false, null, false);
            this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onLoadComplete);
            this.addChild(this._thumbnail);
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setIsZoomIn = function(value)
    {
        this._isZoomIn = value;
        var sw = pt.stageWidth, sh = pt.stageHeight, x = 0, y = 0;

        if(this._isZoomIn)
        {
            var scaleX = sw / this._thumbnail.originWidth;
            var scaleY = sh / this._thumbnail.originHeight;
            var scale = Math.max(scaleX, scaleY);

            this._zoomVertical = scaleX > scaleY;

            var percent = 0;
            if(this._zoomVertical)
            {
                percent = pinetree.stage.mouseY / pt.stageHeight;
                y = percent * (sh - Math.ceil(this._thumbnail.originHeight * scale));
            }
            else
            {
                percent = pinetree.stage.mouseX / pt.stageWidth;
                x = percent * (sw - Math.ceil(this._thumbnail.originWidth * scale));
            }

            TweenMax.killTweensOf(this._thumbnail, false, {x:true, y:true});
            TweenMax.to(this._thumbnail, this.tweenTime, {x:x, y:y, ease:Quart.easeOut,
                imageWidth:Math.ceil(this._thumbnail.originWidth * scale),
                imageHeight:Math.ceil(this._thumbnail.originHeight * scale),
                onComplete:this._onZoomComplete, onCompleteParams:[this]
            })
        }
        else
        {
            var isWidthFull;
            var w = sw - this._imageEdge, h = sh - pt.TOP_HEIGHT - this._bottomHeight - this._imageEdge;
            if(w >= this._thumbnail.originWidth && h >= this._thumbnail.originHeight)
            {
                this._currentWidth = this._thumbnail.originWidth;
                this._currentHeight = this._thumbnail.originHeight;
            }
            else
            {
                isWidthFull = w / this._thumbnail.originWidth < h / this._thumbnail.originHeight;

                if(isWidthFull)
                {
                    this._currentWidth = w;
                    this._currentHeight = Math.floor(w / this._thumbnail.originWidth * this._thumbnail.originHeight);
                }
                else
                {
                    this._currentHeight = h;
                    this._currentWidth = Math.floor(h / this._thumbnail.originHeight * this._thumbnail.originWidth);
                }
            }

            TweenMax.killTweensOf(this._thumbnail, false, {x:true, y:true});
            x = (sw - this._currentWidth) >> 1;
            y = (sh + pt.TOP_HEIGHT - this._bottomHeight - this._currentHeight) >> 1;

            TweenMax.to(this._thumbnail, this.tweenTime, {x:x, y:y, ease:Quart.easeOut,
                imageWidth:this._currentWidth,
                imageHeight:this._currentHeight
            })

            this.mouseMovable = false;
        }
    }

    p._onZoomComplete = function(owner)
    {
        if(!owner._isLoading)
        {
            owner.mouseMovable = owner._isZoomIn;
        }
    }

    p._onLoadComplete = function(thumb)
    {
        this._isLoading = false;
        this.mouseMovable = this._isZoomIn;
        this.ON_LOAD_COMPLETE.dispatch();
    }

    p.setMouseMovable = function(value)
    {
        if(value)
            pinetree.stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);
        else
            pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);
    }

    p._onMouseMove = function(evt)
    {
        var percent = 0;
        if(this._zoomVertical)
        {
            percent = pinetree.stage.mouseY / pt.stageHeight;
            var y = percent * (pt.stageHeight - this._thumbnail.imageHeight);
            TweenMax.to(this._thumbnail, this.tweenTime, {y:y, ease:this.transition});
        }
        else
        {
            percent = pinetree.stage.mouseX / pt.stageWidth;
            var x = percent * (pt.stageWidth - this._thumbnail.imageWidth);
            TweenMax.to(this._thumbnail, this.tweenTime, {x:x, ease:this.transition});
        }
    }

    p.reset = function()
    {
        if(this._thumbnail)
        {
            this._isLoading = false;
            this.mouseMovable = false;
            this._thumbnail.reset();
        }
    }

    p.load = function(url)
    {
        if(this._thumbnail)
        {
            this._isLoading = true;
            this.mouseMovable = false;
            this._thumbnail.load(url);
        }
    }

    p.getBitmapData = function()
    {
        if(this._isLoading || !this._thumbnail) return null;
        return this._thumbnail.bitmapData;
    }

    p.update = function(sw, sh)
    {
        if(this._isZoomIn)
        {
            var scaleX = sw / this._thumbnail.originWidth;
            var scaleY = sh / this._thumbnail.originHeight;
            var scale = Math.max(scaleX, scaleY);

            this._zoomVertical = scaleX > scaleY;

            this._thumbnail.imageWidth = Math.ceil(this._thumbnail.originWidth * scale);
            this._thumbnail.imageHeight = Math.ceil(this._thumbnail.originHeight * scale);

            var x = this._thumbnail.x + this._thumbnail.imageWidth < sw ? sw - this._thumbnail.imageWidth :
                this._thumbnail.x > 0 ? 0 : this._thumbnail.x;
            var y = this._thumbnail.y + this._thumbnail.imageHeight < sh ? sh - this._thumbnail.imageHeight :
                this._thumbnail.y > 0 ? 0 : this._thumbnail.y;

            TweenMax.killTweensOf(this._thumbnail, false, {x:true, y:true});
            this._thumbnail.x = x;
            this._thumbnail.y = y;
        }
        else
        {
            this._thumbnail.setMaxSize(sw - this._imageEdge, sh - pt.TOP_HEIGHT - this._bottomHeight - this._imageEdge);

            TweenMax.killTweensOf(this._thumbnail, false, {x:true, y:true});
            this._thumbnail.x = (sw - this._thumbnail.imageWidth) >> 1;
            this._thumbnail.y = (sh + pt.TOP_HEIGHT - this._bottomHeight - this._thumbnail.imageHeight) >> 1;

            this._currentWidth = this._thumbnail.imageWidth;
            this._currentHeight = this._thumbnail.imageHeight;
        }
    }

    p.dispose = function()
    {
        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);

        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();
        this.ON_LOAD_COMPLETE = null;

        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.GalleryImageLoader = GalleryImageLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/1/8.
 */
(function()
{
    var DeviceGalleryTextContainer = function(padding, fontSize, textColor, bgColor, bgAlpha)
    {
        pinetreecom.UIComponent.call(this);

        this._padding = padding || 0;

        this._fontSize = __defaultSet(fontSize, 16);
        this._textColor = __defaultSet(textColor, pt.textColor);

        this._titleTxt = null;
        this._infoTxt = null;

        this._title = "";
        this._info = "";

        this.backgroundColor = __defaultSet(bgColor, pt.bgColor);
        this.backgroundAlpha = __defaultSet(bgAlpha, pt.bgAlpha);

        this.ON_CLOSE = new pinetree.Signal();

        this.alpha = 0;
        this.visible = false;

        this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
    }

    var p = __extends(DeviceGalleryTextContainer, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " gallery_device_info_title";
            this.addChild(this._titleTxt);

            this._infoTxt = new pinetree.TextField();
            this._infoTxt.className += " gallery_device_info_content";
            this.addChild(this._infoTxt);
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p._onClick = function(evt)
    {
        this.hide();
    }

    p.setTexts = function(title, info)
    {
        this._title = title;
        this._info = info;
    }

    p.show = function(time)
    {
        pinetree.stage.addChild(this);

        pt.navPage.view.showMenuAndLogo(false);

        this.visible = true;
        TweenMax.to(this, time || 0, {alpha:1, ease:Quad.easeOut});

        this.redraw();
    }

    p.hide = function(time, notDispatchCloseEvent)
    {
        TweenMax.to(this, time || 0, {alpha:0, ease:Quad.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this, notDispatchCloseEvent]});
    }

    p._onHideComplete = function(owner, notDispatchCloseEvent)
    {
        owner.visible = false;
        owner.removeFromParent();

        pt.navPage.view.showMenuAndLogo(true);

        if(!notDispatchCloseEvent)
        {
            owner.ON_CLOSE.dispatch();
        }
    }

    p.resize = function(sw, sh)
    {
        if(this.visible)
        {
            this._titleTxt.width = sw - this._padding * 2;
            this._titleTxt.height = 1;
            this._titleTxt.htmlText = this._title;

            this._infoTxt.width = sw - this._padding * 2;
            this._infoTxt.height = 1;
            this._infoTxt.htmlText = this._info;

            var gap = 20;
            var h = this._titleTxt.height + gap + this._infoTxt.height;
            var y = h < sh - this._padding * 2 ? ((sh - this._padding * 2 - h) >> 1) : this._padding;

            this._titleTxt.x = this._padding;
            this._infoTxt.x = this._padding;
            this._titleTxt.y = y;
            this._infoTxt.y = y + this._titleTxt.height + gap;

            this.width = sw;
            h = h < sh - this._padding * 2 ? sh : h + this._padding * 2;
            this.height = h;
        }
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        TweenMax.killTweensOf(this);

        this.ON_CLOSE && this.ON_CLOSE.removeAll();
        this.ON_CLOSE = null;

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreepages.DeviceGalleryTextContainer = DeviceGalleryTextContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryBase = function()
    {
        pinetreemvc.ViewComponentBase.call(this);

        this.data = null;

        this.linkId = "";
        this.linkParams = null;

        this.ON_SLIDESHOW_START = new pinetree.Signal();
        this.ON_SLIDESHOW_STOP = new pinetree.Signal();
        this.ON_SLIDESHOW_PAUSE = new pinetree.Signal();
        this.ON_SLIDESHOW_RESUME = new pinetree.Signal();

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(GalleryBase, pinetreemvc.ViewComponentBase);

    p.initData = function(data)
    {
        this.data = data || [];
    }

    p.slideshowStart = function()
    {

    }

    p.slideshowStop = function()
    {

    }

    p.slideshowPause = function()
    {

    }

    p.slideshowResume = function()
    {

    }

    p.change = function(data)
    {

    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        this.linkId = linkId;
        this.linkParams = linkParams;
    }

    p.dispose = function()
    {
        this.ON_SLIDESHOW_START && this.ON_SLIDESHOW_START.removeAll();
        this.ON_SLIDESHOW_STOP && this.ON_SLIDESHOW_STOP.removeAll();
        this.ON_SLIDESHOW_PAUSE && this.ON_SLIDESHOW_PAUSE.removeAll();
        this.ON_SLIDESHOW_RESUME && this.ON_SLIDESHOW_RESUME.removeAll();
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_SLIDESHOW_START = null;
        this.ON_SLIDESHOW_STOP = null;
        this.ON_SLIDESHOW_PAUSE = null;
        this.ON_SLIDESHOW_RESUME = null;
        this.ON_CHANGE = null;
        this.ON_LOAD_COMPLETE = null;

        this.data = null;
        this.linkId = "";
        this.linkParams = null;

        pinetreemvc.ViewComponentBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryBase = GalleryBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryImages = function()
    {
        pinetreepages.GalleryBase.call(this);

        this._originParent = null;

        this._screenMask = null;
        
        this.IMAGE_CONST = 30 * 2;
        this.BOTTOM_CONTENT_HEIGHT = pt.FOOTER_HEIGHT_CONST;

        this._imageEdge = pinetree.isDevice ? 0 : this.IMAGE_CONST;
        this._bottomHeight = pinetree.isDevice ? pt.DEVICE_FOOTER_HEIGHT : this.BOTTOM_CONTENT_HEIGHT;

        this._textWidth = 0;

        this._isInited = false;
        this._isPlaying = true;
        this._isZoomIn = false;
        this._isClose = false;

        this._currentIndex = 0;

        this._isToPrevDirection = false;

        this._needInfoBtn = true;
        this._needPinBtn = true;
        this._needHomeBtn = true;
        this._needDownloadBtn = true;

        this._dataCount = 0;
        this._currentVo = null;
        this._currentNodeIndex = 0;

        this._imageLoader = null;
        this._infoContainer = null;
        this._mediaPlayer = null;
        this._loading = null;

        this._deviceInfoTxt = null;

        this._tweenOffsetX = 20;

        this._isShowingInfo = false;

        this._isPlayingWhileClosing = false;

        this.positionRef = "fixed";

        if(pt.isAlphaMode) this.alpha = pt.ALPHA_MODE_VALUE;

        __defineGetterSetter(this, ["isInited"]);
    }

    var p = __extends(GalleryImages, pinetreepages.GalleryBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;
        }
        pinetreepages.GalleryBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.GalleryBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = this.data.length;
        this._autoPlay = this.facade.$.setting.autoPlay;
        this._isZoomIn = pinetree.isDevice ? false : this.facade.$.setting.isZoomIn;

        this._isPlaying = this._autoPlay;

        this._needInfoBtn = this.facade.$.setting.needInfoButton;
        this._needPinBtn = this.facade.$.setting.needPinterestButton;
        this._needHomeBtn = this.facade.$.setting.needHomeButton;
        this._needDownloadBtn = this.facade.$.setting.needDownloadButton;
        this._needZoomBtn = this.facade.$.setting.needZoomButton;

        this._textWidth = this.facade.$.setting.textWidth;

        this._initUI();

        this.visible = false;

        if(pinetree.isDevice)
        {
            pt.zoomProxy.ON_CLOSE.add(this, this._onResumeSlide);
        }
    }

    p._initUI = function()
    {
        this._imageLoader = new pinetreepages.GalleryImageLoader(this._imageEdge, this._bottomHeight, this._isZoomIn);
        this._imageLoader.ON_LOAD_COMPLETE.add(this, this._onLoadImgComplete);
        this.addChild(this._imageLoader);

        this._loading = new pinetreecom.CommonLoading("big");
        this.addChild(this._loading);

        this._screenMask = new pinetree.Quad();
        this.addChildAt(this._screenMask, 0);
        this._screenMask.color = pt.bgColor;
        this._screenMask.alpha = pinetree.isDevice ? 1 : 0.95;

        this._infoContainer = new pinetreepages.GalleryInfoContainer(this.data, this._textWidth, 200, this._bottomHeight,
            pt.bgColor, 0.95, this._autoPlay, this._isZoomIn, this._needInfoBtn, this._needPinBtn, this.facade.$.timerUI,
            this._needHomeBtn, this._needDownloadBtn, this._needZoomBtn
        );
        this._infoContainer.ON_CHANGE.add(this, this._onChange);
        this._infoContainer.ON_CLOSE.add(this, this._onClose);
        this._infoContainer.ON_INFO.add(this, this._onInfo);
        this._infoContainer.ON_PLAY.add(this, this._onPlay);
        this._infoContainer.ON_STOP.add(this, this._onStop);
        this._infoContainer.ON_ZOOM.add(this, this._onZoom);
        this._infoContainer.ON_PINTREST.add(this, this._onPin);
        this._infoContainer.ON_DOWNLOAD.add(this, this._onDownload);
        this.addChild(this._infoContainer);

        if(pinetree.isDevice)
        {
            this._deviceInfoTxt = new pinetreepages.DeviceGalleryTextContainer(20, 16, pt.textColor, pt.bgColor, 0.95);
            this._deviceInfoTxt.ON_CLOSE.add(this, this._onResumeSlide);
            this.registerAutoDispose(this._deviceInfoTxt);
        }
    }

    p._onDownload = function()
    {
        var vo = this.data[this._currentIndex];
        if(vo)
        {
            navigateToURL(vo.imageurls[0]);
        }
    }

    p._onPin = function()
    {
        var vo = this.data[this._currentIndex];
        if(vo)
        {
            var link = "https://www.pinterest.com/pin/create/button/?" +
                    "url=" + encodeURIComponent(window.location.href) +
                    "&media=" + encodeURIComponent(pt.rootDirectory + "/" + vo.imageurls[0]) +
                    "&description=" + encodeURIComponent(vo.title);
            navigateToURL(link, "_blank");
        }
    }

    p._onZoom = function(type)
    {
        this._isZoomIn = type == "in";

        if(!pinetree.isDevice)
        {
            this._imageLoader.isZoomIn = this._isZoomIn;
        }
        else
        {
            if(this._isZoomIn)
                this.ON_SLIDESHOW_PAUSE.dispatch();
            else
                this.ON_SLIDESHOW_RESUME.dispatch();

            if(this._imageLoader.bitmapData)
            {
                pt.zoomProxy.bitmapData = this._imageLoader.bitmapData;
                pt.zoomProxy.zoomIn();
            }
        }
    }

    p._onResumeSlide = function()
    {
        if(!this._isInited) return;
        this.ON_SLIDESHOW_RESUME.dispatch();
    }

    p._onChange = function(e)
    {
        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._isToPrevDirection = true;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
        else
        {
            this._isToPrevDirection = false;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }
    }

    p.load = function(index)
    {
        //this.mouseChildren = this.mouseEnabled = false;

        this._infoContainer.buttonEnabled = false;

        if(pinetree.isDevice)
        {
            pt.zoomProxy.zoomOut();
        }

        var vo = this.data[index];
        this._currentVo = vo;

        this._currentIndex = index;

        this._infoContainer.updatePNButtons(index);

        if(!this._isInited)
        {
            this.transitionIn(Delegate.create(this, this.load, index));

            var fontSize = pinetree.isDevice ? 22 : 16;
            var num = "<span style='font-size:" + fontSize + "px'>" + (vo.index + 1) + "</span>/" + vo.total;
            this._infoContainer.updateTexts(num, vo.title, vo.description);
            return;
        }

        this.facade.$.timerUI && this.facade.$.timerUI.change(this._currentIndex);

        if(vo.isImage)
            this.loadImage(vo);
        else
            this.loadVideo(vo);

        this._infoContainer.zoomEnabled = vo.isImage;
        this._infoContainer.pinEnabled = vo.isImage;
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.GalleryBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(!this._isInited) return;

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(isNaN(index))
            {
                this._onClose();
            }
            else if(this._currentIndex != index - 1 && index > 0 && index <= this._dataCount)
            {
                this._currentIndex = index - 1;

                var offsetX = this._isToPrevDirection ? - this._tweenOffsetX : this._tweenOffsetX;

                if(this._currentVo.isImage)
                {
                    if(!this._imageLoader.tweenAlphaByCSS(0, this.tweenTime * 0.5, 0, "linear",
                            Delegate.create(this, this._onHideImageComplete)))
                    {
                        TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {alpha:0, ease:Linear.easeNone,
                            onComplete:Delegate.create(this, this._onHideImageComplete)});
                    }

                    TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {x:this._imageLoader.x - offsetX, ease:Cubic.easeOut});
                }
                else
                {
                    this._mediaPlayer.tweenOut(this.tweenTime * 0.8, 0, Linear.easeNone, Delegate.create(this, this._onHideVideoComplete));
                    TweenMax.to(this._mediaPlayer, this.tweenTime * 0.5, {x:((pt.stageWidth - this._currentVo.videoWidth) >> 1) - offsetX,
                        ease:Cubic.easeOut});
                }

                this.facade.$.timerUI && this.facade.$.timerUI.stop();

                var vo = this.data[this._currentIndex];
                var fontSize = pinetree.isDevice ? 22 : 16;
                var num = "<span style='font-size:" + fontSize + "px'>" + (vo.index + 1) + "</span>/" + vo.total;
                this._infoContainer.updateTexts(num, vo.title, vo.description);
            }
        }
        else
        {
            this._onClose();
        }
    }

    p.loadByTimer = function(index)
    {
        this._isToPrevDirection = index < this._currentIndex;
        pinetreesite.siteController.changeDeeplinking(this.linkId, [index + 1]);
    }

    p._dragPrev = function(target)
    {
        if(this._currentIndex <= 0)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = true;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
    }

    p._dragNext = function(target)
    {
        if(this._currentIndex >= this._dataCount - 1)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = false;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }
    }

    p.loadImage = function(vo)
    {
        this._imageLoader.reset();
        this._imageLoader.alpha = 0;
        this._imageLoader.load(vo.imageurls[this._currentNodeIndex]);

        pt.dragPrevNext.listen(this._imageLoader, this, this._dragPrev, this._dragNext, null, "x", false, 0, 0);

        this._loading && this._loading.show();
    }

    p.loadVideo = function(vo)
    {
        if(this._mediaPlayer)
        {
            this._mediaPlayer.dispose();
            this._mediaPlayer.removeFromParent();
            this._mediaPlayer = null;
        }

        this._mediaPlayer = new pinetreecom.MediaPlayer();
        this.addChild(this._mediaPlayer);
        this._mediaPlayer.alpha = 0;
        this._mediaPlayer.autoplay = true;
        this._mediaPlayer.loop = false;
        this._mediaPlayer.isShowControls = true;
        this._mediaPlayer.playEndHandler = Delegate.create(this, this._onMediaPlayEnd);
        this._mediaPlayer.load(vo.videourl, vo.videoType, vo.videoWidth, vo.videoHeight);

        this._resizeUI();
        this._beginNext();
    }

    p._onMediaPlayEnd = function()
    {
        if(this.facade.$.timerUI && this._isPlaying && !pinetree.isDevice)
        {
            var index = this._currentIndex;
            index ++;
            if(index >= this._dataCount)
            {
                index = 0;
            }
            this.loadByTimer(index);
        }
    }

    p._onLoadImgComplete = function()
    {
        this._loading && this._loading.hide();

        this._resizeUI();
        this._beginNext();
    }

    p._onShowComplete = function()
    {
        this._infoContainer.buttonEnabled = true;
        //this.mouseChildren = this.mouseEnabled = true;
    }

    p._onTweenBgUpdate = function(owner)
    {

    }

    p._beginNext = function()
    {
        if(this._isClose) return;

        var offsetX = this._isToPrevDirection ? - this._tweenOffsetX : this._tweenOffsetX;

        if(this._currentVo.isImage)
        {
            this._imageLoader.x = offsetX;

            if(!this._imageLoader.tweenAlphaByCSS(1, this.tweenTime * 0.5, 0, "linear"))
            {
                TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {alpha:1, ease:Linear.easeNone});
            }
            TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {x:0, ease:Cubic.easeOut});

            if((this.facade.$.timerUI && this._isPlaying)
                || this._isPlayingWhileClosing)
            {
                this.ON_SLIDESHOW_START.dispatch();
                this._isPlayingWhileClosing = false;
            }
        }
        else
        {
            this._mediaPlayer.tweenIn(this.tweenTime * 0.5, 0, Linear.easeNone);
            this._mediaPlayer.x = ((pt.stageWidth - this._currentVo.videoWidth) >> 1) + offsetX;
            TweenMax.to(this._mediaPlayer, this.tweenTime * 0.5, {x:(pt.stageWidth - this._currentVo.videoWidth) >> 1,
                ease:Cubic.easeOut});

            if(this.facade.$.timerUI && this._isPlaying)
            {
                this.ON_SLIDESHOW_PAUSE.dispatch();
                this._isPlayingWhileClosing = false;
            }
        }

        if(this._isShowingInfo && this._currentVo.isImage)
        {
            if(this._infoContainer)
            {
                this._infoContainer.open();
            }
        }

        pinetreecom.DelayCaller.delayCall(this, this._onShowComplete, this.tweenTime * 0.5, null, true);
    }

    p._onHideImageComplete = function()
    {
        this.load(this._currentIndex);
    }

    p._onHideVideoComplete = function()
    {
        this._mediaPlayer.removeFromParent(true);
        this._mediaPlayer = null;

        this.load(this._currentIndex);
    }

    p._onInfo = function()
    {
        if(!this._isInited || !this._currentVo.isImage) return;

        if(!pinetree.isDevice)
        {
            if(this._infoContainer)
            {
                if(this._infoContainer.isShowing)
                {
                    this._isShowingInfo = false;
                    this._infoContainer.close();

                    TweenMax.to(this._infoContainer, this.tweenTime * 1.2, {y: pt.stageHeight - this._bottomHeight,
                        ease:Circ.easeInOut});
                }
                else
                {
                    this._isShowingInfo = true;
                    this._infoContainer.open();

                    TweenMax.to(this._infoContainer, this.tweenTime * 1.2, {y: pt.stageHeight - this._bottomHeight
                        - this._infoContainer.bgHeight, ease:Circ.easeInOut});
                }
            }
        }
        else
        {
            this._deviceInfoTxt.setTexts(this._currentVo.title, this._currentVo.description);
            this._deviceInfoTxt.show();

            this.ON_SLIDESHOW_PAUSE.dispatch();
        }
    }

    p._onPlay = function()
    {
        this.ON_SLIDESHOW_START.dispatch();
        this._isPlaying = true;
    }

    p._onStop = function()
    {
        this.ON_SLIDESHOW_STOP.dispatch();
        this._isPlaying = false;
    }

    p._onClose = function()
    {
        this._isPlayingWhileClosing = this.facade.$.timerUI ? this._isPlaying : false;

        this.ON_SLIDESHOW_STOP.dispatch();
        this.mouseChildren = this.mouseEnabled = false;

        this._isClose = true;

        this.transitionOut(Delegate.create(this, this._closeComplete));

        pinetreesite.siteController.changeDeeplinking(this.linkId);

        this._isInited = false;
    }

    p._closeComplete = function()
    {
        this.visible = false;

        this.facade.$.thumbnailsUI.backFromImagesPage();

        if(this._imageLoader)
        {
            this._imageLoader.alpha = 0;
            this._imageLoader.reset();
        }

        if(this._mediaPlayer)
        {
            this._mediaPlayer.removeFromParent(true);
            this._mediaPlayer = null;
        }
    }

    p.getIsInited = function()
    {
        return this._isInited;
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited || !this._currentVo) return;

        this._resizeUI();
    }

    p._resizeUI = function()
    {
        var sw = pt.stageWidth;
        var sh = pt.stageHeight;

        if(this._screenMask)
        {
            this._screenMask.width = sw;

            if(pinetree.isDevice)
            {
                this._screenMask.height = sh - pt.TOP_HEIGHT;
                this._screenMask.y = pt.TOP_HEIGHT;
            }
            else
            {
                this._screenMask.height = sh;
                this._screenMask.y = 0;
            }
        }

        if(this._currentVo.isImage)
        {
            if(this._imageLoader)
            {
                TweenMax.killTweensOf(this._imageLoader, false, {x:true, y:true});
                this._imageLoader.x = 0;
                this._imageLoader.y = 0;
                this._imageLoader.update(sw, sh);
            }
        }
        else
        {
            if(this._mediaPlayer)
            {
                TweenMax.killTweensOf(this._mediaPlayer, false, {x:true, y:true});
                this._mediaPlayer.x = (sw - this._currentVo.videoWidth) >> 1;

                if(pinetree.isDevice)
                    this._mediaPlayer.y = (sh + pt.TOP_HEIGHT - this._bottomHeight - this._currentVo.videoHeight) >> 1;
                else
                    this._mediaPlayer.y = (sh - this._bottomHeight - this._currentVo.videoHeight) >> 1;
            }
        }

        if(this._infoContainer)
        {
            if(this._isShowingInfo)
            {
                this._infoContainer.y = sh - this._bottomHeight - this._infoContainer.bgHeight;
            }
            else
            {
                this._infoContainer.y = sh - this._bottomHeight;
            }
            this._infoContainer.resize(sw, sh);
        }

        if(this._loading)
        {
            if(pinetree.isDevice)
            {
                this._loading.x = sw >> 1;
                this._loading.y = sh >> 1;
            }
            else
            {
                this._loading.x = sw >> 1;
                if(pinetree.isDevice)
                    this._loading.y = (sh - pt.FOOTER_HEIGHT + pt.TOP_HEIGHT) >> 1;
                else
                    this._loading.y = (sh - pt.FOOTER_HEIGHT) >> 1;
            }
        }

        this.width = sw;
    }

    p.transitionIn = function(callback)
    {
        this._isInited = true;

        this.visible = true;
        this._isClose = false;

        this.redraw();

        pinetreesite.siteController.bringToRoot(this);

        this._screenMask.width = 0.1;
        if(pinetree.isDevice)
            this._screenMask.height = pt.stageHeight - pt.TOP_HEIGHT;
        else
            this._screenMask.height = pt.stageHeight;
        TweenMax.to(this._screenMask, this.tweenTime, {width:pt.stageWidth, delay:0.1,
            onComplete:Delegate.create(this, this._transitionInComplete, callback), ease:Circ.easeInOut});
    }

    p._transitionInComplete = function(callback)
    {
        if(pinetree.isDevice)
        {
            this.facade.$.thumbnailsUI.removeFromParent();
            this.redraw();
        }

        /*if(this._isPlaying)
            this._stopBtn.show();
        else
            this._playBtn.show();*/

        if(this._infoContainer)
        {
            this._infoContainer.show();
        }

        this.mouseEnabled = this.mouseChildren = true;

        this.redraw();
        callback && callback();
    }

    p.predisposeOut = function(callback)
    {
        this.transitionOut(Delegate.create(this, this._predisposeOutComplete, callback));
    }

    p._predisposeOutComplete = function(callback)
    {
        callback && callback();
        this.dispose();
    }

    p.transitionOut = function(callback)
    {
        this.ON_SLIDESHOW_STOP.dispatch();

        if(pinetree.isDevice)
        {
            pt.zoomProxy.zoomOut();
        }

        if(this._deviceInfoTxt && this._deviceInfoTxt.visible)
        {
            this._deviceInfoTxt.hide(0, true);
        }

        this.mouseChildren = this.mouseEnabled = false;

        this._loading && this._loading.hide();

        var tweenTime = this.tweenTime;

        if(this._infoContainer)
        {
            if(this._infoContainer.isShowing)
            {
                this._isShowingInfo = false;
                this._infoContainer.close();

                TweenMax.to(this._infoContainer, tweenTime, {y: pt.stageHeight - this._bottomHeight,
                    ease:Circ.easeInOut});
            }

            this._infoContainer.hide();
        }

        if(this._currentVo.isImage)
        {
            TweenMax.to(this._imageLoader, tweenTime, {x:-50, ease:Cubic.easeInOut});

            if(!this._imageLoader.tweenAlphaByCSS(0, tweenTime, 0, "ease-out"))
            {
                TweenMax.to(this._imageLoader, tweenTime, {alpha:0, ease:Quad.easeOut});
            }
            this._imageLoader.mouseMovable = false;
        }
        else
        {
            if(this._mediaPlayer)
            {
                this._mediaPlayer.tweenOut(tweenTime, 0, Quad.easeOut);
                TweenMax.to(this._mediaPlayer, tweenTime, {x:this._mediaPlayer.x - 50, ease:Cubic.easeInOut});
            }
        }

        this.facade.$.thumbnailsUI.backToOriginParent();
        TweenMax.to(this._screenMask, tweenTime, {width:0, delay:tweenTime * 0.5,
            onComplete:callback, ease:Circ.easeInOut});
    }

    p.predispose = function()
    {
        if(this._isInited) return;
        this.dispose();
    }

    p.dispose = function()
    {
        this._isInited = false;

        this.ON_SLIDESHOW_STOP.dispatch();

        this._currentVo = null;

        if(this._screenMask)
        {
            TweenMax.killTweensOf(this._screenMask);
            this._screenMask.removeFromParent(true);
            this._screenMask = null;
        }

        if(this._infoContainer)
        {
            this._infoContainer.removeFromParent(true);
            this._infoContainer = null;
        }

        if(this._imageLoader)
        {
            TweenMax.killTweensOf(this._imageLoader.imageContainer);
            this._imageLoader.dispose();
            this._imageLoader = null;
        }

        if(this._mediaPlayer)
        {
            this._mediaPlayer.removeFromParent(true);
            this._mediaPlayer = null;
        }

        if(this._loading)
        {
            this._loading.removeFromParent(true);
            this._loading = null;
        }

        if(pinetree.isDevice)
        {
            pt.zoomProxy.clear();
            pt.zoomProxy.ON_CLOSE.remove(this, this._onResumeSlide);
        }

        pinetreecom.DelayCaller.removeByOwner(this);

        pt.dragPrevNext.remove();

        this.removeFromParent();
        this._originParent = null;

        this.facade.$.imagesUI = null;
        pinetreepages.GalleryBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryImages = GalleryImages;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryThumbnails = function()
    {
        pinetreepages.GalleryBase.call(this);

        this._originParent = null;

        this._listContainer = null;
        this._scroller = null;
        this._triggerRect = null;

        this._gap = 0;

        this._isTweening = false;

        this._dataCount = 0;
        this._currentIndex = 0;

	    this._scrollerTriggerMinY = 0;
        this._scrollerTriggerMaxY = 0xffffff;
        this._scrollerTriggerX = 0xffffff;
        this._stretchScroller = false;
	
	    this._isHorizontalScroll = true;

        this._oldScrollX = 0;
        this._oldScrollY = 0;

        this._isVerticalFit = false;

        this.sliderWidth = pinetree.isDevice ? 0 : 15;
        this.sliderHeight = 15;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.bgColor;
        this.sliderBGAlpha = 0.3;

        this._itemHeight = 0;

        this.percent = 0;

        this.ON_BACK_TO_CATEGORY = new pinetree.Signal();

        this._isInited = false;

        this.selectable = false;

        if(pinetree.isDevice)
        {
            this._htmlElement.style.overflowX = "hidden";
        }

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(GalleryThumbnails, pinetreepages.GalleryBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;

            if(!pinetree.isDevice)
            {
                this.stage.addEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);
            }
            else
            {
                this.addEventListener(pinetree.Event.SCROLL, this._onScroll, this);
            }
        }
        pinetreepages.GalleryBase.prototype.addedToStage.call(this);
    }

    p._onScroll = function(evt)
    {
        if(this._listContainer)
        {
            this._listContainer.resize(pt.stageWidth, pt.stageHeight);
        }
    }

    p.initData = function(data)
    {
        pinetreepages.GalleryBase.prototype.initData.call(this, data);

        this._dataCount = data.length;

        this._gap = this.facade.$.setting.gap;
        this._itemHeight = this.facade.$.setting.thumbHeight;
        this._isVerticalFit = this.facade.$.setting.isVerticalFit;

        this._isHorizontalScrolls = [4];
        this._isHorizontalScroll = this._isHorizontalScrolls.indexOf(this.facade.$.setting.tipType) > -1;
        pt.isHorizontalScroll = this._isHorizontalScroll;

        this._initUI();

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._initUI = function()
    {
    	if(!this._isHorizontalScroll || pinetree.isDevice)
        {
            if(this._isVerticalFit && !this._isHorizontalScroll)
                this._listContainer = new pinetreecom.VMixVFitListContainer();
            else
                this._listContainer = new pinetreecom.VMixHFitListContainer();
            //this._listContainer.needResize = true;
            this._listContainer.animateTime = this.tweenTime;
            this._listContainer.animateDelay = 0.1 * this.tweenTime;
        }
        else
        {
            this._listContainer = new pinetreecom.HMixListContainer();
            //this._listContainer.needResize = true;
            this._listContainer.rowCount = 1;
            this._listContainer.animateTime = this.tweenTime;
            this._listContainer.animateDelay = 0.06 * this.tweenTime;
        }
	
	    this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
        this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
        this._listContainer.ON_OVER.add(this, this.onOverItem);
        this._listContainer.ON_OUT.add(this, this.onOutItem);
        this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
        this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
        this._listContainer.useRealPosition = false;
        this._listContainer.onlyFullShown = false;

        if(pinetree.isDevice)
        {
            this._listContainer.startY = pt.TOP_HEIGHT;
            this._listContainer.y = pt.TOP_HEIGHT;
            this.addChild(this._listContainer);
        }
        else
        {
            if(!this._isHorizontalScroll)
            {

                //var img = pt.getCommonTexture(pinetreepages.EnumTextures.SCROLLER_BASE_TILE);
                this._scroller = new pinetreecom.VScroller(this.sliderWidth, 100, 1, 1,
                    this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
                    this.sliderBGColor, this.sliderBGAlpha, null, false,
                    true, false, true
                );
            }
            else
            {
                this._scroller = new pinetreecom.HScroller(this.sliderWidth, this.sliderHeight, 1, 1,
                    this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
                    this.sliderBGColor, 0, null, false,
                    true, false, true);

            }
		    this.addChild(this._scroller);
            this._scroller.ON_SCROLL_START.add(this, this._onScrollStart);
            this._scroller.ON_SCROLL_END.add(this, this._onScrollEnd);
            this._scroller.ON_CHANGE.add(this, this._onScrollProgress);
            this._scroller.ON_SLIDER_MOUSE_DOWN.add(this, this._onSliderMouseDown);
            this._scroller.ON_SLIDER_MOUSE_UP.add(this, this._onSliderMouseUp);
            this._scroller.scrollMC.alpha = 0;
            this._scroller.addTarget(this._listContainer, 0, 0, 0);
            if(!this._isHorizontalScroll)
            {
                this._scroller.scrollBar.smoothScrollEasing = 5;
                this._scroller.y = pt.TOP_HEIGHT;
            }
            else
            {
                this._scroller.scrollBar.smoothScrollEasing = 10;
            }
        }

        this._triggerRect = new pinetreecom.TriggerRect(1, 1, 0x00ff00, 0);
        this.addChildAt(this._triggerRect, 0);

        this._listContainer.reset();

        var w = this._isVerticalFit ? this.facade.$.setting.thumbWidth : 0;
        var h = this._isVerticalFit ? 0 : this.facade.$.setting.thumbHeight;
        if(this._isHorizontalScroll)
        {
            w = this.facade.$.setting.thumbWidth || 0;
            h = this.facade.$.setting.thumbHeight;
        }
        this._listContainer.setUpWith(pinetreepages.GalleryThumbnailRender, w, h,
            this._gap, this._gap, pinetreecom.AlignUtil.ALIGN_VERTICAL, 4, this.data,
            pt.stageWidth, pt.stageHeight - pt.TOP_HEIGHT);

        if(!pinetree.isDevice)
        {
            this._scroller.mouseWheelArea = this._triggerRect;
            if(this._isHorizontalScroll)
            {
                this._scroller.enabled = true;
                this._scroller.show();
            }
        }

        this.enabled = false;

        this._isInited = true;
        this.redraw();
    }

    p._onMouseMove = function(evt)
    {
        if(!this._scroller)
        {
            return;
        }

    	if(!this._isHorizontalScroll)
        {
            if(evt.mouseX > this._scrollerTriggerX)
            {
                if(!this._stretchScroller)
                {
                    this.percent = 0;
                    this._stretchScroller = true;
                    TweenMax.to(this, this.tweenTime * 0.3, {percent:1, ease:Quad.easeOut,
                        onUpdate:this._onTweenScrollerUpdate,
                        onUpdateParams:[this, this._scroller]});
                }
            }
            else
            {
                if(this._stretchScroller)
                {
                    this.percent = 1;
                    this._stretchScroller = false;
                    TweenMax.to(this, this.tweenTime * 0.3, {percent:0, ease:Quad.easeOut,
                        onUpdate:this._onTweenScrollerUpdate,
                        onUpdateParams:[this, this._scroller]});
                }
            }
	    }
        else
        {
            if(evt.mouseY > this._scrollerTriggerMinY && evt.mouseY < this._scrollerTriggerMaxY)
            {
                this._scroller.stretchIn();
            }
            else
            {
                this._scroller.stretchOut();
            }
        }
    }

    p._onTweenScrollerUpdate = function(owner, target)
    {
        target.scrollerX = pt.stageWidth - owner.percent * (owner.sliderWidth - 5) - 5;
    }

    p.tweenInComplete = function()
    {
        if(this.linkParams)
        {
            this.changeLinkParams(this.linkId, this.linkParams);
        }

        this._onAniComplete();
    }

    p.tweenOutComplete = function()
    {

    }

    p._onSliderMouseDown = function()
    {
        this._listContainer.mouseChildren = false;
    }

    p._onSliderMouseUp = function()
    {
        this._listContainer.mouseChildren = true;
    }

    p.backFromImagesPage = function()
    {
        this.enabled = true;
    }

    p.onOverItem = function(index)
    {
        var item;
        var items = this._listContainer.getAllItems();
        var len = items.length;
        for(var i = 0; i < len; i ++)
        {
            if(index != i)
            {
                item = items[i];
                if(item && item.isOverState)
                {
                    item.updateOverState(false);
                }
            }
        }
    }

    p.onOutItem = function(index)
    {

    }

    p.onClickThumbnail = function(index)
    {
        this._currentIndex = index;

        var vo = this.data[this._currentIndex];
        var imageurl = vo.isImage ? vo.imageurls[0] : vo.videourl;
        if(imageurl && imageurl.indexOf("is_page") > -1)
        {
            var page = imageurl.substring("is_page:".length);
            pinetreecom.LinkManager.to(page);
            return;
        }

        pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 1]);

        if(pinetree.isDevice)
        {
            this._oldScrollX = pinetree.getScrollX();
            this._oldScrollY = pinetree.getScrollY();
        }
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.GalleryBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(!isNaN(index) && this.facade.$.imagesUI && !this.facade.$.imagesUI.isInited)
            {
                if(index > 0 && index <= this._dataCount)
                {
                    this.enabled = false;
                    this.ON_CHANGE.dispatch(index - 1);
                }
            }
        }
    }

    p._onScrollStart = function()
    {
        if(this._scroller && !this._scroller.scrollMC.visible)
        {
            return;
        }

        if(!this._isHorizontalScroll)
        {
            this._listContainer.mouseChildren = this._listContainer.mouseEnabled = false;
        }
    }

    p._onScrollEnd = function()
    {
        this._listContainer.mouseChildren = this._listContainer.mouseEnabled = true;
        this.redraw();
    }

    p._onScrollProgress = function(percent)
    {
        this._listContainer.render();
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        if(this._triggerRect)
        {
            this._triggerRect.isEnabled = value;
        }

        if(this._scroller)
        {
            this._scroller.keyEnabled = value;
        }
    }

    p._onBack = function(evt)
    {
        this.transitionOut(Delegate.create(this, this._backToCategory));
    }

    p._backToCategory = function()
    {
        this.ON_BACK_TO_CATEGORY.dispatch();
        this._listContainer.reset();
        this.visible = false;
    }

    p.active = function()
    {
        if(this._triggerRect)
        {
            this._triggerRect.isEnabled = this.mouseEnabled;
        }
    }

    p.inactive = function()
    {
        if(this._triggerRect)
        {
            this._triggerRect.isEnabled = false;
        }
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        if(!this._isHorizontalScroll)
        {
            this._scrollerTriggerX = sw - 100;
        }

        this._listContainer.resize(sw, sh);

        if(this._scroller)
        {
            if(!this._isHorizontalScroll)
            {
                var sx = 0;
                if(pt.stage.mouseX > this._scrollerTriggerX)
                {
                    sx = sw - this.sliderWidth;
                    this._stretchScroller = true;
                }
                else
                {
                    sx = sw - this.sliderWidth + 10;
                    this._stretchScroller = false;
                }

		        var bh = pinetree.isSmallMode ? 0 : pt.currentBottomHeight;
                this._scroller.setSize(sw, this._listContainer.contentHeight, sh - bh - pt.TOP_HEIGHT, sx , 0);
                this._scroller.scrollerHeight = sh - bh - pt.TOP_HEIGHT;
                this._scroller.y = pt.TOP_HEIGHT;
            }
            else
            {
                var sy = this._listContainer.contentHeight;

                this._scroller.setSize(this._listContainer.contentWidth, this._listContainer.contentHeight, sw, 0, sy);
                this._scroller.scrollerWidth = sw;
                this._scroller.y = ((sh - this._listContainer.contentHeight) >> 1);

                this._scrollerTriggerMinY = this._scroller.y - 100;
                this._scrollerTriggerMaxY = this._scroller.y + this._listContainer.contentHeight + 100;
            }
        }

        if(pinetree.isSmallMode)
        {
            this.height = this._listContainer.contentHeight + pt.TOP_HEIGHT;
        }

        if(this._triggerRect)
        {
            this._triggerRect.width = sw;
            this._triggerRect.height = sh;
        }

        this.width = sw;
    }

    p.backToOriginParent = function()
    {
        if(this._originParent)
        {
            this.addTo(this._originParent);

            if(pinetree.isDevice)
            {
                window.scrollTo(this._oldScrollX, this._oldScrollY);
            }

            this.redraw();
        }
    }

    p.transitionIn = function()
    {
        this._isTweening = true;

        this.visible = true;

        pinetreecom.DelayCaller.delayAfterFrames(this._listContainer, this._listContainer.animationIn, 10,
            [pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM,  this.tweenTime * 0.5, Linear.easeNone]);

        if(!pinetree.isDevice)
        {
            if(!pinetree.isDevice)
                this._scroller.tweenScrollerAlpha(1, this.tweenTime);
        }

        //pinetreecom.DelayCaller.delayCall(this, this._onAniComplete, this.tweenTime, null, true);
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        if(!pinetree.isDevice)
        {
            if(!pinetree.isDevice)
                this._scroller.tweenScrollerAlpha(0, this.tweenTime);
        }

        this._listContainer.animationOut(pinetreecom.ListBase.ANI_DIRECTION_BOTTOM2TOP,
            this.tweenTime * 0.5, Linear.easeNone, callback);
    }

    p.predispose = function()
    {
        this.enabled = false;

        if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
        {
            this.facade.$.imagesUI.predisposeOut(Delegate.create(this, this.transitionOut,
                Delegate.create(this, this.dispose)));
        }
        else if(this._listContainer && this._listContainer.isAnimationIn)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        this._originParent = null;

        pinetree.stage.removeEventListener(pinetree.MouseEvent.MOUSE_MOVE, this._onMouseMove, this);

        pinetreecom.DelayCaller.removeByOwner(this);

        if(this._scroller)
        {
            this._scroller.removeFromParent(true);
            this._scroller = null;
        }

        if(this._listContainer)
        {
            this._listContainer.removeFromParent(true);
            this._listContainer = null;
        }

        if(this._triggerRect)
        {
            this._triggerRect.removeFromParent(true);
            this._triggerRect = null;
        }

        this.ON_BACK_TO_CATEGORY && this.ON_BACK_TO_CATEGORY.removeAll();
        this.ON_BACK_TO_CATEGORY = null;

        this.data && this.data.splice(0, this.data.length);
        this.data = null;

        this.facade.$.thumbnailsUI = null;
        pinetreepages.GalleryBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryThumbnails = GalleryThumbnails;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryCategories = function()
    {
        pinetreepages.GalleryBase.call(this);

        this._isInited = false;
    }

    var p = __extends(GalleryCategories, pinetreepages.GalleryBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.GalleryBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.GalleryBase.prototype.initData.call(this, data);

        this._initUI();
    }

    p._initUI = function()
    {

    }

    p.transitionIn = function(callback)
    {
        this._isInited = true;

    }

    p.transitionOut = function(callback)
    {
        if(!this._isInited) return;
        this._isInited = false;

    }

    p.predispose = function()
    {
        this.dispose();
    }

    p.dispose = function()
    {
        this.facade.$.categoriesUI = null;
        pinetreepages.GalleryBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryCategories = GalleryCategories;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var GalleryTimer = function()
    {
        pinetreepages.GalleryBase.call(this);

        this._currentIndex = 0;
        this._loading = null;
        this._duration = 0;
        this._tween = null;
        this._playBtn = null;
        this._radius = 0;

        this._autoPlay = true;

        this._isPause = false;

        this.percent = 0;

        __defineGetterSetter(this, ["isPlaying", "isPause"]);
    }

    var p = __extends(GalleryTimer, pinetreepages.GalleryBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.GalleryBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.GalleryBase.prototype.initData.call(this, data);

        this._autoPlay = this.facade.$.setting.autoPlay;

        this._initUI();
    }

    p._initUI = function()
    {
        this._duration = this.facade.$.setting.duration;

        this._radius = pinetree.isDevice ? 17 : 11;
        this._loading = new pinetreecom.CircleLoading(this._radius, 3, pt.onOutColor, pt.onOutColor, 1, 0.2);
        this._loading.alpha = 0;
        this.addChild(this._loading);

        this._loading.x = this._radius;
        this._loading.y = this._radius;

        /*this._playBtn = new pinetreecom.ToggleButton(!this._autoPlay, pt.onOutColor);
        this._playBtn.alpha = 0.8;
        this.addChild(this._playBtn);
        var onIcon = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_PLAY_ICON);
        var offIcon = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_PAUSE_ICON);
        this._playBtn.setTextures(onIcon, offIcon);
        this._playBtn.ON_CHANGE.add(this, this._onPlayBtnStateChange);
        this._playBtn.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this._playBtn.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

        this._playBtn.x = - this._playBtn.width >> 1;
        this._playBtn.y = - this._playBtn.height >> 1;*/

        //this.visible = false;
    }

    p._onPlayBtnStateChange = function(e)
    {
        if(e == pinetreecom.ToggleButton.STATE_ON)
        {
            this.stop();
        }
        else
        {
            this.start();
        }
    }

    p._onOver = function(evt)
    {
        this._playBtn.color = pt.onOverColor;
    }

    p._onOut = function(evt)
    {
        this._playBtn.color = pt.onOutColor;
    }

    p.change = function(index)
    {
        this._currentIndex = index;
    }

    p.start = function()
    {
        this._tween && this._tween.kill();
        this.percent = 0;

        if(this._loading)
        {
            TweenMax.to(this._loading, this.tweenTime / 2, {alpha:1, ease:Quad.easeOut});
        }

        this._tween = TweenMax.to(this, this._duration, {percent:1, ease:Linear.easeNone,
            onUpdate:this._onUpdate, onUpdateParams:[this],
            onComplete:this._onChange, onCompleteParams:[this]
        });
    }

    p.stop = function()
    {
        this._tween && this._tween.kill();
        this._tween = null;

        if(this._loading)
        {
            TweenMax.to(this._loading, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut});

            this._tween = TweenMax.to(this, 0.3, {percent:0, ease:Quart.easeOut,
                onUpdate:this._onUpdate, onUpdateParams:[this],
                onComplete:this._onStopComplete, onCompleteParams:[this]
            });
        }
    }

    p._onChange = function(owner)
    {
        owner._tween && owner._tween.kill();
        owner._tween = null;

        owner._tween = TweenMax.to(owner, 0.3, {percent:0, ease:Quart.easeOut,
            onUpdate:owner._onUpdate, onUpdateParams:[owner],
            onComplete:owner._onStopComplete, onCompleteParams:[owner]
        });

        var len = owner.data.length;
        owner._currentIndex >= len - 1 ? owner._currentIndex = 0 : owner._currentIndex ++;

        owner.ON_CHANGE.dispatch(owner._currentIndex);
    }

    p._onUpdate = function(owner)
    {
        owner._loading.percent = owner.percent;
    }

    p._onStopComplete = function(owner)
    {
        owner._tween && owner._tween.kill();
        owner._tween = null;
    }

    p.slideshowStart = function()
    {
        if(this.data.length > 1)
        {
            this.start();
            //this._playBtn && this._playBtn.setState(pinetreecom.ToggleButton.STATE_OFF);
        }

        this._isPause = false;
    }

    p.slideshowStop = function()
    {
        if(this.data && this.data.length > 1)
        {
            this.stop();
            //this._playBtn && this._playBtn.setState(pinetreecom.ToggleButton.STATE_ON);
        }

        this._isPause = false;
    }

    p.slideshowPause = function()
    {
        this._tween && this._tween.pause();
        //this._playBtn && this._playBtn.setState(pinetreecom.ToggleButton.STATE_ON);

        this._isPause = true;
    }

    p.slideshowResume = function()
    {
        this._tween && this._tween.resume();
        //this._playBtn && this._playBtn.setState(pinetreecom.ToggleButton.STATE_OFF);

        this._isPause = false;
    }

    p.getIsPlaying = function()
    {
        return !this._isPause;
    }

    p.getIsPause = function()
    {
        return this._isPause;
    }

    p.resize = function(sw, sh)
    {
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function()
    {
        this.stop();

        if(this._loading)
        {
            pinetreecom.DelayCaller.delayCall(this, this.dispose, this.tweenTime / 2, null, true);
        }
        else
        {
            this.dispose();
        }
    }

    p.getWidth = function()
    {
        return this._radius * 2;
    }

    p.getHeight = function()
    {
        return this._radius * 2;
    }

    p.predispose = function()
    {
        this.transitionOut();
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        this._tween && this._tween.kill();
        this._tween = null;

        if(this._loading)
        {
            TweenMax.killTweensOf(this._loading);
            this._loading.dispose();
            this._loading = null;
        }

        if(this._playBtn)
        {
            this._playBtn.removeEventListener(pinetree.Event.ROLL_OVER, this._onOver, this);
            this._playBtn.removeEventListener(pinetree.Event.ROLL_OUT, this._onOut, this);
            this._playBtn.dispose();
            this._playBtn = null;
        }

        this.removeFromParent();
        this.facade.$.timerUI = null;
        pinetreepages.GalleryBase.prototype.dispose.call(this);
    }

    pinetreepages.GalleryTimer = GalleryTimer;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var NewsView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._newsFacade = null;
        this._container = null;
    }

    var p = __extends(NewsView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);

        this._newsFacade = new pinetreepages.NewsFacade();
        this._newsFacade.ON_DISPOSE_COMPLETE.add(this, this._mvcDisposed);
        this._container = new pinetree.Sprite();
        this.addChild(this._container);
    }

    p.analyzeParams = function(linkId, linkParams)
    {
        pinetreepages.ViewBase.prototype.analyzeParams.call(this, linkId, linkParams);
        if(this._newsFacade)
        {
            this._newsFacade.updateLinkParams(this.linkId, this.linkParams);
        }
    }

    p.transitionIn = function()
    {
        this._newsFacade.startUp({container:this._container, source:this.data.src, size:this.data.size});
        this._newsFacade.updateLinkParams(this.linkId, this.linkParams);

        this.transitionInComplete();
    }

    p.transitionOut = function()
    {
        this._newsFacade && this._newsFacade.predispose();
    }

    p._mvcDisposed = function()
    {
        this.transitionOutComplete();
    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object NewsView]";
    }

    pinetreepages.NewsView = NewsView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{

    var NewsFacade = function()
    {
        pinetreemvc.Facade.call(this);

        this.$ = {
            //notification
            NFT_START_UP:"notification_start_up",
            NFT_DATA_LOAD_COMPLETE:"notification_data_load_complete",
            NFT_IMAGE_CHANGE:"notification_image_change",
            NFT_IMAGE_LOAD_COMPLETE:"notification_image_load_complete",
            NFT_LINK_PARAMETERS_CHANGE:"notification_link_parameters_change",
            //data
            setting:null,
            root:null,
            //ui
            listUI:null,
            imagesUI:null
        }
    }

    var p = __extends(NewsFacade, pinetreemvc.Facade);

    p.startUp = function(data)
    {
        this.registerCommand(this.$.NFT_START_UP, pinetreepages.NewsStartUpCommand);
        this.sendNotification(this.$.NFT_START_UP, data);
    }

    p.updateLinkParams = function(linkId, linkParams)
    {
        this.sendNotification(this.$.NFT_LINK_PARAMETERS_CHANGE, {linkId:linkId, linkParams:linkParams});
    }

    pinetreepages.NewsFacade = NewsFacade;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsSetting = function()
    {
        this.thumbWidth = 0;
        this.thumbHeight = 0;
        this.itemWidth = 0;
        this.itemHeight = 0;
        this.imageWidth = 0;
        this.imageHeight = 0;
        this.textWidth = 0;
        this.textHeight = 0;
        this.readMoreLabel = "READ MORE";
        this.gap = 0;
        this.closeButtonOffsetY = 0;
    }

    NewsSetting.from = function(obj)
    {
        var setting = new pinetreepages.NewsSetting();
        setting.thumbWidth = obj.thumbWidth;
        setting.thumbHeight = obj.thumbHeight;
        setting.itemWidth = obj.itemWidth;
        setting.itemHeight = obj.itemHeight;
        setting.imageWidth = obj.imageWidth;
        setting.imageHeight = obj.imageHeight;
        setting.textWidth = obj.textWidth;
        setting.textHeight = obj.textHeight;
        setting.readMoreLabel = obj.readMoreLabel || setting.readMoreLabel;
        setting.gap = obj.gap || 0;
        setting.closeButtonOffsetY = obj.closeButtonOffsetY || 0;
        return setting;
    }

    pinetreepages.NewsSetting = NewsSetting;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsImageVo = function()
    {
        this.index = 0;
        this.total = 0;
        this.date = "";
        this.title = "";
        this.preview = "";
        this.description = "";
        this.thumburl = "";
        this.imageurl = "";
        this.readMoreLabel = "";

        this.thumbWidth = 0;
        this.thumbHeight = 0;
    }

    NewsImageVo.from = function(obj)
    {
        var vo = new pinetreepages.NewsImageVo();
        vo.date = obj.date || "";
        vo.title = obj.title || "";
        vo.preview = obj.preview || "";
        vo.description = obj.description || "";
        vo.thumburl = obj.thumburl;
        vo.imageurl = obj.imageurl;

        if(vo.preview == "")
            vo.preview = vo.description;

        return vo;
    }

    pinetreepages.NewsImageVo = NewsImageVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsImageProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    NewsImageProxy.NAME = "NewsImageProxy";

    var p = __extends(NewsImageProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.NewsSetting.from(jsonData.setting);
        this.facade.$.setting = setting;

        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.NewsImageVo.from(jsonData.data[i]);
            vo.thumbWidth = setting.itemWidth;
            vo.thumbHeight = setting.thumbHeight;
            vo.readMoreLabel = setting.readMoreLabel;
            vo.index = i;
            vo.total = len;
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_COMPLETE, data);
    }

    pinetreepages.NewsImageProxy = NewsImageProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsImagesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    NewsImagesMediator.NAME = "NewsImagesMediator";

    var p = __extends(NewsImagesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.load(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.NewsImagesMediator = NewsImagesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsListMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    NewsListMediator.NAME = "NewsListMediator";

    var p = __extends(NewsListMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                //
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.NewsListMediator = NewsListMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsStartUpCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(NewsStartUpCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var container = data.container;
        var source = data.source;
        var fileSize = data.size;

        this.facade.$.root = container;

        var listUI = pinetree.isDevice ? new pinetreepages.NewsListDevice : new pinetreepages.NewsList();
        var imagesUI = new pinetreepages.NewsImages();

        this.facade.$.listUI = listUI;
        this.facade.$.imagesUI = imagesUI;

        container.addChild(listUI);
            container.addChild(imagesUI);

        this.facade.registerMediator(null, pinetreepages.NewsListMediator, listUI);
        this.facade.registerMediator(null, pinetreepages.NewsImagesMediator, imagesUI);

        this.facade.registerProxy(null, pinetreepages.NewsImageProxy, source, fileSize);
    }

    pinetreepages.NewsStartUpCommand = NewsStartUpCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var NewsListTips = function(data, w, h)
    {
        pinetree.Sprite.call(this);

        this._data = data;
        this._tipWidth = w;
        this._tipHeight = h;

        this._titleTxt = null;
        this._dateTxt = null;
        this._previewTxt = null;

        this._gapY = 22;

        this._line = null;
    }

    var p = __extends(NewsListTips, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.useMouseHand = true;
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.className += " news_list_title";

            this._dateTxt = new pinetree.TextField();
            this._dateTxt.useMouseHand = true;
            this._dateTxt.selectable = false;
            this.addChild(this._dateTxt);
            this._dateTxt.className += " news_list_date";

            this._line = new pinetree.Quad();
            this.addChild(this._line);
            this._line.color = pt.onOverColor;
            this._line.width = 30;
            this._line.height = 2;

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.useMouseHand = true;
            this._previewTxt.selectable = false;
            this.addChild(this._previewTxt);
            this._previewTxt.className += " news_list_preview";
            this._previewTxt.wordWrap = true;
        }
        pinetree.Sprite.prototype.addedToStage.call(this);

        this.update();
    }

    p.update = function()
    {
        this._titleTxt.width = this._tipWidth;
        this._titleTxt.height = 10;
        this._titleTxt.htmlText = this._data.title;
        this._titleTxt.y = this._gapY / 2;
        this._titleTxt.setLimitation(1, true);

        this._dateTxt.width = this._tipWidth;
        this._dateTxt.height = 10;
        this._dateTxt.htmlText = this._data.date;
        this._dateTxt.y = this._titleTxt.y + this._titleTxt.textHeight + this._gapY - 5;

        this._line.x = (this._tipWidth - this._line.width) >> 1;
        this._line.y = this._dateTxt.y + this._dateTxt.height + this._gapY / 2;

        this._previewTxt.width = this._tipWidth;
        this._previewTxt.htmlText = this._data.preview;
        this._previewTxt.y = this._line.y + this._line.height + this._gapY;

        var limitHeight = this._tipHeight - this._previewTxt.y + 20;
        if(pinetree.isDevice) limitHeight += 30;
        this._previewTxt.setLimitation(limitHeight, false);
    }

    p.dispose = function()
    {
       pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.NewsListTips = NewsListTips;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var NewsListDeviceTips = function(data)
    {
        pinetree.Sprite.call(this);

        this._data = data;
        this._titleTxt = null;
        this._dateTxt = null;
        this._previewTxt = null;

        this._gapY = 22;

        this._line = null;
    }

    var p = __extends(NewsListDeviceTips, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.useMouseHand = true;
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.className += " news_list_title_device";

            this._dateTxt = new pinetree.TextField();
            this._dateTxt.useMouseHand = true;
            this._dateTxt.selectable = false;
            this.addChild(this._dateTxt);
            this._dateTxt.className += " news_list_date_device";

            this._line = new pinetree.Quad();
            //this.addChild(this._line);
            this._line.color = pt.onOverColor;
            this._line.width = 1;
            this._line.height = 1;

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.useMouseHand = true;
            this._previewTxt.selectable = false;
            this.addChild(this._previewTxt);
            this._previewTxt.className += " news_list_preview_device";
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.update = function(tipWidth, tipHeight)
    {
        this._titleTxt.width = tipWidth;
        this._titleTxt.height = 10;
        this._titleTxt.htmlText = this._data.title;
        this._titleTxt.y = 0;
        this._titleTxt.setLimitation(1, true);

        this._dateTxt.width = tipWidth;
        this._dateTxt.height = 10;
        this._dateTxt.htmlText = this._data.date;
        this._dateTxt.y = this._titleTxt.y + this._titleTxt.textHeight + this._gapY - 5;

        //this._line.x = (tipWidth - this._line.width) >> 1;
        //this._line.y = this._dateTxt.y + this._dateTxt.height + this._gapY / 2;

        this._previewTxt.width = tipWidth;
        this._previewTxt.htmlText = this._data.preview;
        this._previewTxt.y = this._dateTxt.y + this._dateTxt.textHeight + this._gapY;

        var limitHeight = tipHeight - this._previewTxt.y;
        this._previewTxt.setLimitation(limitHeight, false);
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.NewsListDeviceTips = NewsListDeviceTips;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-12.
 */
(function()
{
    var NewsListRender = function()
    {
        pinetreecom.ListItemBase.call(this);
        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._thumbWidth = 0;
        this._thumbHeight = 0;

        this._thumbnail = null;
        this._tips = null;

        this._previewTxt = null;
        this._icon = null;

        this._isShowing = false;
        this._isActive = false;
        this.mouseChildren = false;
    }

    var p = __extends(NewsListRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, w, h, data);

        this._thumbWidth = data.thumbWidth;
        this._thumbHeight = data.thumbHeight;

        this._thumbnail = new pinetreecom.ShadowImageLoader(this._thumbWidth, this._thumbHeight);
        this._thumbnail.backgroundAlpha = 0;
        this._thumbnail.className = "shadow_20px";
        //this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
        this._thumbnail.useMouseHand = true;
        this.addChild(this._thumbnail);


        if(!pinetree.isDevice)
        {
            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        this._previewTxt = new pinetree.TextField();
        this._previewTxt.useMouseHand = true;
        this._previewTxt.selectable = false;
        this.addChild(this._previewTxt);
        this._previewTxt.alpha = 0;
        this._previewTxt.fontSize = 14;
        this._previewTxt.textColor = pt.bgColor;
        this._previewTxt.htmlText = data.readMoreLabel;

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
        this._icon = new pinetree.TextureImage(tex);
        this._icon.alpha = 0;
        this._icon.buttonMode = true;
        this.addChild(this._icon);
        pinetreecom.ColorUtil.setColor(this._icon, pt.bgColor);
        this._icon.x = (this._thumbWidth - this._icon.width) >> 1;

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        this.buttonMode = true;

        this.alpha = 0;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._tips = new pinetreepages.NewsListTips(this._data, this._itemWidth, this._itemHeight - this._thumbHeight);
            this.addChild(this._tips);

            this._tips.y = this._thumbHeight;
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._thumbWidth - this._previewTxt.width) >> 1;
        }

        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
        else
        {
            this._onImgLoadComplete(null);
        }
    }

    p._onImgLoadComplete = function(img)
    {

    }

    p._onOver = function(evt)
    {
        if(pinetree.isDevice) return;
        //if(evt && evt.elementTarget != this.htmlElement) return;

        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.buttonMode = true;
            this._thumbnail.imageLoader.onOver(this.tweenTime * 3, Quart.easeOut, 1.08);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha: pt.bgAlpha, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._icon.y = y - this._icon.height - gap - 20 + iconOffsetY;
        this._previewTxt.y = y + gap + 20;

        this._icon && TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, y:y - this._icon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});
    }

    p._onOut = function(evt)
    {
        //if(evt && evt.elementTarget != this.htmlElement) return;

        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.onOut(this.tweenTime / 2);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._icon && TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, y:y - this._icon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});
    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentHeight = function()
    {
        return this._itemHeight;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isFullShown)
        {
            this.show();
            this._isActive = true;
        }
        else
        {
            this.hide();
            this._isActive = false;
        }
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(!this.parent)
        {
            this.addToParent();
        }

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
            onComplete:this._onShowComplete, onCompleteParams:[this]});
    }

    p._onShowComplete = function(owner)
    {
        //
    }

    p.hide = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeFromParent();
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onInComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);

        this.alpha = 1;
        this.x = this.originX + pt.stageWidth;
        TweenMax.to(this, time, {x:this.originX, delay:delay,
            ease:transition || this.transition, onComplete:this._onInComplete,
            onCompleteParams:[this, callback]
        });

        this.addToParent();
    };

    p._onInComplete = function(owner, callback)
    {
        if(!owner.mouseEnabled)
        {
            if(owner.x != owner.originX)
            {
                owner.x = owner.originX;
            }
            owner.mouseEnabled = true;
        }
        callback && callback();
    }

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onOutComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        TweenMax.to(this, time, {x:this.originX + pt.stageWidth, delay:delay,
            ease:transition || this.transition, onComplete:this._onOutComplete,
            onCompleteParams:[this, callback]
        });
    };

    p._onOutComplete = function(owner, callback)
    {
        if(!pinetree.isDevice)
        {
            owner.removeFromParent();
        }
        callback && callback();
    }

    p.dispose = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        if(this._icon)
        {
            TweenMax.killTweensOf(this._icon);
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        if(this._previewTxt)
        {
            TweenMax.killTweensOf(this._previewTxt);
            this._previewTxt = null;
        }

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        TweenMax.killTweensOf(this);

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsListRender = NewsListRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-12.
 */
(function()
{
    var NewsListDeviceRender = function()
    {
        pinetreecom.ListItemBase.call(this);
        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._thumbWidth = 0;
        this._thumbHeight = 0;

        this._itemEdge = 30;

        this._thumbnail = null;
        this._tips = null;

        this._previewTxt = null;
        this._icon = null;

        this._isShowing = false;
        this._isActive = false;
        this.mouseChildren = false;
    }

    var p = __extends(NewsListDeviceRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, w, h, data);

        this._thumbWidth = data.thumbWidth;
        this._thumbHeight = data.thumbHeight;

        this._thumbnail = new pinetreecom.ShadowImageLoader(this._thumbWidth, this._thumbHeight);
        this._thumbnail.backgroundAlpha = 0;
        this._thumbnail.className = "shadow_20px";
        //this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
        this._thumbnail.useMouseHand = true;
        this.addChild(this._thumbnail);

        this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
        this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);

        this._previewTxt = new pinetree.TextField();
        this._previewTxt.useMouseHand = true;
        this._previewTxt.selectable = false;
        this.addChild(this._previewTxt);
        this._previewTxt.alpha = 0;
        this._previewTxt.fontSize = 14;
        this._previewTxt.textColor = pt.bgColor;
        this._previewTxt.htmlText = data.readMoreLabel;

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
        this._icon = new pinetree.TextureImage(tex);
        this._icon.alpha = 0;
        this._icon.buttonMode = true;
        this.addChild(this._icon);
        pinetreecom.ColorUtil.setColor(this._icon, pt.bgColor);
        this._icon.x = (this._thumbWidth - this._icon.width) >> 1;

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        this.buttonMode = true;

        this.alpha = 0;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._tips = new pinetreepages.NewsListDeviceTips(this._data);
            this.addChild(this._tips);
            this._tips.x = this._itemWidth + this._itemEdge;
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._thumbWidth - this._previewTxt.width) >> 1;
        }

        if(this._tips)
        {
            this._tips.update(pt.stageWidth - this._thumbWidth - this._itemEdge * 3, this._thumbHeight);
        }

        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.resize = function(sw, sh)
    {
        if(this._tips)
        {
            this._tips.update(sw - this._thumbWidth - this._itemEdge * 3, this._thumbHeight);
        }
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
        else
        {
            this._onImgLoadComplete(null);
        }
    }

    p._onImgLoadComplete = function(img)
    {

    }

    p._onOver = function(evt)
    {
        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.buttonMode = true;
            this._thumbnail.imageLoader.onOver(this.tweenTime * 3, Quart.easeOut, 1.08);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha: pt.bgAlpha, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._icon.y = y - this._icon.height - gap - 20 + iconOffsetY;
        this._previewTxt.y = y + gap + 20;

        this._icon && TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, y:y - this._icon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});
    }

    p._onOut = function(evt)
    {
        //if(evt && evt.elementTarget != this.htmlElement) return;

        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.onOut(this.tweenTime / 2);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._icon && TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, y:y - this._icon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});
    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentHeight = function()
    {
        return this._itemHeight;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isFullShown)
        {
            this.show();
            this._isActive = true;
        }
        else
        {
            this.hide();
            this._isActive = false;
        }
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(!this.parent)
        {
            this.addToParent();
        }

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
            onComplete:this._onShowComplete, onCompleteParams:[this]});
    }

    p._onShowComplete = function(owner)
    {
        //
    }

    p.hide = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeFromParent();
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this.addToParent();

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() - pinetree.getScrollY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this._onInComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);

        if(!this.tweenAlphaByCSS(1, time / 2, delay, "linear", this._onInComplete, [this, callback]))
        {
            TweenMax.to(this, time, {alpha:1, delay:delay,
                ease:transition || this.transition, onComplete:this._onInComplete,
                onCompleteParams:[this, callback]
            });
        }
    };

    p._onInComplete = function(owner, callback)
    {
        if(!owner.mouseEnabled)
        {
            if(owner.x != owner.originX)
            {
                owner.x = owner.originX;
            }
            owner.mouseEnabled = true;
        }
        owner.alpha = 1;
        callback && callback();
    }

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() - pinetree.getScrollY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this._onOutComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        if(!this.tweenAlphaByCSS(0, time / 2, delay, "linear", this._onOutComplete, [this, callback]))
        {
            TweenMax.to(this, time, {alpha:0, delay:delay,
                ease:transition || this.transition, onComplete:this._onOutComplete,
                onCompleteParams:[this, callback]
            });
        }
    };

    p._onOutComplete = function(owner, callback)
    {
        //owner.removeFromParent();
        callback && callback();
    }

    p.dispose = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        if(this._icon)
        {
            TweenMax.killTweensOf(this._icon);
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        if(this._previewTxt)
        {
            TweenMax.killTweensOf(this._previewTxt);
            this._previewTxt = null;
        }

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        TweenMax.killTweensOf(this);

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsListDeviceRender = NewsListDeviceRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-22.
 */
(function()
{
    var NewsImageLoader = function(imageWidth, imageHeight, textWidth, textHeight, textPadding, setting)
    {
        pinetreecom.UIComponent.call(this);

        this._textWidth = textWidth;
        this._textHeight = textHeight;
        this._imageWidth = imageWidth;
        this._imageHeight = imageHeight;
        this._itemHeight = Math.max(this._textHeight, this._imageHeight);
        this._textPadding = textPadding == undefined ? 30 : textPadding;

        this.setting = setting;

        this._devicePadding = 20;

        this._gapX = 15;
        this._gapY = 15;

        this._hasImage = true;

        this.tweenTime = 1.0;
        this.transition = Quart.easeOut;

        this._maxContentWidth = 640;

        this._imageLoader = null;
        this._txtContainer = null;
        this._titleTxt = null;
        this._dateTxt = null;
        this._line = null;

        this._closeBtn = null;

        this.visible = false;

        this.ON_CLOSE = new pinetree.Signal();
        this.ON_TWEEN_COMPLETE = new pinetree.Signal();

        this.registerAutoDispose(this.ON_CLOSE);
        this.registerAutoDispose(this.ON_TWEEN_COMPLETE);

        __defineGetterSetter(this, ["contentWidth", "contentHeight"]);
    }

    var p = __extends(NewsImageLoader, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
            this.addChild(this._imageLoader);

            this._titleTxt = new pinetree.TextField();
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.className += " news_images_title";

            this._dateTxt = new pinetree.TextField();
            this._dateTxt.selectable = false;
            this.addChild(this._dateTxt);
            this._dateTxt.className += " news_date_tip";

            if(pinetree.isDevice)
            {
                this._txtContainer = new pinetreecom.DeviceTextContainer(this._textWidth, this._bgColor, 0, true, true);
                this.addChild(this._txtContainer);
                this._txtContainer.padding = this._devicePadding;

                this._imageLoader.x = this._devicePadding;
                this._imageLoader.y = this._devicePadding;
            }
            else
            {
                this._line = new pinetree.Quad();
                this.addChild(this._line);
                this._line.color = pt.onOverColor;
                this._line.width = 30;
                this._line.height = 2;

                this._txtContainer = new pinetreecom.TextContainer(this._textWidth, this._textHeight,
                    pt.bgColor, 0, true, true, false);
                this._txtContainer.enabled = false;

                this._txtContainer.paddingTop = 0;
                this._txtContainer.paddingBottom = 0;
                this._txtContainer.paddingLeft = this._textPadding;
                this._txtContainer.paddingRight = this._textPadding + this._gapX;
            }

            //this._txtContainer.alpha = 0;
            this.addChild(this._txtContainer);
            this._txtContainer.sliderBGAlpha = 0;
            this._txtContainer.init();
            this._txtContainer.scrollGapX = this._gapX;
            this._txtContainer.scrollerHeight = this._txtContainer.infoScrollHeight;

            this.registerAutoDispose(this._txtContainer);

            var closeTex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CLOSE_ICON);
            this._closeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            this._closeBtn.setTextures(closeTex);
            this._closeBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this.addChild(this._closeBtn);
            this._closeBtn.y = - closeTex.sourceHeight - 30;
            //this._closeBtn.show(0);
            this.registerAutoDispose(this._closeBtn);
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p.setData = function(vo)
    {
        if(!vo) return;

        this.reset();

        this.visible = true;

        this._hasImage = !!vo.imageurl;

        if(this._hasImage)
        {
            this._imageLoader.load(vo.imageurl);
        }

        this._titleTxt.htmlText = vo.title;
        this._dateTxt.htmlText = vo.date;
        this._txtContainer.information = vo.description;

        this.ON_TWEEN_COMPLETE.dispatch();

        this.update();
    }

    p.update = function()
    {
        if(pinetree.isDevice)
        {
            var contentWidth = pt.stageWidth;
            if(contentWidth > this._maxContentWidth) contentWidth = this._maxContentWidth;
            this._txtContainer.contentWidth = contentWidth;
            this._txtContainer.scrollGapX = 0;

            this._titleTxt.x = this._devicePadding;
            this._titleTxt.y = pt.TOP_HEIGHT + this._imageHeight;

            this._dateTxt.x = this._devicePadding;
            this._dateTxt.y = this._titleTxt.y + this._titleTxt.height;

            this._txtContainer.x = 0;
            this._txtContainer.y = this._dateTxt.y + this._dateTxt.height;
            this._txtContainer.useScroll = false;

            this.width = contentWidth;
            this.height = this._txtContainer.y + this._txtContainer.contentHeight;
        }
        else
        {
            this._titleTxt.x = this._imageWidth + this._textPadding;
            this._titleTxt.y = 0;

            this._dateTxt.x = this._imageWidth + this._textPadding;
            this._dateTxt.y = this._titleTxt.y + this._titleTxt.height + this._gapY;

            this._line.x = this._imageWidth + this._textPadding;
            this._line.y = this._dateTxt.y + this._dateTxt.height + this._gapY;

            this._txtContainer.useScroll = true;
            this._txtContainer.x = this._imageWidth;
            this._txtContainer.y = this._line.y + this._line.height + this._gapY;

            var textHeight = this._textHeight - this._txtContainer.y;
            this._txtContainer.contentHeight = textHeight;

            this.width = this._imageWidth + this._textWidth;
            this.height = this._itemHeight;
        }
    }

    p.toCenter = function(setX, setY)
    {
        if(pinetree.isDevice) return;

        if(setX)
        {
            var sx = (pt.stageWidth - (this._textWidth + this._imageWidth)) >> 1;
            this.x = pinetreecom.CommonUtil.getCurrentX(this, sx);
        }

        if(setY)
        {
            var sy = ((pt.stageHeight - pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._itemHeight) >> 1) + pt.TOP_HEIGHT;
            this.y = pinetreecom.CommonUtil.getCurrentY(this, sy);
        }
    }
    
    p.toOutTop = function()
    {
        if(pinetree.isDevice) return;

        var sx = (pt.stageWidth - (this._textWidth + this._imageWidth)) >> 1;
        this.x = pinetreecom.CommonUtil.getCurrentX(this, sx);

        var sy = - this._itemHeight - 10;
        this.y = pinetreecom.CommonUtil.getCurrentY(this, sy);
    }

    p.toOutBottom = function()
    {
        if(pinetree.isDevice) return;

        var sx = (pt.stageWidth - (this._textWidth + this._imageWidth)) >> 1;
        this.x = pinetreecom.CommonUtil.getCurrentX(this, sx);

        var sy = pt.stageHeight + 30;
        this.y = pinetreecom.CommonUtil.getCurrentY(this, sy);
    }

    p.tweenToCenter = function(time, transition, callback)
    {
        if(pinetree.isDevice)
        {
            callback && callback();
            return;
        }

        this._closeBtn.hide(0);

        time = __defaultSet(time, this.tweenTime);
        transition = __defaultSet(transition, this.transition);

        var sx = (pt.stageWidth - (this._textWidth + this._imageWidth)) >> 1;
        var sy = ((pt.stageHeight - pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._itemHeight) >> 1) + pt.TOP_HEIGHT;

        this.x =  pinetreecom.CommonUtil.getCurrentX(this, sx);

        var y = pinetreecom.CommonUtil.getCurrentY(this, sy);
        TweenMax.to(this, time, {y:y, ease:transition,
            onComplete:this._onTweenToCenterComplete, onCompleteParams:[this, callback]});
    }

    p._onTweenToCenterComplete = function(owner, callback)
    {
        //owner._closeBtn.show(this.tweenTime);
        callback && callback();
    }

    p.tweenOutAtTop = function(time, transition, callback)
    {
        if(pinetree.isDevice)
        {
            callback && callback();
            return;
        }

        this._closeBtn.hide(this.tweenTime / 2);

        time = __defaultSet(time, this.tweenTime);
        transition = __defaultSet(transition, this.transition);

        var sy = - this._itemHeight - 50;
        var y = pinetreecom.CommonUtil.getCurrentY(this, sy);
        TweenMax.to(this, time, {y:y, ease:transition, onComplete:callback});
    }

    p.tweenOutAtBottom = function(time, transition, callback)
    {
        if(pinetree.isDevice)
        {
            callback && callback();
            return;
        }

        if(!this.stage) return;

        this._closeBtn.hide(this.tweenTime / 2);

        time = __defaultSet(time, this.tweenTime);
        transition = __defaultSet(transition, this.transition);

        var sy = pt.stageHeight + 50 + this._closeBtn.height;
        var y = pinetreecom.CommonUtil.getCurrentY(this, sy);
        TweenMax.to(this, time, {y:y, ease:transition, onComplete:callback});
    }

    p.getContentWidth = function()
    {
        return this._imageWidth + this._textWidth;
    }

    p.getContentHeight = function()
    {
        if(pinetree.isDevice)
            return this._txtContainer.y + this._txtContainer.contentHeight;
        return this._itemHeight;
    }

    p.reset = function()
    {
        this._imageLoader.reset();
        this._txtContainer.reset();

        this.visible = false;
    }

    p.setVisible = function(value)
    {
        pinetreecom.UIComponent.prototype.setVisible.call(this, value);

        if(this._txtContainer)
        {
            this._txtContainer.enabled = value;
        }
    }

    p._onClose = function()
    {
        this.ON_CLOSE && this.ON_CLOSE.dispatch();
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this);

        this.setting = null;

        if(this._imageLoader)
        {
            pinetreecom.DelayCaller.removeByOwner(this._imageLoader);
            this._imageLoader.dispose();
            this._imageLoader = null;
        }

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreepages.NewsImageLoader = NewsImageLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var NewsBase = function()
    {
        pinetreemvc.ViewComponentBase.call(this);

        this.data = null;

        this.linkId = "";
        this.linkParams = null;

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(NewsBase, pinetreemvc.ViewComponentBase);

    p.initData = function(data)
    {
        this.data = data || [];
    }

    p.change = function(data)
    {

    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        this.linkId = linkId;
        this.linkParams = linkParams;
    }

    p.dispose = function()
    {
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_CHANGE = null;
        this.ON_LOAD_COMPLETE = null;

        this.data = null;
        this.linkId = "";
        this.linkParams = null;

        pinetreemvc.ViewComponentBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsBase = NewsBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var NewsImages = function()
    {
        pinetreepages.NewsBase.call(this);

        this._originParent = null;

        /*this.EDGE_CONST_SMALL = 30 * 2;
        this.EDGE_CONST_NORMAL = 100 * 2;

        this._imageEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;*/

        this._textWidth = 450;
        this._textHeight = 350;
        this._imageWidth = 0;
        this._imageHeight = 0;
        this._itemHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._closeBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;
        this._closeBtnHeight = 0;

        this._isInited = false;
        this._isTweening = false;

        this._currentIndex = 0;
        this._totalCount = 0;

        this._imageLoader = null;

        this._isToPrev = false;

        this._loader1 = null;
        this._loader2 = null;

        this.sliderWidth = pinetree.isDevice ? 0 : 150;
        this.sliderHeight = pinetree.isDevice ? 0 : 10;

        this.START_CONST_SMALL = 30;
        this.START_CONST_NORMAL = 100;
        this.sliderStartX = pinetree.isSmallMode ? this.START_CONST_SMALL : this.START_CONST_NORMAL;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.onOutColor;
        this.sliderBGAlpha = 0.1;

        this._useKeyControl = true;

        this._bgAlpha = pt.bgAlpha;

        this._pnBtns = null;
        this._closeBtn = null;
        this._triggerRect = null;
        this._hscroller = null;
        this._container = null;

        this._closeButtonOffsetY = 0;

        if(pt.isAlphaMode) this.alpha = pt.ALPHA_MODE_VALUE;

        __defineGetterSetter(this, ["isInited"]);
    }

    var p = __extends(NewsImages, pinetreepages.NewsBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;

            var prevTex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON);
            var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            prevBtn.setTextures(prevTex);
            var nextTex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON);
            var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            nextBtn.setTextures(nextTex);
            this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false);
            this._pnBtns.useKeyArrow = this._useKeyControl;
            this._pnBtns.onOverColor = pt.onOverColor;
            this._pnBtns.onOutColor = pt.onOutColor;
            this._pnBtns.hide(0);
            this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);

            var closeTex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CLOSE_ICON);
            this._closeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            this._closeBtn.className += ' news_img_close_btn';
            this._closeBtn.setTextures(closeTex);
            this._closeBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this.addChild(this._closeBtn);

            this._prevBtnWidth = prevTex.sourceWidth;
            this._nextBtnWidth = nextTex.sourceWidth;
            this._closeBtnWidth = closeTex.sourceWidth;
            this._prevBtnHeight = prevTex.sourceHeight;
            this._nextBtnHeight = nextTex.sourceHeight;
            this._closeBtnHeight = closeTex.sourceHeight;

            if(this._useKeyControl)
            {
                pinetreecom.KeyboardUtil.listen(this, [pinetree.Keyboards.ESCAPE], this._onKeyUp);
            }
        }
        pinetreepages.NewsBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.NewsBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._totalCount = this.data.length;

        this._imageWidth = this.facade.$.setting.imageWidth;
        this._imageHeight = this.facade.$.setting.imageHeight;

        this._textWidth = this.facade.$.setting.textWidth;
        this._textHeight = this.facade.$.setting.textHeight;

        this._itemHeight = Math.max(this._textHeight, this._imageHeight);

        this._closeButtonOffsetY = this.facade.$.setting.closeButtonOffsetY;

        this._initUI();
        this.visible = false;
    }

    p._initUI = function()
    {
        this._container = new pinetree.Sprite();

        this._hscroller = new pinetreecom.HScroller(this.sliderWidth, this.sliderHeight, 1, 1,
            this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
            this.sliderBGColor, this.sliderBGAlpha, null, false, false, false);
        this.addChild(this._hscroller);
        this._hscroller.ON_CHANGE.add(this, this._onScrollProgress);

        this._hscroller.addTarget(this._container, 0, 0, 0);

        this._loader1 = new pinetreepages.NewsImageLoader(this._imageWidth, this._imageHeight, this._textWidth, this._textHeight,
            40, this.facade.$.setting);
        this._loader1.alpha = 0;
        //this._loader1.ON_CLOSE.add(this, this._onClose);
        this._container.addChild(this._loader1);
        this.registerAutoDispose(this._loader1);

        this._loader2 = new pinetreepages.NewsImageLoader(this._imageWidth, this._imageHeight, this._textWidth, this._textHeight,
            40, this.facade.$.setting);
        this._loader2.alpha = 0;
        //this._loader2.ON_CLOSE.add(this, this._onClose);
        this._container.addChild(this._loader2);
        this.registerAutoDispose(this._loader2);

        if(pinetree.isSmallMode)
            pinetree.staticStage.addChild(this._pnBtns);
        else
            this.addChild(this._pnBtns);

        this._triggerRect = new pinetreecom.TriggerRect(1, 1, 0x00ff00, 0);
        this.addChildAt(this._triggerRect, 0);

        this._hscroller.reset();
        this._hscroller.enabled = false;
        this._hscroller.scrollMC.alpha = 0;

        if(!pinetree.isDevice)
        {
            this._hscroller.mouseWheelArea = this._triggerRect;
            this._hscroller.enabled = true;
            this._hscroller.show();
        }
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p._dragPrev = function(target)
    {
        if(this._currentIndex <= 0)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = true;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
    }

    p._dragNext = function(target)
    {
        if(this._currentIndex >= this._totalCount - 1)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = false;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }
    }

    p._dragBack = function(target)
    {
        target && target.tweenToCenter();
    }

    p.load = function(index)
    {
        this._currentIndex = index;

        if(!this._isInited)
        {
            this._isToPrev = true;
            this.transitionIn(Delegate.create(this, this.load, index));
            return;
        }

        this._imageLoader = this._getFreeLoader();
        //pt.dragPrevNext.listen(this._imageLoader, this, this._dragPrev, this._dragNext,
            //pinetree.isDevice ? null : this._dragBack, pinetree.isDevice ? "x" : "y", false);

        var vo = this.data[index];

        if(this._isToPrev)
        {
            this._imageLoader.toOutTop();
        }
        else
        {
            this._imageLoader.toOutBottom();
        }

        this._imageLoader.alpha = 1;
        this._imageLoader.visible = true;
        this._imageLoader.setData(vo);
        this._imageLoader.update();

        if(pinetree.isSmallMode)
        {
            this._imageLoader.tweenToCenter(this.tweenTime * 1.2, Quart.easeOut, Delegate.create(this, this._onTweenInComplete));
            this._imageLoader.x = 0;
        }
        else
        {
            this._imageLoader.tweenToCenter(this.tweenTime * 1.2, Quart.easeOut, Delegate.create(this, this._onTweenInComplete));
        }
    }

    p._onTweenInComplete = function(unused)
    {
        this.mouseChildren = this.mouseEnabled = true;
        this._pnBtns.useMouseWheel = !pinetree.isDevice;

        this._isTweening = false;

        if(pinetree.isDevice)
        {
            window.scrollTo(0, 0);
            this.facade.$.listUI.removeFromParent();
        }

        this.redraw();
    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p._onClickPNButton = function(e)
    {
        if(!this._isInited) return;

        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
        else
        {
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.NewsBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(!this._isInited || this._isTweening) return;

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(isNaN(index))
            {
                this._onClose(null);
            }
            else if(this._currentIndex != index - 1 && index > 0 && index <= this._totalCount)
            {
                this._isToPrev = this._currentIndex > index - 1;

                this._currentIndex = index - 1;

                this.mouseChildren = this.mouseEnabled = false;
                this._pnBtns.useMouseWheel = false;

                if(this._isToPrev)
                    this._imageLoader.tweenOutAtBottom(this.tweenTime, Cubic.easeOut);
                else
                    this._imageLoader.tweenOutAtTop(this.tweenTime, Cubic.easeOut);

                pinetreecom.DelayCaller.removeByHandler(this, this.load);
                pinetreecom.DelayCaller.delayCall(this, this.load, this.tweenTime * 0.15, [this._currentIndex]);

                this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._totalCount - 1);
            }
        }
        else
        {
            this._onClose(null);
        }
    }

    p._getFreeLoader = function()
    {
        if(this._imageLoader == this._loader1)
            return this._loader2;
        else
            return this._loader1;
    }

    p.onControlClose = function(evt)
    {
        if(!this._isInited) return;
        this._onClose(null);
    }

    p._onKeyUp = function(keyCode)
    {
        switch(keyCode)
        {
            case pinetree.Keyboards.ESCAPE:
                this._onClose(null);
                break;
        }
    }

    p._onClose = function(evt)
    {
        if(!this._isInited) return;

        this._isInited = false;

        this.mouseChildren = this.mouseEnabled = false;
        this._pnBtns.useMouseWheel = false;

        this.transitionOut();

        pinetreesite.siteController.changeDeeplinking(this.linkId);

        pinetreecom.DelayCaller.delayCall(this, this._closeComplete, this.tweenTime * 0.7, null, true);
    }

    p._closeComplete = function()
    {
        this.visible = false;
        this.facade.$.listUI.backToOriginParent();
        pt.isOverTextContainer = false;
    }

    p.getIsInited = function()
    {
        return this._isInited;
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        //this._imageEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;
        this.sliderStartX = pinetree.isSmallMode ? this.START_CONST_SMALL : this.START_CONST_NORMAL;

        var freeLoader = this._getFreeLoader();
        if(freeLoader)
        {
            freeLoader.alpha = 0;
        }

        if(pinetree.isDevice)
        {
            if(freeLoader)
            {
                freeLoader.reset();
                freeLoader.x = freeLoader.y = 0;
            }

            if(this._imageLoader)
            {
                this._imageLoader.x = 0;
                this._imageLoader.y = pt.TOP_HEIGHT;
                this._imageLoader.update();

                this.height = this._imageLoader.contentHeight;

                if(this._height < sh - pt.TOP_HEIGHT - this.START_CONST_SMALL * 2)
                {
                    this._container.y = (sh - pt.TOP_HEIGHT - this.START_CONST_SMALL * 2 - this._height) >> 1;
                }
                else
                {
                    this._container.y = 0;
                }

                if(this._textWidth > 640)
                {
                    this._container.x = (sw - 640) >> 1;
                }
                else
                {
                    this._container.x = (sw - this._textWidth) >> 1;
                }
            }
        }
        else
        {
            var contentWidth = this._imageWidth + this._textWidth + this.sliderStartX * 2;

            var x = ((sw - contentWidth) >> 1);
            if(x < this.sliderStartX)
            {
                x = this.sliderStartX;
            }

            this._hscroller.setSize(contentWidth, sh, sw,
                ((sw -this.sliderWidth) >> 1) - x, this._itemHeight + 30);

            this._hscroller.x = x;
            this._hscroller.y = (sh + pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._itemHeight) >> 1;
            this._hscroller.scrollerWidth = this.sliderWidth;

            if(this._triggerRect)
            {
                this._triggerRect.width = sw;
                this._triggerRect.height = sh;
            }

            if(this._imageLoader)
            {
                if(pinetree.isSmallMode)
                {
                    this._imageLoader.x = 0;
                    this._imageLoader.y = 0;
                }
                else
                {
                    this._imageLoader.toCenter(true, true);
                }

                this._imageLoader.update();
            }
        }

        if(pinetree.isSmallMode)
        {
            this._pnBtns.visible = false;
            this._closeBtn.visible = false;

            pt.controlBtns.infoVisible = false;
            pt.controlBtns.closeVisible = true;
            pt.controlBtns.show(0);
            pt.controlBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._totalCount - 1);
            pt.refreshControlBtns();
        }
        else
        {
            pt.controlBtns.hide(0);

            this._pnBtns.visible = true;
            this._closeBtn.visible = true;

            if(!this._pnBtns.isShowing)
                this._pnBtns.show();
            if(!this._closeBtn.isShowing)
                this._closeBtn.show();

            if(this._pnBtns.parent != this)
            {
                this.addChild(this._pnBtns);
            }

            var newX = 30;

            this._pnBtns.prevBtn.x = newX;
            this._pnBtns.nextBtn.x = sw - newX - this._nextBtnWidth;
            this._pnBtns.x = 0;
            this._pnBtns.y = (sh - pt.FOOTER_HEIGHT - this._prevBtnHeight) >> 1;

            this._closeBtn.x = sw - this._closeBtnWidth - 30;
            this._closeBtn.y = (pt.config.footerPosition == "bottom" ? 30 : pt.TOP_HEIGHT + 30) + this._closeButtonOffsetY;

            this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._totalCount - 1);
        }
    }

    p.transitionIn = function(callback)
    {
        this._isInited = true;
        this._isTweening = true;

        this.visible = true;

        if(pinetree.isDevice)
        {

        }
        else
        {
            this._hscroller.tweenScrollerAlpha(1, this.tweenTime);
        }

        this.redraw();
        pinetreesite.siteController.bringToTop(this);

        if(!pinetree.isSmallMode)
        {
            this._pnBtns.show();
            this._closeBtn.show();
        }

        pt.controlBtns.listen(this);

        callback && callback();
    }

    p.predisposeOut = function(callback)
    {
        this.transitionOut(Delegate.create(this, this._predisposeOutComplete, callback));
    }

    p._predisposeOutComplete = function(callback)
    {
        callback && callback();
        this.dispose();
    }

    p.transitionOut = function(callback)
    {
        this._pnBtns.hide(this.tweenTime * 0.5);
        this._closeBtn.hide(this.tweenTime * 0.5);

        pt.controlBtns.cancel(this);
        pt.controlBtns.hide();

        this._pnBtns.useMouseWheel = false;
        if(pinetree.isDevice)
        {
            TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {alpha:0, ease:Cubic.easeOut,
                onComplete:callback});

            if(!pinetree.isDevice)
            {
                this._hscroller.tweenScrollerAlpha(0, this.tweenTime * 0.5);
            }
        }
        else
        {
            this._hscroller.tweenScrollerAlpha(0, this.tweenTime * 0.5);
            this._imageLoader.tweenOutAtBottom(this.tweenTime, Cubic.easeInOut, callback);
        }

        var freeLoader = this._getFreeLoader();
        freeLoader.alpha = 0;

        this._imageLoader = null;
    }

    p.predispose = function()
    {
        if(this._isInited) return;
        this.dispose();
    }

    p.dispose = function()
    {
        this._isInited = false;

        pt.controlBtns.cancel(this)

        pinetreecom.KeyboardUtil.cancelByOwner(this);

        pinetreecom.DelayCaller.removeByOwner(this);

        this._originParent && this.addTo(this._originParent);

        if(this._hscroller)
        {
            this._hscroller.removeFromParent(true);
            this._hscroller = null;
        }

        this._pnBtns && this._pnBtns.removeFromParent(true);
        this._pnBtns = null;

        if(this._imageLoader)
        {
            TweenMax.killTweensOf(this._imageLoader);
            this._imageLoader = null;
        }

        if(this._closeBtn)
        {
            this._closeBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this._closeBtn.removeFromParent(true);
            this._closeBtn = null;
        }

        pt.dragPrevNext.remove();

        this.facade.$.imagesUI = null;
        pinetreepages.NewsBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsImages = NewsImages;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var NewsList = function()
    {
        pinetreepages.NewsBase.call(this);

        this._currentIndex = 0;
        this._dataCount = 0;

        this._gap = 20;

        this._isTweening = false;

        this.EDGE_CONST_SMALL = 30 * 2;
        this.EDGE_CONST_NORMAL = 100 * 2;

        this._itemEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        this._itemWidth = 0;
        this._itemHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;

        this._currentColumn = 0;

        this._currentListContentWidth = 0;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._originParent = null;

        this._listContainer = null;
        this._buttonList = null;
        this._pnBtns = null;

        this._isInited = false;

        this.visible = false;

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(NewsList, pinetreepages.NewsBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;
        }
        pinetreepages.NewsBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.NewsBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = data.length;

        this._itemWidth = this.facade.$.setting.itemWidth;
        this._itemHeight = this.facade.$.setting.itemHeight;
        this._gap = this.facade.$.setting.gap;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._initUI();

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._initUI = function()
    {
        this._listContainer = new pinetreecom.ListContainer();
        this.addChild(this._listContainer);
        this._listContainer.animateTime = this.tweenTime;
        this._listContainer.animateDelay = 0.1 * this.tweenTime;
        this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
        this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
        this._listContainer.ON_OVER.add(this, this.onOverItem);
        this._listContainer.ON_OUT.add(this, this.onOutItem);
        this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
        this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
        this._listContainer.onlyFullShown = true;
        this._listContainer.useRealPosition = false;
        this._listContainer.useRealStagePos = false;
        this._listContainer.showAllWhileDevice = false;
        this._listContainer.useIntPosition = true;

        this._listContainer.reset();

        this._listContainer.setUpWith(pinetreepages.NewsListRender, this._itemWidth, this._itemHeight,
            this._gap, 0, pinetreecom.AlignUtil.ALIGN_HORIZONTAL, 1, this.data,
            pt.stageWidth, pt.stageHeight);

        this._buttonList = new pinetreecom.ButtonList(pinetreecom.MiniCircle, this.data.length);
        this.addChild(this._buttonList);

        this._buttonList.ON_CLICK.add(this, this.onClickButton);
        this._buttonList.onOverColor = pt.onOverColor;
        this._buttonList.onOutColor = pt.onOutColor;
        this._buttonList.onOverAlpha = 1.0;
        this._buttonList.onOutAlpha = 0.2;
        this._buttonList.gap = pinetree.isDevice ? 10 : 10;
        this._buttonList.itemSize = pinetree.isDevice ? 5 * 2 : 5 * 2;
        this._buttonList.alignType = pinetreecom.ButtonList.ALIGN_HORIZONTAL;
        this._buttonList.init();
        this._buttonList.visible = this._pageTotal > 1;
        this._buttonList.setSelectBtn(0);

        var prevTex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON);
        var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
        prevBtn.setTextures(prevTex);
        var nextTex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON);
        var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
        nextBtn.setTextures(nextTex);
        this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false);
        this._pnBtns.onOverColor = pt.onOverColor;
        this._pnBtns.onOutColor = pt.onOutColor;
        this._pnBtns.hide(0);
        this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);

        this._prevBtnWidth = prevTex.sourceWidth;
        this._nextBtnWidth = nextTex.sourceWidth;
        this._prevBtnHeight = prevTex.sourceHeight;
        this._nextBtnHeight = nextTex.sourceHeight;

        this.addChild(this._pnBtns);

        this.enabled = false;
    }

    p.onClickButton = function(e)
    {
        if(e.index == this._pageIndex)
        {
            return;
        }

        this._pageIndex = e.index;
        this._tweenListPosition();

        this._pnBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
    }

    p._tweenListPosition = function()
    {
        var x = this._pageIndex * - 1 * (this._currentListContentWidth + this._gap);
        this._listContainer.updateCurrentPos(x);
        TweenMax.to(this._listContainer.itemContainer, this.tweenTime, {x:x, ease:Quart.easeOut});
        this._listContainer.mouseChildren = false;
        pinetreecom.DelayCaller.delayCall(this, this.setEnabled, this.tweenTime * 0.8, [true], true);
        this.redraw();
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        this._pnBtns.useMouseWheel = value && !pinetree.isSmallMode;
        this._pnBtns.useKeyArrow = value && !pinetree.isSmallMode;
        this._listContainer.mouseChildren = true;
    }

    p.tweenInComplete = function()
    {

    }

    p.tweenOutComplete = function()
    {

    }

    p.onOverItem = function(index)
    {

    }

    p.onOutItem = function(index)
    {

    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p._onClickPNButton = function(e)
    {
        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._pageIndex --;
        }
        else
        {
            this._pageIndex ++;
        }

        if(this._pageIndex >= 0 && this._pageIndex < this._pageTotal)
        {
            this._tweenListPosition();
            this._buttonList.setSelectBtn(this._pageIndex);
        }
    }

    p.onClickThumbnail = function(index)
    {
        this._currentIndex = index;

        this.enabled = false;
        this.animateOut(Delegate.create(this, this._onGoToImages));
    }

    p._onGoToImages = function()
    {
        this.removeFromParent();
        pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 1]);
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.NewsBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(this._isInited)
        {
            this.animateOut(Delegate.create(this, this.changeLinkParams, linkId, linkParams));
            return;
        }

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(!isNaN(index) && this.facade.$.imagesUI && !this.facade.$.imagesUI.isInited)
            {
                if(index > 0 && index <= this._dataCount)
                {
                    this.enabled = false;
                    this.ON_CHANGE.dispatch(index - 1);

                    pt.controlBtns.cancel(this);
                }
            }
        }
    }

    p.backToOriginParent = function()
    {
        this._originParent.addChild(this);
        this.animateIn();
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        this._itemEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        var w = sw - this._itemEdge;
        if(w < this._itemWidth)
        {
            w = this._itemWidth + this._itemEdge;
        }
        this._listContainer.resize(w, sh);

        var column = Math.floor((sw - this._itemEdge + this._gap) / (this._itemWidth + this._gap));
        if(column < 1) column = 1;

        if(this._currentColumn != column)
        {
            this._currentColumn = column;
            this._currentListContentWidth = (this._itemWidth + this._gap) * column - this._gap;

            var itemIndex = this._pageIndex * this._pageTotal;
            if(itemIndex > this._dataCount - 1)
            {
                itemIndex = this._dataCount - 1;
            }
            var pageIndex = Math.floor(itemIndex / column);

            this._pageTotal = Math.ceil(this._dataCount / column);
            this._buttonList.count = this._pageTotal;
            this._buttonList.visible = this._pageTotal > 1;

            if (pageIndex != this._pageIndex)
            {
                this._pageIndex = pageIndex;
                this._buttonList.setSelectBtn(this._pageIndex);
                this._tweenListPosition();
            }
        }

        this._listContainer.x = (sw - this._currentListContentWidth) >> 1;
        this._listContainer.y = (sh - pt.FOOTER_HEIGHT - this._itemHeight) >> 1;

        if (this._buttonList.visible)
        {
            this._buttonList.x = (sw - this._buttonList.contentWidth + this._buttonList.buttonSize) >> 1;
            var btnMaxY = sh - this._buttonList.contentHeight - pt.FOOTER_HEIGHT
                + Math.floor(this._buttonList.buttonSize / 2) - 20;
            var y = this._listContainer.y + this._itemHeight + 100;
            if(y > btnMaxY) y = btnMaxY;
            this._buttonList.y = y;
        }

        if(pinetree.isSmallMode)
        {
            this._pnBtns.visible = false;

            pt.controlBtns.infoVisible = false;
            pt.controlBtns.closeVisible = false;
            pt.controlBtns.show(0);
            pt.controlBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
            pt.refreshControlBtns();
        }
        else
        {
            pt.controlBtns.hide(0);

            this._pnBtns.visible = true;

            if(!this._pnBtns.isShowing)
                this._pnBtns.show();

            if(this._pnBtns.parent != this)
            {
                this.addChild(this._pnBtns);
            }

            var newX = 30;

            this._pnBtns.prevBtn.x = newX;
            this._pnBtns.nextBtn.x = sw - newX - this._nextBtnWidth;
            this._pnBtns.x = 0;
            this._pnBtns.y = (sh + pt.TOP_HEIGHT - pt.FOOTER_HEIGHT - this._prevBtnHeight) >> 1;

            this._pnBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
        }
    }

    p.animateIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        if(!pinetree.isSmallMode)
            this._pnBtns.show();

        this._listContainer.animateDelay = 0.05 * this.tweenTime;
        pinetreecom.DelayCaller.delayAfterFrames(this._listContainer, this._listContainer.animationIn, 10,
            [pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM,  this.tweenTime, Cubic.easeOut]);

        pinetreecom.DelayCaller.delayCall(this, this._onAnimateInComplete, this.tweenTime, null, true);
    }

    p._onAnimateInComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;

        pt.controlBtns.listen(this);

        if(this._buttonList)
        {
            this._buttonList.show();
        }
    }

    p.animateOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        pt.controlBtns.cancel(this);

        this._pnBtns.hide(this.tweenTime * 0.5);

        if(this._buttonList)
            this._buttonList.hide();

        this._listContainer.animateDelay = 0.05 * this.tweenTime;
        this._listContainer.animationOut(pinetreecom.ListBase.ANI_DIRECTION_BOTTOM2TOP,
            this.tweenTime * 1.2, Cubic.easeInOut, callback);
    }

    p.transitionIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        if(this.linkParams)
        {
            this.changeLinkParams(this.linkId, this.linkParams);
        }
        else
        {
            this._listContainer.y = -this._itemHeight;

            this._listContainer.animateDelay = 0;
            this._listContainer.animationIn(pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM, 0, Cubic.easeOut);

            this._listContainer.resize(pt.stageWidth - this._itemEdge, pt.stageHeight);

            var y = (pt.stageHeight - pt.FOOTER_HEIGHT - this._itemHeight) >> 1;
            TweenMax.to(this._listContainer, this.tweenTime * 1.2, {
                y: y, ease: Quart.easeOut,
                onComplete: Delegate.create(this, this._onAniComplete)
            });
        }
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;

        pt.controlBtns.listen(this);

        if(!pinetree.isSmallMode)
            this._pnBtns.show();

        if(this._buttonList)
        {
            this._buttonList.show();
        }
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        pt.controlBtns.cancel(this);

        this._pnBtns.hide(this.tweenTime * 0.5);

        pt.controlBtns.hide();

        if(this._buttonList)
            this._buttonList.hide();

        TweenMax.to(this._listContainer, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
            onComplete:callback});
    }

    p.predispose = function()
    {
        this.enabled = false;

        if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
        {
            this.facade.$.imagesUI.predisposeOut(Delegate.create(this, this.dispose));
        }
        else if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        pt.controlBtns.hide(0);
        pt.controlBtns.cancel(this);

        this._buttonList && this._buttonList.dispose();
        this._buttonList = null;

        this._pnBtns && this._pnBtns.removeFromParent(true);
        this._pnBtns = null;

        this._listContainer && this._listContainer.dispose();
        this._listContainer = null;

        this._originParent = null;

        this.facade.$.listUI = null;
        pinetreepages.NewsBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsList = NewsList;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var NewsListDevice = function()
    {
        pinetreepages.NewsBase.call(this);

        this._currentIndex = 0;
        this._dataCount = 0;

        this._gap = 20;

        this._isTweening = false;

        this.EDGE_CONST_SMALL = 30;
        this._itemEdge = this.EDGE_CONST_SMALL;

        this._itemWidth = 0;
        this._itemHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;

        this._oldScrollX = 0;
        this._oldScrollY = 0;

        this._currentColumn = 0;

        this._currentListContentWidth = 0;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._originParent = null;

        this._listContainer = null;
        this._buttonList = null;
        this._pnBtns = null;

        this._isInited = false;

        this.visible = false;

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(NewsListDevice, pinetreepages.NewsBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;
        }
        pinetreepages.NewsBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.NewsBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = data.length;

        this._itemWidth = this.facade.$.setting.itemWidth;
        this._itemHeight = this.facade.$.setting.itemHeight;
        this._gap = this.facade.$.setting.gap;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._initUI();

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._initUI = function()
    {
        this._listContainer = new pinetreecom.ListContainer();
        this.addChild(this._listContainer);
        this._listContainer.animateTime = this.tweenTime;
        this._listContainer.animateDelay = 0.1 * this.tweenTime;
        this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
        this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
        this._listContainer.ON_OVER.add(this, this.onOverItem);
        this._listContainer.ON_OUT.add(this, this.onOutItem);
        this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
        this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
        this._listContainer.onlyFullShown = true;
        this._listContainer.useRealPosition = false;
        this._listContainer.useRealStagePos = false;
        this._listContainer.showAllWhileDevice = true;
        this._listContainer.useIntPosition = true;

        this._listContainer.reset();

        this._listContainer.setUpWith(pinetreepages.NewsListDeviceRender, this._itemWidth, this._thumbHeight,
            0, this._gap, pinetreecom.AlignUtil.ALIGN_VERTICAL, 1, this.data,
            pt.stageWidth, pt.stageHeight);

        this.enabled = false;
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        this._listContainer.mouseChildren = true;
    }

    p.tweenInComplete = function()
    {

    }

    p.tweenOutComplete = function()
    {

    }

    p.onOverItem = function(index)
    {

    }

    p.onOutItem = function(index)
    {

    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p.onClickThumbnail = function(index)
    {
        this._currentIndex = index;

        this.enabled = false;
        this.animateOut(Delegate.create(this, this._onGoToImages));
    }

    p._onGoToImages = function()
    {
        this.removeFromParent();
        pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 1]);
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.NewsBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(this._isInited)
        {
            this.animateOut(Delegate.create(this, this.changeLinkParams, linkId, linkParams));
            return;
        }

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(!isNaN(index) && this.facade.$.imagesUI && !this.facade.$.imagesUI.isInited)
            {
                if(index > 0 && index <= this._dataCount)
                {
                    this.enabled = false;
                    this.ON_CHANGE.dispatch(index - 1);
                }
            }
        }
    }

    p.backToOriginParent = function()
    {
        this._originParent.addChild(this);
        this.animateIn();

        window.scrollTo(this._oldScrollX, this._oldScrollY);
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        this._listContainer.resize(sw, sh - pt.TOP_HEIGHT);
        this._listContainer.x = this._itemEdge;
        this._listContainer.y = this._itemEdge + pt.TOP_HEIGHT;
    }

    p.animateIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        this._listContainer.animateDelay = 0.01 * this.tweenTime;
        pinetreecom.DelayCaller.delayAfterFrames(this._listContainer, this._listContainer.animationIn, 10,
            [pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM,  this.tweenTime, Cubic.easeOut]);

        pinetreecom.DelayCaller.delayCall(this, this._onAnimateInComplete, this.tweenTime, null, true);
    }

    p._onAnimateInComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;
    }

    p.animateOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        this._oldScrollX = pinetree.getScrollX();
        this._oldScrollY = pinetree.getScrollY();

        this._listContainer.animateDelay = 0.01 * this.tweenTime;
        this._listContainer.animationOut(pinetreecom.ListBase.ANI_DIRECTION_BOTTOM2TOP,
            this.tweenTime * 1.2, Cubic.easeInOut, callback);
    }

    p.transitionIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        if(this.linkParams)
        {
            this.changeLinkParams(this.linkId, this.linkParams);
        }
        else
        {
            this._listContainer.animateDelay = 0;
            this._listContainer.animationIn(pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM, this.tweenTime, Cubic.easeOut);

            this._listContainer.resize(pt.stageWidth - this._itemEdge * 2, pt.stageHeight);

            TweenMax.to(this._listContainer, this.tweenTime * 1.2, {ease: Quart.easeOut,
                onComplete: Delegate.create(this, this._onAniComplete)
            });
        }
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        /*TweenMax.to(this._listContainer, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
            onComplete:callback});*/
        this.animateOut(callback);
    }

    p.predispose = function()
    {
        this.enabled = false;

        if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
        {
            this.facade.$.imagesUI.predisposeOut(Delegate.create(this, this.dispose));
        }
        else if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        this._listContainer && this._listContainer.dispose();
        this._listContainer = null;

        this._originParent = null;

        this.facade.$.listUI = null;
        pinetreepages.NewsBase.prototype.dispose.call(this);
    }

    pinetreepages.NewsListDevice = NewsListDevice;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var PortfolioView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._portfolioFacade = null;
        this._container = null;
    }

    var p = __extends(PortfolioView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);

        this._portfolioFacade = new pinetreepages.PortfolioFacade();
        this._portfolioFacade.ON_DISPOSE_COMPLETE.add(this, this._mvcDisposed);
        this._container = new pinetree.Sprite();
        this.addChild(this._container);
    }

    p.analyzeParams = function(linkId, linkParams)
    {
        pinetreepages.ViewBase.prototype.analyzeParams.call(this, linkId, linkParams);
        if(this._portfolioFacade)
        {
            this._portfolioFacade.updateLinkParams(this.linkId, this.linkParams);
        }
    }

    p.transitionIn = function()
    {
        this._portfolioFacade.startUp({container:this._container, source:this.data.src, size:this.data.size});
        this._portfolioFacade.updateLinkParams(this.linkId, this.linkParams);
        this.transitionInComplete();
    }

    p.transitionOut = function()
    {
        this._portfolioFacade && this._portfolioFacade.predispose();
    }

    p._mvcDisposed = function()
    {
        this.transitionOutComplete();
    }
    
    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object PortfolioView]";
    }

    pinetreepages.PortfolioView = PortfolioView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{

    var PortfolioFacade = function()
    {
        pinetreemvc.Facade.call(this);

        this.$ = {
            //notification
            NFT_START_UP:"notification_start_up",
            NFT_DATA_LOAD_COMPLETE:"notification_data_load_complete",
            NFT_IMAGE_CHANGE:"notification_image_change",
            NFT_IMAGE_LOAD_COMPLETE:"notification_image_load_complete",
            NFT_LINK_PARAMETERS_CHANGE:"notification_link_parameters_change",
            //data
            setting:null,
            root:null,
            //ui
            listUI:null,
            imagesUI:null
        }
    }

    var p = __extends(PortfolioFacade, pinetreemvc.Facade);

    p.startUp = function(data)
    {
        this.registerCommand(this.$.NFT_START_UP, pinetreepages.PortfolioStartUpCommand);
        this.sendNotification(this.$.NFT_START_UP, data);
    }

    p.updateLinkParams = function(linkId, linkParams)
    {
        this.sendNotification(this.$.NFT_LINK_PARAMETERS_CHANGE, {linkId:linkId, linkParams:linkParams});
    }

    pinetreepages.PortfolioFacade = PortfolioFacade;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioSetting = function()
    {
        this.thumbWidth = 0;
        this.thumbHeight = 0;
        this.readMoreLabel = "READ MORE";
        this.hasTips = false;
        this.gap = 0;
        this.row = 1;
        this.itemOffsetY = 0;
        this.closeButtonOffsetY = 0;
        this.useShadow = false;
    }

    PortfolioSetting.from = function(obj)
    {
        var setting = new pinetreepages.PortfolioSetting();
        setting.thumbWidth = obj.thumbWidth;
        setting.thumbHeight = obj.thumbHeight;
        setting.readMoreLabel = obj.readMoreLabel || setting.readMoreLabel;
        setting.hasTips = (pinetree.isDevice ? (obj.deviceShowTips != false) : obj.showTips) || false;
        setting.gap = obj.gap || 0;
        setting.itemOffsetY = obj.itemOffsetY || 0;
        setting.closeButtonOffsetY = obj.closeButtonOffsetY || 0;
        setting.row = __defaultSet(obj.row, setting.row);
        setting.useShadow = __defaultSet(obj.useShadow, setting.useShadow);
        return setting;
    }

    pinetreepages.PortfolioSetting = PortfolioSetting;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioImageVo = function()
    {
        this.index = 0;
        this.total = 0;
        this.title = "";
        this.preview = "";
        this.description = "";
        this.thumburl = "";
        this.imageurls = [];
        this.readMoreLabel = "";
        this.hasTips = false;
        this.useShadow = false;

        this.thumbWidth = 0;
        this.thumbHeight = 0;

        this.videoWidth = 640;
        this.videoHeight = 360;
        this.videourl = "";
        this.videoType = "video";

        this.isImage = true;
    }

    PortfolioImageVo.from = function(obj)
    {
        var vo = new pinetreepages.PortfolioImageVo();
        vo.title = obj.title || "";
        vo.preview = obj.preview || "";
        vo.description = obj.description || "";
        vo.thumburl = obj.thumburl;

        var imageurl = obj.imageurl || "";
        if(imageurl)
        {
            imageurl = imageurl.replace(/,\s*/, ",");
        }
        vo.imageurls = imageurl.split(",");

        if(vo.preview == "")
            vo.preview = vo.description;

        vo.videoWidth = __defaultSet(obj.videoWidth, vo.videoWidth);
        vo.videoHeight = __defaultSet(obj.videoHeight, vo.videoHeight);
        vo.videourl = obj.videourl || "";
        vo.videoType = __defaultSet(obj.videoType, "video");

        vo.isImage = vo.videourl == "";

        return vo;
    }

    pinetreepages.PortfolioImageVo = PortfolioImageVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioImageProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    PortfolioImageProxy.NAME = "PortfolioImageProxy";

    var p = __extends(PortfolioImageProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.PortfolioSetting.from(jsonData.setting);
        this.facade.$.setting = setting;

        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.PortfolioImageVo.from(jsonData.data[i]);
            vo.thumbWidth = setting.thumbWidth;
            vo.thumbHeight = setting.thumbHeight;
            vo.readMoreLabel = setting.readMoreLabel;
            vo.hasTips = setting.hasTips;
            vo.useShadow = setting.useShadow;
            vo.index = i;
            vo.total = len;
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_COMPLETE, data);
    }

    pinetreepages.PortfolioImageProxy = PortfolioImageProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioImagesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    PortfolioImagesMediator.NAME = "PortfolioImagesMediator";

    var p = __extends(PortfolioImagesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.load(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.PortfolioImagesMediator = PortfolioImagesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioListMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_LINK_PARAMETERS_CHANGE
        ];
    }

    PortfolioListMediator.NAME = "PortfolioListMediator";

    var p = __extends(PortfolioListMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                //
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_LINK_PARAMETERS_CHANGE:
                this.viewComponent.changeLinkParams(data.linkId, data.linkParams);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.PortfolioListMediator = PortfolioListMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioStartUpCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(PortfolioStartUpCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var container = data.container;
        var source = data.source;
        var fileSize = data.size;

        this.facade.$.root = container;

        var listUI = pinetree.isDevice ? new pinetreepages.PortfolioListDevice : new pinetreepages.PortfolioList();
        var imagesUI = new pinetreepages.PortfolioImages();

        container.addChild(listUI);
        container.addChild(imagesUI);

        this.facade.$.listUI = listUI;
        this.facade.$.imagesUI = imagesUI;

        this.facade.registerMediator(null, pinetreepages.PortfolioListMediator, listUI);
        this.facade.registerMediator(null, pinetreepages.PortfolioImagesMediator, imagesUI);

        this.facade.registerProxy(null, pinetreepages.PortfolioImageProxy, source, fileSize);
    }

    pinetreepages.PortfolioStartUpCommand = PortfolioStartUpCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioListTips = function(data, w, h)
    {
        pinetree.Sprite.call(this);

        this._data = data;
        this._itemWidth = w;
        this._itemHeight = h;

        this._gap = 20;

        this._titleTxt = null;
        this._previewTxt = null;

        this.tweenTime = 1.0;
        this.transition = Quint.easeOut;
    }

    var p = __extends(PortfolioListTips, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.useMouseHand = true;
            this._titleTxt.className += " portfolio_list_title";
            this._titleTxt.width = this._itemWidth - this._gap - this._gap;
            this.addChild(this._titleTxt);
            this._titleTxt.htmlText = this._data.title;
            this._titleTxt.x = 0;
            this._titleTxt.y = this._itemHeight + this._gap;

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.useMouseHand = true;
            this._previewTxt.className += " portfolio_list_preview";
            this._previewTxt.width = this._itemWidth - this._gap - this._gap;
            this.addChild(this._previewTxt);
            this._previewTxt.htmlText = this._data.preview;
            this._previewTxt.x = 0;
            this._previewTxt.y = this._titleTxt.y +  this._titleTxt.height + this._gap - 10;
        }

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.over = function(time, transition)
    {
        if(time == undefined) time = this.tweenTime / 2;
        if(transition == undefined) transition = Quad.easeOut;

        if(this._titleTxt)
        {
            this._titleTxt.tweenColor(pt.onOverColor, time, transition);
        }
    }

    p.out = function(time, transition)
    {
        if(time == undefined) time = this.tweenTime / 2;
        if(transition == undefined) transition = Quad.easeOut;

        if(this._titleTxt)
        {
            this._titleTxt.tweenColor(pt.textColor, time, transition);
        }
    }

    p.getHeight = function()
    {
        if(!this._previewTxt) return 0;
        return this._previewTxt.y + this._previewTxt.height;
    }

    p.dispose = function()
    {
        this._titleTxt && this._titleTxt.dispose();
        this._titleTxt = null;

        this._previewTxt && this._previewTxt.dispose();
        this._previewTxt = null;

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioListTips = PortfolioListTips;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var PortfolioListDeviceTips = function(data)
    {
        pinetree.Sprite.call(this);

        this._data = data;
        this._titleTxt = null;
        this._previewTxt = null;

        this._gapY = 22;
    }

    var p = __extends(PortfolioListDeviceTips, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.useMouseHand = true;
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.className += " portfolio_list_title_device";

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.useMouseHand = true;
            this._previewTxt.selectable = false;
            this.addChild(this._previewTxt);
            this._previewTxt.className += " portfolio_list_preview_device";
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.update = function(tipWidth, tipHeight)
    {
        this._titleTxt.width = tipWidth;
        this._titleTxt.height = 10;
        this._titleTxt.htmlText = this._data.title;
        this._titleTxt.y = 0;
        this._titleTxt.setLimitation(1, true);

        this._previewTxt.width = tipWidth;
        this._previewTxt.htmlText = this._data.preview;
        this._previewTxt.y = this._titleTxt.y + this._titleTxt.textHeight + this._gapY;

        var limitHeight = tipHeight - this._previewTxt.y;
        this._previewTxt.setLimitation(limitHeight, false);
    }

    p.dispose = function()
    {
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioListDeviceTips = PortfolioListDeviceTips;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioListRender = function()
    {
        pinetreecom.ListItemBase.call(this);

        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._thumbWidth = 0;
        this._thumbHeight = 0;

        this._bgAlpha = pt.bgAlpha;

        this._thumbnail = null;
        this._tips = null;

        this._previewTxt = null;
        this._icon = null;
        this._zoomIcon = null;

        this._hasTips = false;
        this._useShadow = false;

        this._isShowing = false;
        this._isActive = false;
        this.mouseChildren = false;
    }

    var p = __extends(PortfolioListRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, w, h, data);

        this._thumbWidth = data.thumbWidth;
        this._thumbHeight = data.thumbHeight;
        this._hasTips = data.hasTips;
        this._useShadow = data.useShadow;

        if(this._useShadow)
        {
            this._thumbnail = new pinetreecom.ShadowImageLoader(this._thumbWidth, this._thumbHeight);
            this._thumbnail.className = "shadow_20px";
            this._thumbnail.useMouseHand = true;
        }
        else
        {
            this._thumbnail = new pinetreecom.Thumbnail(this._thumbWidth, this._thumbHeight, pt.onOverColor, pt.bgColor, true);
            this._thumbnail.backgroundAlpha = pt.bgAlpha;
            this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
            this._thumbnail.fg.useMouseHand = true;
        }
        this.addChild(this._thumbnail);

        if(!data.isImage)
        {
            this._icon = new pinetree.TextureImage();
            this.addChild(this._icon);
            this._icon.alpha = 1;
            this._icon.texture = pt.getCommonTexture(pinetreepages.EnumTextures.VIDEO_ICON);
            this._icon.x = (this._thumbWidth - this._icon.width) >> 1;
            this._icon.y = (this._thumbHeight - this._icon.height) >> 1;
            pinetreecom.ColorUtil.setColor(this._icon, pt.videoIconColor);
        }

        if(!pinetree.isDevice)
        {
            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        this._previewTxt = new pinetree.TextField();
        this._previewTxt.useMouseHand = true;
        this._previewTxt.selectable = false;
        this.addChild(this._previewTxt);
        this._previewTxt.alpha = 0;
        this._previewTxt.fontSize = 14;
        this._previewTxt.textColor = pt.bgColor;
        this._previewTxt.htmlText = data.readMoreLabel;

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
        this._zoomIcon = new pinetree.TextureImage(tex);
        this._zoomIcon.alpha = 0;
        this._zoomIcon.buttonMode = true;
        this.addChild(this._zoomIcon);
        pinetreecom.ColorUtil.setColor(this._zoomIcon, pt.bgColor);
        this._zoomIcon.x = (this._thumbWidth - this._zoomIcon.width) >> 1;

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        this.buttonMode = true;

        this.alpha = 0;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            if(this._hasTips)
            {
                this._tips = new pinetreepages.PortfolioListTips(this._data, this._itemWidth, this._itemHeight);
                this.addChild(this._tips);

                this.width = this._itemWidth;
                this.height = this._tips.height;
            }
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._thumbWidth - this._previewTxt.width) >> 1;
        }

        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
        else
        {
            this._onImgLoadComplete(null);
        }
    }

    p._onImgLoadComplete = function(img)
    {
        img.setRealFitSize(this._thumbWidth, this._thumbHeight);
    }

    p._onOver = function(evt)
    {
        if(pinetree.isDevice) return;

        if(this._thumbnail)
        {
            if(!this._useShadow)
            {
                this._thumbnail.onOver(this.tweenTime * 3, Quart.easeOut, 1.08);
            }
            else
            {
                this._thumbnail.buttonMode = true;
            }

            var fg = this._useShadow ? (this._thumbnail.imageLoader ? this._thumbnail.imageLoader.fg : null) : this._thumbnail.fg;
            if(fg)
            {
                TweenMax.to(fg, this.tweenTime / 2, {alpha:this._bgAlpha, ease:Quad.easeOut});
            }
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        if(this._zoomIcon)
        {
            this._zoomIcon.y = y - this._zoomIcon.height - gap - 20 + iconOffsetY;
            TweenMax.to(this._zoomIcon, this.tweenTime / 3, {alpha:1,
                y:y - this._zoomIcon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        }

        if(this._previewTxt)
        {
            this._previewTxt.y = y + gap + 20;
            TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});
        }

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, ease:Quad.easeOut});

        this._tips && this._tips.over();
    }

    p._onOut = function(evt)
    {
        if(this._thumbnail)
        {
            if(!this._useShadow)
            {
                this._thumbnail.onOut(this.tweenTime / 2);
            }

            var fg = this._useShadow ? (this._thumbnail.imageLoader ? this._thumbnail.imageLoader.fg : null) : this._thumbnail.fg;
            if(fg)
            {
                TweenMax.to(fg, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut});
            }
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        if(this._zoomIcon)
        {
            TweenMax.to(this._zoomIcon, this.tweenTime / 3, {alpha:0,
                y:y - this._zoomIcon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        }

        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, ease:Quad.easeOut});

        this._tips && this._tips.out();
    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentHeight = function()
    {
        return this._itemHeight;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isFullShown)
        {
            this.show();
            this._isActive = true;
        }
        else
        {
            this.hide();
            this._isActive = false;
        }
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(!this.parent)
        {
            this.addToParent();
        }

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
            onComplete:this._onShowComplete, onCompleteParams:[this]});
    }

    p._onShowComplete = function(owner)
    {
        //
    }

    p.hide = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeFromParent();
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onInComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);

        this.alpha = 1;
        this.x = this.originX + pt.stageWidth;
        TweenMax.to(this, time, {x:this.originX, delay:delay,
            ease:transition || this.transition, onComplete:this._onInComplete,
            onCompleteParams:[this, callback]
        });

        this.addToParent();
    };

    p._onInComplete = function(owner, callback)
    {
        if(!owner.mouseEnabled)
        {
            if(owner.x != owner.originX)
            {
                owner.x = owner.originX;
            }
            owner.mouseEnabled = true;
        }
        callback && callback();
    }

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onOutComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        TweenMax.to(this, time, {x:this.originX + pt.stageWidth, delay:delay,
            ease:transition || this.transition, onComplete:this._onOutComplete,
            onCompleteParams:[this, callback]
        });
    };

    p._onOutComplete = function(owner, callback)
    {
        if(!pinetree.isDevice)
        {
            owner.removeFromParent();
        }
        callback && callback();
    }

    p.dispose = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        if(this._icon)
        {
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        if(this._zoomIcon)
        {
            TweenMax.killTweensOf(this._zoomIcon);
            this._zoomIcon.removeFromParent(true);
            this._zoomIcon = null;
        }

        if(this._previewTxt)
        {
            TweenMax.killTweensOf(this._previewTxt);
            this._previewTxt = null;
        }

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        if(this._tips)
        {
            this._tips.dispose();
            this._tips = null;
        }

        TweenMax.killTweensOf(this);

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioListRender = PortfolioListRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-12.
 */
(function()
{
    var PortfolioListDeviceRender = function()
    {
        pinetreecom.ListItemBase.call(this);
        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._thumbWidth = 0;
        this._thumbHeight = 0;

        this._itemEdge = 30;

        this._thumbnail = null;
        this._tips = null;

        this._hasTips = true;

        this._previewTxt = null;
        this._icon = null;
        this._zoomIcon = null;

        this._isShowing = false;
        this._isActive = false;
        this.mouseChildren = false;
    }

    var p = __extends(PortfolioListDeviceRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, w, h, data);

        this._thumbWidth = data.thumbWidth;
        this._thumbHeight = data.thumbHeight;

        this._hasTips = data.hasTips;

        this._thumbnail = new pinetreecom.ShadowImageLoader(this._thumbWidth, this._thumbHeight);
        this._thumbnail.backgroundAlpha = 0;
        this._thumbnail.className = "shadow_20px";
        //this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
        this._thumbnail.useMouseHand = true;
        this.addChild(this._thumbnail);

        if(!data.isImage)
        {
            this._icon = new pinetree.TextureImage();
            this.addChild(this._icon);
            this._icon.alpha = 1;
            this._icon.texture = pt.getCommonTexture(pinetreepages.EnumTextures.VIDEO_ICON);
            this._icon.x = (this._thumbWidth - this._icon.width) >> 1;
            this._icon.y = (this._thumbHeight - this._icon.height) >> 1;
            pinetreecom.ColorUtil.setColor(this._icon, pt.videoIconColor);
        }

        this.addEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
        this.addEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);

        this._previewTxt = new pinetree.TextField();
        this._previewTxt.useMouseHand = true;
        this._previewTxt.selectable = false;
        this.addChild(this._previewTxt);
        this._previewTxt.alpha = 0;
        this._previewTxt.fontSize = 14;
        this._previewTxt.textColor = pt.bgColor;
        this._previewTxt.htmlText = data.readMoreLabel;

        var tex = pt.getCommonTexture(pinetreepages.EnumTextures.ZOOM_IN_ICON);
        this._zoomIcon = new pinetree.TextureImage(tex);
        this._zoomIcon.alpha = 0;
        this._zoomIcon.buttonMode = true;
        this.addChild(this._zoomIcon);
        pinetreecom.ColorUtil.setColor(this._zoomIcon, pt.bgColor);
        this._zoomIcon.x = (this._thumbWidth - this._zoomIcon.width) >> 1;

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        this.buttonMode = true;

        this.alpha = 0;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            if(this._hasTips)
            {
                this._tips = new pinetreepages.PortfolioListDeviceTips(this._data);
                this.addChild(this._tips);
                this._tips.x = this._itemWidth + this._itemEdge;
            }
        }

        if(this._previewTxt)
        {
            this._previewTxt.x = (this._thumbWidth - this._previewTxt.width) >> 1;
        }

        if(this._tips)
        {
            this._tips.update(pt.stageWidth - this._thumbWidth - this._itemEdge * 3, this._thumbHeight);
        }

        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.resize = function(sw, sh)
    {
        if(this._tips)
        {
            this._tips.update(sw - this._thumbWidth - this._itemEdge * 3, this._thumbHeight);
        }
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
        else
        {
            this._onImgLoadComplete(null);
        }
    }

    p._onImgLoadComplete = function(img)
    {

    }

    p._onOver = function(evt)
    {
        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.buttonMode = true;
            this._thumbnail.imageLoader.onOver(this.tweenTime * 3, Quart.easeOut, 1.08);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha: pt.bgAlpha, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._zoomIcon.y = y - this._zoomIcon.height - gap - 20 + iconOffsetY;
        this._previewTxt.y = y + gap + 20;

        this._zoomIcon && TweenMax.to(this._zoomIcon, this.tweenTime / 3, {alpha:1, y:y - this._zoomIcon.height - gap + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:1, y:y + gap, ease:Cubic.easeOut});

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:0, ease:Quad.easeOut});
    }

    p._onOut = function(evt)
    {
        //if(evt && evt.elementTarget != this.htmlElement) return;

        if(this._thumbnail && this._thumbnail.imageLoader)
        {
            this._thumbnail.imageLoader.onOut(this.tweenTime / 2);
            TweenMax.to(this._thumbnail.imageLoader.fg, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut});
        }

        var y = this._thumbHeight >> 1;
        var iconOffsetY = 5;
        var gap = 10;

        this._zoomIcon && TweenMax.to(this._zoomIcon, this.tweenTime / 3, {alpha:0, y:y - this._zoomIcon.height - gap - 20 + iconOffsetY, ease:Cubic.easeInOut});
        this._previewTxt && TweenMax.to(this._previewTxt, this.tweenTime / 3, {alpha:0, y:y + gap + 20, ease:Cubic.easeOut});

        if(this._icon)
            TweenMax.to(this._icon, this.tweenTime / 3, {alpha:1, ease:Quad.easeOut});
    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentHeight = function()
    {
        return this._itemHeight;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isFullShown)
        {
            this.show();
            this._isActive = true;
        }
        else
        {
            this.hide();
            this._isActive = false;
        }
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(!this.parent)
        {
            this.addToParent();
        }

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
            onComplete:this._onShowComplete, onCompleteParams:[this]});
    }

    p._onShowComplete = function(owner)
    {
        //
    }

    p.hide = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeFromParent();
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        this.addToParent();

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() - pinetree.getScrollY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this._onInComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);

        if(!this.tweenAlphaByCSS(1, time / 2, delay, "linear", this._onInComplete, [this, callback]))
        {
            TweenMax.to(this, time, {alpha:1, delay:delay,
                ease:transition || this.transition, onComplete:this._onInComplete,
                onCompleteParams:[this, callback]
            });
        }
    };

    p._onInComplete = function(owner, callback)
    {
        if(!owner.mouseEnabled)
        {
            if(owner.x != owner.originX)
            {
                owner.x = owner.originX;
            }
            owner.mouseEnabled = true;
        }
        owner.alpha = 1;
        callback && callback();
    }

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        var isOnStage =  false;
        var h = this._itemHeight || this.height;
        var itemStageY = this.parent ? this.getStageY() - pinetree.getScrollY() : this.originY;
        if(itemStageY >= - h && itemStageY < pt.stageHeight)
        {
            isOnStage = true;
        }

        if((time == 0 && delay == 0) || !isOnStage)
        {
            this._onOutComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        if(!this.tweenAlphaByCSS(0, time / 2, delay, "linear", this._onOutComplete, [this, callback]))
        {
            TweenMax.to(this, time, {alpha:0, delay:delay,
                ease:transition || this.transition, onComplete:this._onOutComplete,
                onCompleteParams:[this, callback]
            });
        }
    };

    p._onOutComplete = function(owner, callback)
    {
        //owner.removeFromParent();
        callback && callback();
    }

    p.dispose = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        if(this._icon)
        {
            this._icon.removeFromParent(true);
            this._icon = null;
        }

        if(this._zoomIcon)
        {
            TweenMax.killTweensOf(this._zoomIcon);
            this._zoomIcon.removeFromParent(true);
            this._zoomIcon = null;
        }

        if(this._previewTxt)
        {
            TweenMax.killTweensOf(this._previewTxt);
            this._previewTxt = null;
        }

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        TweenMax.killTweensOf(this);

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioListDeviceRender = PortfolioListDeviceRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-9-29.
 */
(function()
{
    var PortfolioCategory = function(defaultSelected)
    {
        pinetreecom.UIComponent.call(this);
        this._data = null;
        this._items = null;

        this._defaultSelected = __defaultSet(defaultSelected, 0);

        this.gapX = 20;

        this._contentWidth = 0;

        this.ON_CHANGE = new pinetree.Signal();

        this.tweenTime = 1.0;
        this.transition = Quart.easeOut;

        __defineGetterSetter(this, ["contentWidth"]);
    }

    var p = __extends(PortfolioCategory, pinetreecom.UIComponent);

    p.setUpWith = function(data)
    {
        if(!data) return;
        this._data = data;

        this._items = [];

        var i, len = this._data.length, item, w = 0;
        for(i = 0; i < len; i ++)
        {
            item = new pinetreepages.PortfolioMenuItem();
            item.index = i;
            item.ON_CLICK.add(this, this._onClickItem);
            this.addChild(item);
            item.setText(this._data[i]);
            item.x = item.originX = w;
            w += item.width + this.gapX;

            this._items.push(item);
        }

        this._contentWidth = w - this.gapX;

        if(this._defaultSelected < len)
        {
            this._items[this._defaultSelected].setSelected(true);
            this.ON_CHANGE.dispatch(this._defaultSelected);
        }
    }

    p._onClickItem = function(item, evt)
    {
        item.setSelected(true);

        var len = this._items.length, index = item.index;
        for(var i = 0; i < len; i ++)
        {
            if(i != index)
            {
                item = this._items[i];
                item.setSelected(false);
            }
        }

        this.ON_CHANGE.dispatch(index);
    }

    p.show = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        if(!this._items) return;

        var len = this._items.length, item, index = 0;
        for(var i = len - 1; i >= 0; i --)
        {
            item = this._items[i];
            if(item)
            {
                item.show(time, delay * index, transition, i, 0, callback);
                index ++;
            }
        }
    }

    p.hide = function(time, delay, transition, callback)
    {
        time = __defaultSet(time, this.tweenTime);
        delay = __defaultSet(delay, 0);
        transition = __defaultSet(transition, this.transition);

        if(!this._items) return;

        var len = this._items.length, item;
        for(var i = 0; i < len; i ++)
        {
            item = this._items[i];
            if(item)
            {
                item.hide(time, delay * i, transition, i, len - 1, callback);
            }
        }
    }

    p.getContentWidth = function()
    {
        return this._contentWidth;
    }

    p.dispose = function()
    {
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_CHANGE = null;

        if(this._items)
        {
            var i, len = this._items.length, item;
            for(i = 0; i < len; i ++)
            {
                item = this._items[i];
                item && item.dispose();
            }

            this._items.splice(0, this._items.length);
            this._items = null;
        }

        this._data = null;

        pinetreecom.UIComponent.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioCategory = PortfolioCategory;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-7-22.
 */
(function()
{
    var PortfolioInfoContainer = function(bgColor, bgAlpha, defaultTextColor, gapY)
    {
        pinetree.Sprite.call(this);

        this._txtContainer = null;
		this._container = null;
		this._bg = null;

        this._information = "";

        this._gapY = gapY == undefined ? 10 : gapY;

		this._textWidth = 100;
        this._textHeight = 100;
		
		this._isShowing = false;
		
		this.tweenTime = 1.0;
		this.transition = Quart.easeOut;

        this._bgColor = bgColor || 0;
        this._bgAlpha = bgAlpha == undefined ? 1 : bgAlpha;
        this._defaultTextColor = defaultTextColor == undefined ? 0xffffff : defaultTextColor;

        this._init();
        
        __defineGetterSetter(this, ["information", "bg", "isShowing"]);
    }

    var p = __extends(PortfolioInfoContainer, pinetree.Sprite);

    p._init = function()
    {
        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._txtContainer = new pinetreecom.TextContainer(this._textWidth, this._textHeight,
            this._bgColor, 0, true, true, false);
        this._container.addChild(this._txtContainer);
        this._txtContainer.gapBetweenTitleAndInfo = 25;
        this._txtContainer.titleTextColor = pt.onOverColor;
        this._txtContainer.infoTextColor = this._textColor;
        this._txtContainer.titleFontSize = 30;
        this._txtContainer.infoFontSize = 16;
        this._txtContainer.sliderOverColor = pt.onOverColor;
        this._txtContainer.sliderOutColor = pt.onOverColor;
        this._txtContainer.sliderBGAlpha = 0.1;
        this._txtContainer.sliderWidth = 10;
        this._txtContainer.padding = this._gapY;
        this._txtContainer.init();
        this.registerAutoDispose(this._txtContainer);

        this._bg = new pinetree.Quad();
        this._container.addChildAt(this._bg, 0);
        this._bg.color = this._bgColor;
        this._bg.alpha = this._bgAlpha;
        this.registerAutoDispose(this._bg);

        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);
        this.clip = this._clipRect;
    }

    p.setInformation = function(value)
    {
        this._information = value;
        this._txtContainer.reset();
        this._txtContainer.information = this._information;
    }

    p.setSize = function(w, h)
    {
        this._textWidth = w;
        this._textHeight = h;

        this._txtContainer.contentWidth = w;
        this._txtContainer.contentHeight = h;
        this._txtContainer.scrollerHeight = 200;

        this.update();
    }

    p.update = function()
    {
        this._bg.width = this._textWidth;

        var contentHeight = this._txtContainer.getRealHeight() + this._gapY * 2;
        if(contentHeight > this._textHeight)
        {
            contentHeight = this._textHeight;
        }
        this._bg.height = contentHeight;

        this._container.y = this._bg.height;

        this._clipRect.width = this._textWidth;
        this._clipRect.height = this._bg.height;
        this.clip = this._clipRect;
    }

    p.show = function(time)
    {
        if(time == undefined) time = this.tweenTime;
        this._isShowing = true;

        this.update();
        TweenMax.to(this._container, time / 2, {y:0, ease:this.transition});
    }

    p.hide = function(time)
    {
        if(!this._isShowing) return;

        if(time == undefined) time = this.tweenTime;
        this._isShowing = false;

        TweenMax.to(this._container, time / 2, { y:this._bg.height, ease:this.transition});
    }

    p.getIsShowing = function()
    {
        return this._isShowing;
    }

    p.getBg = function()
    {
        return this._bg;
    }

    p.getBgHeight = function()
    {
        if(this._bg)
        {
            return this._bg.height;
        }
        return 0;
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this._container);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioInfoContainer = PortfolioInfoContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/31.
 */
(function()
{
    var PortfolioImageLoader = function(bottomHeight)
    {
        pinetree.Sprite.call(this);

        this._thumbnail = null;

        this.EDGE_CONST_SMALL = 0;
        this.EDGE_CONST_NORMAL = 90 * 2;

        this._imageEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        this._bottomHeight = bottomHeight || 0;

        this._currentWidth = 0;
        this._currentHeight = 0;

        this._isLoading = false;

        this._infoContainer = null;

        this.tweenTime = 1.0;
        this.transition = Cubic.easeOut;

        this.ON_LOAD_COMPLETE = new pinetree.Signal();
        this.registerAutoDispose(this.ON_LOAD_COMPLETE);

        __defineGetterSetter(this, ["information", "thumbnail"]);
    }

    var p = __extends(PortfolioImageLoader, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._thumbnail = new pinetreecom.Thumbnail(0, 0, 0, 0, false, null, false);
            this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onLoadComplete);
            this.addChild(this._thumbnail);
            this.registerAutoDispose(this._thumbnail);

            this.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

            if(!pinetree.isDevice)
            {
                this._infoContainer = new pinetreepages.PortfolioInfoContainer(pt.bgColor, 0.95, pt.textColor, 30);
                this.addChild(this._infoContainer);
                this.registerAutoDispose(this._infoContainer);
            }
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.setInformation = function(info)
    {
        if(this._infoContainer)
            this._infoContainer.information = info;
    }

    p._onOver = function(evt)
    {
        if(!pinetree.isSmallMode)
        {
            this._infoContainer.show();
        }
    }

    p._onOut = function(evt)
    {
        if(!pinetree.isSmallMode)
        {
            this._infoContainer.hide();
        }
    }

    p._onLoadComplete = function(thumb)
    {
        this._isLoading = false;
        this.ON_LOAD_COMPLETE.dispatch();
    }


    p.reset = function()
    {
        if(this._thumbnail)
        {
            this._isLoading = false;
            this._thumbnail.reset();
        }
    }

    p.load = function(url)
    {
        if(this._thumbnail)
        {
            this._isLoading = true;
            this._thumbnail.load(url);
        }
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.getImageX = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.x;
        }
        return 0;
    }

    p.getImageY = function()
    {
        if(this._thumbnail)
        {
            return this._thumbnail.y;
        }
        return 0;
    }

    p.update = function(sw, sh)
    {
        this._imageEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        this._thumbnail.setMaxSize(sw - this._imageEdge, sh - pt.TOP_HEIGHT - this._bottomHeight - this._imageEdge);

        TweenMax.killTweensOf(this._thumbnail, false, {x:true, y:true});
        this._thumbnail.x = (sw - this._thumbnail.imageWidth) >> 1;
        this._thumbnail.y = (sh + pt.TOP_HEIGHT - this._bottomHeight - this._thumbnail.imageHeight) >> 1;

        this._currentWidth = this._thumbnail.imageWidth;
        this._currentHeight = this._thumbnail.imageHeight;

        if(this._infoContainer)
        {
            this._infoContainer.setSize(this._currentWidth, this._currentHeight);
            this._infoContainer.x = this._thumbnail.x;
            this._infoContainer.y = this._thumbnail.y + this._currentHeight - this._infoContainer.getBgHeight();
        }

    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._currentWidth, this._currentHeight);
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
        this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioImageLoader = PortfolioImageLoader;
}());

/**
 * Created by foreverpinetree@gmail.com on 2015/1/8.
 */
(function()
{
    var DevicePortfolioTextContainer = function(padding, fontSize, textColor, bgColor, bgAlpha)
    {
        pinetreecom.UIComponent.call(this);

        this._padding = padding || 0;

        this._fontSize = __defaultSet(fontSize, 16);
        this._textColor = __defaultSet(textColor, pt.textColor);

        this._titleTxt = null;
        this._infoTxt = null;

        this._title = "";
        this._info = "";

        this.backgroundColor = __defaultSet(bgColor, pt.bgColor);
        this.backgroundAlpha = __defaultSet(bgAlpha, pt.bgAlpha);

        this.alpha = 0;
        this.visible = false;

        this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
    }

    var p = __extends(DevicePortfolioTextContainer, pinetreecom.UIComponent);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " portfolio_device_info_title";
            this.addChild(this._titleTxt);

            this._infoTxt = new pinetree.TextField();
            this._infoTxt.className += " portfolio_device_info_content";
            this.addChild(this._infoTxt);
        }

        pinetreecom.UIComponent.prototype.addedToStage.call(this);
    }

    p._onClick = function(evt)
    {
        this.hide();
    }

    p.setTexts = function(title, info)
    {
        this._title = title;
        this._info = info;
    }

    p.show = function(time)
    {
        pinetree.stage.addChild(this);

        pt.navPage.view.showMenuAndLogo(false);

        this.visible = true;
        TweenMax.to(this, time || 0, {alpha:1, ease:Quad.easeOut});

        this.redraw();
    }

    p.hide = function(time)
    {
        TweenMax.to(this, time || 0, {alpha:0, ease:Quad.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.visible = false;
        owner.removeFromParent();

        pt.navPage.view.showMenuAndLogo(true);
    }

    p.resize = function(sw, sh)
    {
        if(this.visible)
        {
            this._titleTxt.width = sw - this._padding * 2;
            this._titleTxt.height = 1;
            this._titleTxt.htmlText = this._title;

            this._infoTxt.width = sw - this._padding * 2;
            this._infoTxt.height = 1;
            this._infoTxt.htmlText = this._info;

            var gap = 20;
            var h = this._titleTxt.height + gap + this._infoTxt.height;
            var y = h < sh - this._padding * 2 ? ((sh - this._padding * 2 - h) >> 1) : this._padding;

            this._titleTxt.x = this._padding;
            this._infoTxt.x = this._padding;
            this._titleTxt.y = y;
            this._infoTxt.y = y + this._titleTxt.height + gap;

            this.width = sw;
            h = h < sh - this._padding * 2 ? sh : h + this._padding * 2;
            this.height = h;
        }
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        pinetreecom.UIComponent.prototype.dispose.call(this);

    }

    pinetreepages.DevicePortfolioTextContainer = DevicePortfolioTextContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var PortfolioBase = function()
    {
        pinetreemvc.ViewComponentBase.call(this);

        this.data = null;

        this.linkId = "";
        this.linkParams = null;

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(PortfolioBase, pinetreemvc.ViewComponentBase);

    p.initData = function(data)
    {
        this.data = data || [];
    }

    p.change = function(data)
    {

    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        this.linkId = linkId;
        this.linkParams = linkParams;
    }

    p.dispose = function()
    {
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_CHANGE = null;
        this.ON_LOAD_COMPLETE = null;

        this.data = null;
        this.linkId = "";
        this.linkParams = null;

        pinetreemvc.ViewComponentBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioBase = PortfolioBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var PortfolioImages = function()
    {
        pinetreepages.PortfolioBase.call(this);

        this._originParent = null;

        this._screenMask = null;

        this._textWidth = 0;
        this._bottomHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._closeBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;
        this._closeBtnHeight = 0;

        this._isInited = false;
        this._isClose = false;

        this._currentIndex = 0;

        this._needInfoBtn = true;

        this._useKeyControl = true;

        this._dataCount = 0;
        this._currentVo = null;
        this._currentNodeIndex = 0;

        this._imageLoader = null;
        this._mediaPlayer = null;
        this._loading = null;
        this._pnBtns = null;
        this._closeBtn = null;

        this._closeButtonOffsetY = 0;

        this._isToPrevDirection = false;

        this._deviceInfoTxt = null;

        this._titleTxt = null;

        this._deviceInfoTxt = null;

        this._tweenOffsetX = 20;

        this._isShowingInfo = false;

        this.positionRef = "fixed";

        if(pt.isAlphaMode) this.alpha = pt.ALPHA_MODE_VALUE;

        __defineGetterSetter(this, ["isInited"]);
    }

    var p = __extends(PortfolioImages, pinetreepages.PortfolioBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;

            var prevTex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON);
            var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            prevBtn.setTextures(prevTex);
            var nextTex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON);
            var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            nextBtn.setTextures(nextTex);
            this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false, 0, 0);
            this._pnBtns.useKeyArrow = this._useKeyControl;
            this._pnBtns.onOverColor = pt.onOverColor;
            this._pnBtns.onOutColor = pt.onOutColor;
            this._pnBtns.hide(0);
            this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);

            var closeTex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_CLOSE_ICON);
            this._closeBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
            this._closeBtn.className += ' portfolio_img_close_btn';
            this._closeBtn.setTextures(closeTex);
            this._closeBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this.addChild(this._closeBtn);

            this._prevBtnWidth = prevTex.sourceWidth;
            this._nextBtnWidth = nextTex.sourceWidth;
            this._closeBtnWidth = closeTex.sourceWidth;
            this._prevBtnHeight = prevTex.sourceHeight;
            this._nextBtnHeight = nextTex.sourceHeight;
            this._closeBtnHeight = closeTex.sourceHeight;

            this._titleTxt = new pinetree.TextField();
            this._titleTxt.selectable = false;
            this.addChild(this._titleTxt);
            this._titleTxt.className += " portfolio_image_title";

            if(this._useKeyControl)
            {
                pinetreecom.KeyboardUtil.listen(this, [pinetree.Keyboards.ESCAPE], this._onKeyUp);
            }
        }
        pinetreepages.PortfolioBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.PortfolioBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = this.data.length;

        this._needInfoBtn = this.facade.$.setting.needInfoButton;
        this._closeButtonOffsetY = this.facade.$.setting.closeButtonOffsetY;

        this._initUI();

        this.visible = false;
    }

    p._initUI = function()
    {
        this._imageLoader = new pinetreepages.PortfolioImageLoader(this._bottomHeight, this._isZoomIn);
        this._imageLoader.ON_LOAD_COMPLETE.add(this, this._onLoadImgComplete);
        this.addChild(this._imageLoader);

        this._loading = new pinetreecom.CommonLoading("big");
        this.addChild(this._loading);
        this.registerAutoDispose(this._loading);

        this._screenMask = new pinetree.Quad();
        this.addChildAt(this._screenMask, 0);
        this._screenMask.color = pt.bgColor;
        this._screenMask.alpha = 0.95;

        this._deviceInfoTxt = new pinetreepages.DevicePortfolioTextContainer(20, 16, pt.textColor, pt.bgColor, 0.95);
        this.registerAutoDispose(this._deviceInfoTxt);
    }

    p.load = function(index)
    {
        //this.mouseChildren = this.mouseEnabled = false;

        var vo = this.data[index];
        this._currentVo = vo;

        this._currentIndex = index;

        if(!this._isInited)
        {
            this.transitionIn(Delegate.create(this, this.load, index));
            return;
        }

        if(vo.isImage)
            this.loadImage(vo);
        else
            this.loadVideo(vo);

        if(this._deviceInfoTxt.visible)
        {
            this._deviceInfoTxt.setTexts(this._currentVo.title, this._currentVo.description);
            this._deviceInfoTxt.redraw();
        }
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.PortfolioBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(!this._isInited) return;

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(isNaN(index))
            {
                this._onClose();
            }
            else if(this._currentIndex != index - 1 && index > 0 && index <= this._dataCount)
            {
                this._currentIndex = index - 1;
                var offsetX = this._isToPrevDirection ? - this._tweenOffsetX : this._tweenOffsetX;

                if(this._currentVo.isImage)
                {
                    if(!this._imageLoader.tweenAlphaByCSS(0, this.tweenTime * 0.5, 0, "linear",
                            Delegate.create(this, this._onHideImageComplete)))
                    {
                        TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {alpha:0, ease:Linear.easeNone,
                            onComplete:Delegate.create(this, this._onHideImageComplete)});
                    }
                    TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {x:this._imageLoader.x- offsetX, ease:Cubic.easeOut});
                }
                else
                {
                    this._mediaPlayer.tweenOut(this.tweenTime * 0.8, 0, Linear.easeNone, Delegate.create(this, this._onHideVideoComplete));
                    TweenMax.to(this._mediaPlayer, this.tweenTime * 0.5, {x:((pt.stageWidth - this._currentVo.videoWidth) >> 1) - offsetX,
                        ease:Cubic.easeOut});
                }

                TweenMax.to(this._titleTxt, this.tweenTime / 2, {x:this._titleTxt.x - offsetX, alpha:0,
                    Cubic:Quad.easeOut});
            }
        }
        else
        {
            this._onClose();
        }
    }

    p._dragPrev = function(target)
    {
        if(this._currentIndex <= 0)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = true;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
    }

    p._dragNext = function(target)
    {
        if(this._currentIndex >= this._dataCount - 1)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._isToPrevDirection = false;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }
    }

    p.loadImage = function(vo)
    {
        this._imageLoader.reset();
        this._imageLoader.alpha = 0;
        this._imageLoader.load(vo.imageurls[this._currentNodeIndex]);

        pt.dragPrevNext.listen(this._imageLoader, this, this._dragPrev, this._dragNext, null, "x", false, 0, 0);

        this._loading && this._loading.show();

        this._imageLoader.information = vo.description;
    }

    p.loadVideo = function(vo)
    {
        if(this._mediaPlayer)
        {
            this._mediaPlayer.dispose();
            this._mediaPlayer.removeFromParent();
            this._mediaPlayer = null;
        }

        this._mediaPlayer = new pinetreecom.MediaPlayer();
        this.addChild(this._mediaPlayer);
        this._mediaPlayer.alpha = 0;
        this._mediaPlayer.autoplay = true;
        this._mediaPlayer.loop = false;
        this._mediaPlayer.isShowControls = true;
        this._mediaPlayer.playEndHandler = Delegate.create(this, this._onMediaPlayEnd);
        this._mediaPlayer.load(vo.videourl, vo.videoType, vo.videoWidth, vo.videoHeight);

        this._resizeUI();
        this._beginNext();
    }

    p._onMediaPlayEnd = function()
    {
        //
    }

    p._onLoadImgComplete = function()
    {
        if(this._loading)
        {
            this._loading.hide();
            this._loading.visible = false;
        }

        this._resizeUI();
        this._beginNext();
    }

    p._onShowComplete = function()
    {
        //this.mouseChildren = this.mouseEnabled = true;
    }

    p._onTweenBgUpdate = function(owner)
    {

    }

    p._beginNext = function()
    {
        if(this._isClose) return;

        var offsetX = this._isToPrevDirection ? - this._tweenOffsetX : this._tweenOffsetX;

        if(this._currentVo.isImage)
        {
            this._imageLoader.x = offsetX;

            if(!this._imageLoader.tweenAlphaByCSS(1, this.tweenTime * 0.5, 0))
            {
                TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {alpha:1, ease:Linear.easeNone});
            }
            TweenMax.to(this._imageLoader, this.tweenTime * 0.5, {x:0, ease:Cubic.easeOut});

            this._titleTxt.htmlText = this._currentVo.title;

            this._titleTxt.x = this._imageLoader.getImageX() + offsetX;
            this._titleTxt.y = this._imageLoader.getImageY() - this._titleTxt.height - 10;

            TweenMax.to(this._titleTxt, this.tweenTime / 2, {x:this._imageLoader.getImageX(), alpha:1, ease:Cubic.easeOut});
        }
        else
        {
            this._mediaPlayer.tweenIn(this.tweenTime * 0.5, 0, Linear.easeNone);
            this._mediaPlayer.x = ((pt.stageWidth - this._currentVo.videoWidth) >> 1) + offsetX;
            TweenMax.to(this._mediaPlayer, this.tweenTime * 0.5, {x:(pt.stageWidth - this._currentVo.videoWidth) >> 1,
                ease:Cubic.easeOut});

            this._titleTxt.htmlText = this._currentVo.title;

            this._titleTxt.x = this._mediaPlayer.x;
            this._titleTxt.y = this._mediaPlayer.y - this._titleTxt.height - 10;

            TweenMax.to(this._titleTxt, this.tweenTime / 2, {x:this._mediaPlayer.x - offsetX, alpha:1,
                ease:Cubic.easeOut});
        }

        pinetreecom.DelayCaller.delayCall(this, this._onShowComplete, this.tweenTime * 0.5, null, true);
    }

    p._onHideImageComplete = function()
    {
        this.load(this._currentIndex);
    }

    p._onHideVideoComplete = function()
    {
        this._mediaPlayer.removeFromParent(true);
        this._mediaPlayer = null;

        this.load(this._currentIndex);
    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p.onControlClose = function(evt)
    {
        if(!this._isInited) return;
        this._onClose(null);
    }

    p.onControlInfo = function(evt)
    {
        this._deviceInfoTxt.setTexts(this._currentVo.title, this._currentVo.description);
        this._deviceInfoTxt.show();
    }

    p._onClickPNButton = function(e)
    {
        if(!this._isInited) return;

        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._isToPrevDirection = true;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex]);
        }
        else
        {
            this._isToPrevDirection = false;
            pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 2]);
        }

        this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
    }

    p._onKeyUp = function(keyCode)
    {
        switch(keyCode)
        {
            case pinetree.Keyboards.ESCAPE:
                this._onClose(null);
                break;
        }
    }

    p._onClose = function(evt)
    {
        if(!this._isInited) return;

        this.mouseChildren = this.mouseEnabled = false;
        this._pnBtns.useMouseWheel = false;

        this._isClose = true;

        this.transitionOut(Delegate.create(this, this._closeComplete));

        pinetreesite.siteController.changeDeeplinking(this.linkId);

        this._isInited = false;
    }

    p._closeComplete = function()
    {
        this.visible = false;

        this.facade.$.listUI.backToOriginParent();

        if(this._pnBtns)
        {
            this._pnBtns.removeFromParent();
        }

        if(this._imageLoader)
        {
            this._imageLoader.alpha = 0;
            this._imageLoader.reset();
        }

        if(this._mediaPlayer)
        {
            this._mediaPlayer.removeFromParent(true);
            this._mediaPlayer = null;
        }
    }

    p.getIsInited = function()
    {
        return this._isInited;
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited || !this._currentVo) return;

        this._resizeUI();
    }

    p._resizeUI = function()
    {
        var sw = pt.stageWidth;
        var sh = pt.stageHeight;

        if(this._screenMask)
        {
            this._screenMask.width = sw;

            if(pinetree.isDevice)
            {
                this._screenMask.height = sh - pt.TOP_HEIGHT;
                this._screenMask.y = pt.TOP_HEIGHT;
            }
            else
            {
                this._screenMask.height = sh;
                this._screenMask.y = 0;
            }
        }

        if(this._currentVo.isImage)
        {
            if(this._imageLoader)
            {
                TweenMax.killTweensOf(this._imageLoader, false, {x:true, y:true});
                this._imageLoader.x = 0;
                this._imageLoader.y = 0;
                this._imageLoader.update(sw, sh);

                this._titleTxt.visible = !pinetree.isSmallMode;

                this._titleTxt.x = this._imageLoader.getImageX();
                this._titleTxt.y = this._imageLoader.getImageY() - this._titleTxt.height - 10;
            }
        }
        else
        {
            if(this._mediaPlayer)
            {
                TweenMax.killTweensOf(this._mediaPlayer, false, {x:true, y:true});
                this._mediaPlayer.x = (sw - this._currentVo.videoWidth) >> 1;

                if(pinetree.isDevice)
                    this._mediaPlayer.y = (sh + pt.TOP_HEIGHT - this._bottomHeight - this._currentVo.videoHeight) >> 1;
                else
                    this._mediaPlayer.y = (sh - this._bottomHeight - this._currentVo.videoHeight) >> 1;

                this._titleTxt.x = this._mediaPlayer.x;
                this._titleTxt.y = this._mediaPlayer.y - this._titleTxt.height - 10;
            }
        }

        if(this._loading)
        {
            if(pinetree.isDevice)
            {
                this._loading.x = sw >> 1;

                if(pinetree.isDevice)
                    this._loading.y = (sh + pt.TOP_HEIGHT) >> 1;
                else
                    this._loading.y = sh >> 1;
            }
            else
            {
                this._loading.x = sw >> 1;
                this._loading.y = sh >> 1;
            }
        }

        if(pinetree.isSmallMode)
        {
            this._pnBtns.visible = false;
            this._closeBtn.visible = false;

            if(this._isInited)
            {
                pt.controlBtns.infoVisible = true;
                pt.controlBtns.closeVisible = true;
                pt.controlBtns.show(0);
                pt.controlBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
                pt.refreshControlBtns();
            }
        }
        else
        {
            pt.controlBtns.hide(0);

            if(this._pnBtns.parent)
            {
                this._pnBtns.visible = true;
                this._closeBtn.visible = true;

                if(!this._pnBtns.isShowing)
                    this._pnBtns.show();
                if(!this._closeBtn.isShowing)
                    this._closeBtn.show();

                var newX = 30;

                this._pnBtns.prevBtn.x = newX;
                this._pnBtns.nextBtn.x = sw - newX - this._nextBtnWidth;
                this._pnBtns.x = 0;
                this._pnBtns.y = (sh - this._prevBtnHeight) >> 1;

                this._closeBtn.x = sw - this._closeBtnWidth - 30;
                this._closeBtn.y = 30 + this._closeButtonOffsetY;

                this._pnBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
            }
        }

        this.width = sw;
    }

    p.transitionIn = function(callback)
    {
        this._isInited = true;

        this.visible = true;
        this._isClose = false;

        this.redraw();

        pinetreesite.siteController.bringToTop(this);

        this._screenMask.width = 0.1;
        if(pinetree.isDevice)
            this._screenMask.height = pt.stageHeight - pt.TOP_HEIGHT;
        else
            this._screenMask.height = pt.stageHeight;
        TweenMax.to(this._screenMask, this.tweenTime, {width:pt.stageWidth, delay:0.1,
            onComplete:Delegate.create(this, this._transitionInComplete, callback), ease:Circ.easeInOut});
    }

    p._transitionInComplete = function(callback)
    {
        if(pinetree.isDevice)
        {
            this.facade.$.listUI.removeFromParent();
            this.redraw();
        }

        this.addChild(this._pnBtns);

        if(!pinetree.isSmallMode)
        {
            this._pnBtns.show();
            this._closeBtn.show();
        }

        pt.controlBtns.listen(this);

        this.mouseEnabled = this.mouseChildren = true;
        this._pnBtns.useMouseWheel = !pinetree.isDevice;

        this.redraw();
        callback && callback();
    }

    p.predisposeOut = function(callback)
    {
        this.transitionOut(Delegate.create(this, this._predisposeOutComplete, callback));
    }

    p._predisposeOutComplete = function(callback)
    {
        callback && callback();
        this.dispose();
    }

    p.transitionOut = function(callback)
    {
        this.mouseChildren = this.mouseEnabled = false;

        this._loading && this._loading.hide();

        pt.controlBtns.cancel(this);
        pt.controlBtns.hide(0);

        if(this._deviceInfoTxt && this._deviceInfoTxt.visible)
        {
            this._deviceInfoTxt.hide(0);
        }

        this._pnBtns.hide(this.tweenTime * 0.5);
        this._closeBtn.hide(this.tweenTime * 0.5);

        this._pnBtns.useMouseWheel = false;

        var tweenTime = this.tweenTime;

        if(this._currentVo.isImage)
        {
            TweenMax.to(this._imageLoader, tweenTime, {x:-50, ease:Cubic.easeInOut});
            if(!this._imageLoader.tweenAlphaByCSS(0, tweenTime, 0, "ease-out"))
            {
                TweenMax.to(this._imageLoader, tweenTime, {alpha:0, ease:Quad.easeOut});
            }
            this._imageLoader.mouseMovable = false;
        }
        else
        {
            if(this._mediaPlayer)
            {
                this._mediaPlayer.tweenOut(tweenTime, 0, Quad.easeOut);
                TweenMax.to(this._mediaPlayer, tweenTime, {x:this._mediaPlayer.x - 50, ease:Cubic.easeInOut});
            }
        }

        TweenMax.to(this._titleTxt, tweenTime, {x:this._titleTxt.x - 50, alpha:0,
            ease:Cubic.easeInOut});

        TweenMax.to(this._screenMask, tweenTime, {width:0, delay:tweenTime * 0.5,
            onComplete:callback, ease:Circ.easeInOut});
    }

    p.predispose = function()
    {
        if(this._isInited) return;
        this.dispose();
    }

    p.dispose = function()
    {
        this._isInited = false;

        pt.controlBtns.cancel(this);
        pinetreecom.KeyboardUtil.cancelByOwner(this);

        this._currentVo = null;

        if(this._screenMask)
        {
            TweenMax.killTweensOf(this._screenMask);
            this._screenMask.removeFromParent(true);
            this._screenMask = null;
        }

        if(this._imageLoader)
        {
            TweenMax.killTweensOf(this._imageLoader.imageContainer);
            this._imageLoader.dispose();
            this._imageLoader = null;
        }

        if(this._mediaPlayer)
        {
            this._mediaPlayer.removeFromParent(true);
            this._mediaPlayer = null;
        }

        this._pnBtns && this._pnBtns.removeFromParent(true);
        this._pnBtns = null;

        if(this._closeBtn)
        {
            this._closeBtn.removeEventListener(pinetree.MouseEvent.CLICK, this._onClose, this);
            this._closeBtn.removeFromParent(true);
            this._closeBtn = null;
        }

        pt.dragPrevNext.remove();

        pinetreecom.DelayCaller.removeByOwner(this);

        this.removeFromParent();
        this._originParent = null;

        this.facade.$.imagesUI = null;
        pinetreepages.PortfolioBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioImages = PortfolioImages;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var PortfolioList = function()
    {
        pinetreepages.PortfolioBase.call(this);

        this._currentIndex = 0;
        this._dataCount = 0;

        this._gap = 20;

        this._isTweening = false;

        this.EDGE_CONST_SMALL = 30 * 2;
        this.EDGE_CONST_NORMAL = 100 * 2;

        this._itemEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        this._itemWidth = 0;
        this._itemHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;

        this._useKeyControl = true;

        this._row = 1;

        this._currentColumn = 0;

        this._currentListContentWidth = 0;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._originParent = null;

        this._listContainer = null;
        this._buttonList = null;
        this._pnBtns = null;

        this._isInited = false;

        this._isOpenImage = false;

        this.visible = false;

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(PortfolioList, pinetreepages.PortfolioBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;
        }
        pinetreepages.PortfolioBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.PortfolioBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = data.length;

        this._itemWidth = this.facade.$.setting.thumbWidth;
        this._itemHeight = this.facade.$.setting.thumbHeight;
        this._gap = this.facade.$.setting.gap;
        this._row = this.facade.$.setting.row;
        this._offsetY = this.facade.$.setting.itemOffsetY;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._initUI();

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._initUI = function()
    {
        this._listContainer = new pinetreecom.ListContainer();
        this.addChild(this._listContainer);
        this._listContainer.animateTime = this.tweenTime;
        this._listContainer.animateDelay = 0.1 * this.tweenTime;
        this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
        this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
        this._listContainer.ON_OVER.add(this, this.onOverItem);
        this._listContainer.ON_OUT.add(this, this.onOutItem);
        this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
        this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
        this._listContainer.onlyFullShown = true;
        this._listContainer.useRealPosition = false;
        this._listContainer.useRealStagePos = false;
        this._listContainer.showAllWhileDevice = false;
        this._listContainer.useIntPosition = true;

        this._listContainer.reset();

        this._listContainer.setUpWith(pinetreepages.PortfolioListRender, this._itemWidth, this._itemHeight,
            this._gap, this._gap, pinetreecom.AlignUtil.ALIGN_HORIZONTAL, this._row, this.data,
            pt.stageWidth, pt.stageHeight);

        this._buttonList = new pinetreecom.ButtonList(pinetreecom.MiniCircle, this.data.length);
        this.addChild(this._buttonList);

        this._buttonList.ON_CLICK.add(this, this.onClickButton);
        this._buttonList.onOverColor = pt.onOverColor;
        this._buttonList.onOutColor = pt.onOutColor;
        this._buttonList.onOverAlpha = 1.0;
        this._buttonList.onOutAlpha = 0.2;
        this._buttonList.gap = pinetree.isDevice ? 10 : 10;
        this._buttonList.itemSize = pinetree.isDevice ? 5 * 2 : 5 * 2;
        this._buttonList.alignType = pinetreecom.ButtonList.ALIGN_HORIZONTAL;
        this._buttonList.init();
        this._buttonList.visible = this._pageTotal > 1;
        this._buttonList.setSelectBtn(0);

        var prevTex = pt.getCommonTexture(pinetreepages.EnumTextures.PREV_ICON);
        var prevBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
        prevBtn.setTextures(prevTex);
        var nextTex = pt.getCommonTexture(pinetreepages.EnumTextures.NEXT_ICON);
        var nextBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.5);
        nextBtn.setTextures(nextTex);
        this._pnBtns = new pinetreecom.TexturePNButtons(prevBtn, nextBtn, false);
        this._pnBtns.onOverColor = pt.onOverColor;
        this._pnBtns.onOutColor = pt.onOutColor;
        this._pnBtns.hide(0);
        this._pnBtns.ON_CHANGE.add(this, this._onClickPNButton);

        this._prevBtnWidth = prevTex.sourceWidth;
        this._nextBtnWidth = nextTex.sourceWidth;
        this._prevBtnHeight = prevTex.sourceHeight;
        this._nextBtnHeight = nextTex.sourceHeight;

        if(pinetree.isSmallMode)
            pinetree.staticStage.addChild(this._pnBtns);
        else
            this.addChild(this._pnBtns);

        this.enabled = false;
    }

    p.onClickButton = function(e)
    {
        if(e.index == this._pageIndex)
        {
            return;
        }

        this._pageIndex = e.index;
        this._tweenListPosition();

        this._pnBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
    }

    p._tweenListPosition = function()
    {
        var x = this._pageIndex * - 1 * (this._currentListContentWidth + this._gap);
        this._listContainer.updateCurrentPos(x);
        TweenMax.to(this._listContainer.itemContainer, this.tweenTime, {x:x, ease:Quart.easeOut});
        this._listContainer.mouseChildren = false;
        pinetreecom.DelayCaller.delayCall(this, this.setEnabled, this.tweenTime * 0.8, [true], true);
        this.redraw();
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        this._pnBtns.useMouseWheel = value && !pinetree.isSmallMode;
        this._pnBtns.useKeyArrow = value && !pinetree.isSmallMode;
        this._listContainer.mouseChildren = true;
    }

    p.tweenInComplete = function()
    {
        //
    }

    p.tweenOutComplete = function()
    {

    }

    p.onOverItem = function(index)
    {

    }

    p.onOutItem = function(index)
    {

    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p._onClickPNButton = function(e)
    {
        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._pageIndex --;
        }
        else
        {
            this._pageIndex ++;
        }

        if(this._pageIndex >= 0 && this._pageIndex < this._pageTotal)
        {
            this._tweenListPosition();
            this._buttonList.setSelectBtn(this._pageIndex);
        }
    }

    p.onClickThumbnail = function(index)
    {
        this._currentIndex = index;

        var vo = this.data[this._currentIndex];
        var imageurl = vo.imageurls[0];
        if(imageurl && imageurl.indexOf("is_page") > -1)
        {
            var page = imageurl.substring("is_page:".length);
            pinetreecom.LinkManager.to(page);
            return;
        }

        this.enabled = false;
        //this.animateOut(Delegate.create(this, this._onGoToImages));
        this._onGoToImages();
    }

    p._onGoToImages = function()
    {
        if(pinetree.isDevice)
        {
            this.removeFromParent();
        }
        pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 1]);
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.NewsBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        /*if(this._isInited)
        {
            this.animateOut(Delegate.create(this, this.changeLinkParams, linkId, linkParams));
            return;
        }*/

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(!isNaN(index) && this.facade.$.imagesUI && !this.facade.$.imagesUI.isInited)
            {
                if(index > 0 && index <= this._dataCount)
                {
                    this.enabled = false;
                    this.ON_CHANGE.dispatch(index - 1);
                    this._isOpenImage = true;
                    this._pnBtns.useMouseWheel = false;

                    pt.controlBtns.cancel(this);
                }
            }
        }
    }

    p.backToOriginParent = function()
    {
        if(pinetree.isDevice)
        {
            this._originParent.addChild(this);
        }
        this.enabled = true;
        this._isOpenImage = false;
        this.redraw();
        pt.controlBtns.listen(this);

        //this.animateIn();
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        this._itemEdge = pinetree.isSmallMode ? this.EDGE_CONST_SMALL : this.EDGE_CONST_NORMAL;

        var w = sw - this._itemEdge;
        if(w < this._itemWidth)
        {
            w = this._itemWidth + this._itemEdge;
        }
        this._listContainer.resize(w, sh);

        var column = Math.floor((sw - this._itemEdge + this._gap) / (this._itemWidth + this._gap));
        if(column < 1) column = 1;

        if(this._currentColumn != column)
        {
            this._currentColumn = column;
            this._currentListContentWidth = (this._itemWidth + this._gap) * column - this._gap;

            var itemIndex = this._pageIndex * this._pageTotal;
            if(itemIndex > this._dataCount - 1)
            {
                itemIndex = this._dataCount - 1;
            }
            var pageIndex = Math.floor(itemIndex / column);

            this._pageTotal = Math.ceil(Math.ceil(this._dataCount / this._row) / column);
            this._buttonList.count = this._pageTotal;
            this._buttonList.visible = this._pageTotal > 1;

            if (pageIndex != this._pageIndex)
            {
                this._pageIndex = pageIndex;
                this._buttonList.setSelectBtn(this._pageIndex);
                this._tweenListPosition();
            }
        }

        this._listContainer.x = (sw - this._currentListContentWidth) >> 1;
        this._listContainer.y = ((sh - this._listContainer.contentHeight) >> 1)
            + this._offsetY;

        if (this._buttonList.visible)
        {
            this._buttonList.x = (sw - this._buttonList.contentWidth + this._buttonList.buttonSize) >> 1;
            var btnMaxY = sh - this._buttonList.contentHeight - pt.FOOTER_HEIGHT
                + Math.floor(this._buttonList.buttonSize / 2) - 20;
            var y = this._listContainer.y + this._listContainer.contentHeight + 100 - this._offsetY;
            if(y > btnMaxY) y = btnMaxY;
            this._buttonList.y = y;
        }

        if(pinetree.isSmallMode)
        {
            this._pnBtns.visible = false;
            this._pnBtns.useMouseWheel = false;

            if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
            {
                return;
            }

            pt.controlBtns.infoVisible = false;
            pt.controlBtns.closeVisible = false;
            pt.controlBtns.show(0);
            pt.controlBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
            pt.refreshControlBtns();
        }
        else
        {
            pt.controlBtns.hide(0);

            this._pnBtns.visible = true;
            this._pnBtns.useMouseWheel = !this._isOpenImage;

            if(!this._pnBtns.isShowing)
                this._pnBtns.show();

            if(this._pnBtns.parent != this)
            {
                this.addChild(this._pnBtns);
            }

            var newX = 30;

            this._pnBtns.prevBtn.x = newX;
            this._pnBtns.nextBtn.x = sw - newX - this._nextBtnWidth;
            this._pnBtns.x = 0;
            this._pnBtns.y = (sh - this._prevBtnHeight) >> 1;

            this._pnBtns.showPNButtons(this._pageIndex > 0, this._pageIndex < this._pageTotal - 1);
        }
    }

    p.animateIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        this._pnBtns.show();

        this._listContainer.animateDelay = 0.1 * this.tweenTime;
        pinetreecom.DelayCaller.delayAfterFrames(this._listContainer, this._listContainer.animationIn, 10,
            [pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM,  this.tweenTime, Cubic.easeOut]);

        pinetreecom.DelayCaller.delayCall(this, this._onAnimateInComplete, this.tweenTime, null, true);
    }

    p._onAnimateInComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;

        pt.controlBtns.listen(this);

        if(this._buttonList)
        {
            this._buttonList.show();
        }
    }

    p.animateOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        this._pnBtns.hide(this.tweenTime * 0.5);

        pt.controlBtns.cancel(this);

        if(this._buttonList)
            this._buttonList.hide();

        this._listContainer.animateDelay = 0.05 * this.tweenTime;
        this._listContainer.animationOut(pinetreecom.ListBase.ANI_DIRECTION_BOTTOM2TOP,
            this.tweenTime * 1.2, Cubic.easeInOut, callback);
    }

    p.transitionIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        this._listContainer.y = - this._listContainer.contentHeight;

        this._listContainer.animateDelay = 0;
        this._listContainer.animationIn(pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM, 0, Cubic.easeOut);

        this._listContainer.resize(pt.stageWidth - this._itemEdge, pt.stageHeight);

        var y = ((pt.stageHeight - this._listContainer.contentHeight) >> 1)
            + this._offsetY;
        TweenMax.to(this._listContainer, this.tweenTime * 1.2, {y:y, ease:Quart.easeOut,
            onComplete:Delegate.create(this, this._onAniComplete)});
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;

        pt.controlBtns.listen(this);

        this._pnBtns.show();

        if(this._buttonList)
        {
            this._buttonList.show();
        }

        if(this.linkParams)
        {
            this.changeLinkParams(this.linkId, this.linkParams);
        }
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        this._pnBtns.hide(this.tweenTime * 0.5);

        pt.controlBtns.cancel(this);

        if(this._buttonList)
            this._buttonList.hide();

        pt.controlBtns.hide();

        TweenMax.to(this._listContainer, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
            onComplete:callback});
    }

    p.predispose = function()
    {
        this.enabled = false;

        if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
        {
            this.facade.$.imagesUI.predisposeOut(Delegate.create(this, this.transitionOut,
                Delegate.create(this, this.dispose)));
        }
        else if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        pt.controlBtns.cancel(this);
        pt.controlBtns.hide(0);

        this._buttonList && this._buttonList.dispose();
        this._buttonList = null;

        this._pnBtns && this._pnBtns.removeFromParent(true);
        this._pnBtns = null;

        this._listContainer && this._listContainer.dispose();
        this._listContainer = null;

        this._originParent = null;

        this.facade.$.listUI = null;
        pinetreepages.PortfolioBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioList = PortfolioList;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var PortfolioListDevice = function()
    {
        pinetreepages.PortfolioBase.call(this);

        this._currentIndex = 0;
        this._dataCount = 0;

        this._gap = 20;

        this._isTweening = false;

        this.EDGE_CONST_SMALL = 30;
        this._itemEdge = this.EDGE_CONST_SMALL;

        this._itemWidth = 0;
        this._itemHeight = 0;

        this._prevBtnWidth = 0;
        this._nextBtnWidth = 0;
        this._prevBtnHeight = 0;
        this._nextBtnHeight = 0;

        this._oldScrollX = 0;
        this._oldScrollY = 0;

        this._currentColumn = 0;

        this._currentListContentWidth = 0;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._originParent = null;

        this._listContainer = null;
        this._buttonList = null;
        this._pnBtns = null;

        this._isInited = false;

        this.visible = false;

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(PortfolioListDevice, pinetreepages.PortfolioBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._originParent = this.parent;
        }
        pinetreepages.PortfolioBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.PortfolioBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = data.length;

        this._itemWidth = this.facade.$.setting.thumbWidth;
        this._itemHeight = this.facade.$.setting.thumbHeight;
        this._gap = this.facade.$.setting.gap;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._initUI();

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._initUI = function()
    {
        this._listContainer = new pinetreecom.ListContainer();
        this.addChild(this._listContainer);
        this._listContainer.animateTime = this.tweenTime;
        this._listContainer.animateDelay = 0.1 * this.tweenTime;
        this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
        this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
        this._listContainer.ON_OVER.add(this, this.onOverItem);
        this._listContainer.ON_OUT.add(this, this.onOutItem);
        this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
        this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
        this._listContainer.onlyFullShown = true;
        this._listContainer.useRealPosition = false;
        this._listContainer.useRealStagePos = false;
        this._listContainer.showAllWhileDevice = true;
        this._listContainer.useIntPosition = true;

        this._listContainer.reset();

        this._listContainer.setUpWith(pinetreepages.PortfolioListDeviceRender, this._itemWidth, this._thumbHeight,
            0, this._gap, pinetreecom.AlignUtil.ALIGN_VERTICAL, 1, this.data,
            pt.stageWidth, pt.stageHeight);

        this.enabled = false;
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        this._listContainer.mouseChildren = true;
    }

    p.tweenInComplete = function()
    {

    }

    p.tweenOutComplete = function()
    {

    }

    p.onOverItem = function(index)
    {

    }

    p.onOutItem = function(index)
    {

    }

    p.onControlPNChange = function(e)
    {
        if(!this._isInited) return;
        this._onClickPNButton(e);
    }

    p.onClickThumbnail = function(index)
    {
        this._currentIndex = index;

        var vo = this.data[this._currentIndex];
        var imageurl = vo.imageurls[0];
        if(imageurl && imageurl.indexOf("is_page") > -1)
        {
            var page = imageurl.substring("is_page:".length);
            pinetreecom.LinkManager.to(page);
            return;
        }

        this.enabled = false;
        this.animateOut(Delegate.create(this, this._onGoToImages));
    }

    p._onGoToImages = function()
    {
        this.removeFromParent();
        pinetreesite.siteController.changeDeeplinking(this.linkId, [this._currentIndex + 1]);
    }

    p.changeLinkParams = function(linkId, linkParams)
    {
        pinetreepages.PortfolioBase.prototype.changeLinkParams.call(this, linkId, linkParams);

        if(this._isInited)
        {
            this.animateOut(Delegate.create(this, this.changeLinkParams, linkId, linkParams));
            return;
        }

        if(linkParams && pinetreecom.ArrayUtil.isArray(linkParams) && linkParams.length > 0)
        {
            var index = parseInt(linkParams[0]);
            if(!isNaN(index) && this.facade.$.imagesUI && !this.facade.$.imagesUI.isInited)
            {
                if(index > 0 && index <= this._dataCount)
                {
                    this.enabled = false;
                    this.ON_CHANGE.dispatch(index - 1);
                }
            }
        }
    }

    p.backToOriginParent = function()
    {
        this._originParent.addChild(this);
        this.animateIn();

        window.scrollTo(this._oldScrollX, this._oldScrollY);
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        this._listContainer.resize(sw, sh - pt.TOP_HEIGHT);
        this._listContainer.x = this._itemEdge;
        this._listContainer.y = this._itemEdge + pt.TOP_HEIGHT;
    }

    p.animateIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        this._listContainer.animateDelay = 0.01 * this.tweenTime;
        pinetreecom.DelayCaller.delayAfterFrames(this._listContainer, this._listContainer.animationIn, 10,
            [pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM,  this.tweenTime, Cubic.easeOut]);

        pinetreecom.DelayCaller.delayCall(this, this._onAnimateInComplete, this.tweenTime, null, true);
    }

    p._onAnimateInComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;
    }

    p.animateOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        this._oldScrollX = pinetree.getScrollX();
        this._oldScrollY = pinetree.getScrollY();

        this._listContainer.animateDelay = 0.01 * this.tweenTime;
        this._listContainer.animationOut(pinetreecom.ListBase.ANI_DIRECTION_BOTTOM2TOP,
            this.tweenTime * 1.2, Cubic.easeInOut, callback);
    }

    p.transitionIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.visible = true;
        this.redraw();

        if(this.linkParams)
        {
            this.changeLinkParams(this.linkId, this.linkParams);
        }
        else
        {
            this._listContainer.animateDelay = 0;
            this._listContainer.animationIn(pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM, this.tweenTime, Cubic.easeOut);

            this._listContainer.resize(pt.stageWidth - this._itemEdge * 2, pt.stageHeight);

            TweenMax.to(this._listContainer, this.tweenTime * 1.2, {ease: Quart.easeOut,
                onComplete: Delegate.create(this, this._onAniComplete)
            });
        }
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        /*TweenMax.to(this._listContainer, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
            onComplete:callback});*/
        this.animateOut(callback);
    }

    p.predispose = function()
    {
        this.enabled = false;

        if(this.facade.$.imagesUI && this.facade.$.imagesUI.isInited)
        {
            this.facade.$.imagesUI.predisposeOut(Delegate.create(this, this.dispose));
        }
        else if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        this._listContainer && this._listContainer.dispose();
        this._listContainer = null;

        this._originParent = null;

        this.facade.$.listUI = null;
        pinetreepages.PortfolioBase.prototype.dispose.call(this);
    }

    pinetreepages.PortfolioListDevice = PortfolioListDevice;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-7-31.
 */
(function()
{
    var ReelView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._bg = null;
        this._bgAlpha = 0.95;

        this._textHeight = 250;

        this._url = "";
        this._type = "";
        this._title = "";
        this._description = "";
        this._displayType = "1";
        this._autoPlay = true;
        this._loop = false;
        this._videoWidth = 500;
        this._videoHeight = 200;
        this._curVideoWidth = 0;
        this._curVideoHeight = 0;

        this._startY = pinetree.isDevice ? pt.TOP_HEIGHT + 30 : pt.TOP_HEIGHT + pt.START_Y;
        this._textPadding = 25;
        this._gapX = 25;
        this._gapY = 0;

        this._hasText = true;
        this._mediaPlayer = null;

        this._panelWidth = pinetree.isDevice ? 600 : 670;
        this._useTextScroll = true;
        this._hasControl = true;

        this._dataLoader = null;
        this._textContainer = null;

        this.x = pt.LEFT_WIDTH;
    }

    var p = __extends(ReelView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._dataLoader = new pinetreecom.FileLoader(pt.assetLoading, this.data.size);
            this._dataLoader.ON_IO_ERROR.add(this, this.onIOError);
            this._dataLoader.ON_LOAD_COMPLETE.add(this, this.onLoadDataComplete);
            this._dataLoader.load(new pinetree.URLRequest(this.data.src));
        }
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.onLoadDataComplete = function(loader)
    {
        var data = JSON.parse(loader.data);
        if(data)
        {
            this._type = __defaultSet(data.type, "video");
            this._title = data.title || this._title;
            this._url = data.url || "";
            this._description = data.description || this._description;
            this._displayType = __defaultSet(data.displayType, "1");
            this._autoPlay = __defaultSet(data.autoPlay, true);
            this._loop = __defaultSet(data.loop, false);
            this._videoWidth = data.videoWidth || this._videoWidth;
            this._videoHeight = data.videoHeight || this._videoHeight;
            this._hasControl = __defaultSet(data.hasControl, true);

            this._bgAlpha = __defaultSet(data.panelBgAlpha, this._bgAlpha);

            this._hasText = this._displayType == "1";

            if(this._hasText)
            {
                this._curVideoWidth = this._panelWidth - this._gapX - this._gapX;
                this._curVideoHeight = Math.floor(this._curVideoWidth * data.videoHeight / data.videoWidth);
            }
            else
            {
                this._curVideoWidth = this._videoWidth;
                this._curVideoHeight = this._videoHeight;

                this._panelWidth = 0;
                this.positionRef = "fixed";
            }
        }

        this.initUI();
    }

    p.initUI = function()
    {
        this._bg = new pinetree.Quad();
        this._bg.positionRef = "fixed";
        this._bg.color = pt.bgColor;
        this._bg.alpha = this._bgAlpha;
        this.addChild(this._bg);

        this._bg.width = 0;

        if(this._hasText)
        {
            this._txtContainer = new pinetreecom.TextContainer(this._panelWidth, 200,
                pt.bgColor, 0, this._useTextScroll, true, false);
            this._txtContainer.padding = this._textPadding;
            this._txtContainer.paddingRight = this._textPadding + this._gapX;
            this._txtContainer.alpha = 0;
            this.addChild(this._txtContainer);
            this._txtContainer.init();
            this._txtContainer.scrollGapX = this._gapX;
            this._txtContainer.x = 0;
            this._txtContainer.y = this._startY + this._curVideoHeight + this._gapY;
            this._txtContainer.title = this._title;
            this._txtContainer.information = this._description;
        }
        else
        {
            //
        }

        this.transitionIn();
    }

    p._loadVideo = function()
    {
        this._mediaPlayer = new pinetreecom.MediaPlayer();
        this.addChild(this._mediaPlayer);
        this._mediaPlayer.alpha = 0;
        this._mediaPlayer.autoplay = this._autoPlay;
        this._mediaPlayer.loop = this._loop;
        this._mediaPlayer.x = this._gapX;
        this._mediaPlayer.y = this._startY;
        this._mediaPlayer.isShowControls = this._hasControl;
        this._mediaPlayer.load(this._url, this._type, this._videoWidth, this._videoHeight);
        this._mediaPlayer.width = this._curVideoWidth;
        this._mediaPlayer.height = this._curVideoHeight;

        this._mediaPlayer.tweenIn(this.tweenTime / 2, this._hasText ? 0.1 : 0, Linear.easeNone);
    }

    p.resize = function(sw, sh)
    {
        if(this._bg)
        {
            this._bg.height = sh;
        }

        if(this._hasText)
        {
            if(this._txtContainer)
            {
                var txtHeight = sh - this._startY - 30 - this._curVideoHeight - this._gapY + this._textPadding;
                this._txtContainer.contentHeight = txtHeight;
            }
        }
        else
        {
            if(this._mediaPlayer)
            {
                var videoX, videoY;
                if(this._displayType == "2")
                {
                    var scale = Math.max(sw / this._videoWidth, sh / this._videoHeight);
                    this._curVideoWidth = this._videoWidth * scale;
                    this._curVideoHeight = this._videoHeight * scale;
                    videoX = ((sw - this._curVideoWidth) >> 1) - pt.LEFT_WIDTH;
                    videoY = (sh - this._curVideoHeight) >> 1;
                }
                else if(this._displayType == "3")
                {
                    this._curVideoWidth = sw - this._panelWidth - pt.LEFT_WIDTH;
                    this._curVideoHeight = sh;
                    videoX = 0;
                    videoY = 0;
                }

                this._mediaPlayer.width = this._curVideoWidth;
                this._mediaPlayer.height = this._curVideoHeight;
                this._mediaPlayer.x = videoX;
                this._mediaPlayer.y = videoY;
            }
        }

        this.x = pt.LEFT_WIDTH;
    }

    p.transitionIn = function()
    {
        this.redraw();

        if(this._hasText)
        {
            TweenMax.to(this._bg, this.tweenTime, {width:this._panelWidth, ease:Cubic.easeInOut,
                onComplete:Delegate.create(this, this.transitionInComplete)});
        }
        else
        {
            this.transitionInComplete();
        }
    }

    p.transitionInComplete = function()
    {
        this._loadVideo();
        this.redraw();

        if(this._hasText)
        {
            TweenMax.to(this._txtContainer, this.tweenTime / 2, {alpha:1, ease:Linear.easeNone});
        }

        pinetreepages.ViewBase.prototype.transitionInComplete.call(this);
    }

    p.transitionOut = function()
    {
        if(this._hasText)
        {
            this._mediaPlayer.tweenOut(this.tweenTime / 2, 0, Linear.easeNone);

            TweenMax.killTweensOf(this._txtContainer);
            TweenMax.to(this._txtContainer, this.tweenTime / 2, {alpha:0, delay: this._hasText ? 0.1 : 0, ease:Linear.easeNone});

            TweenMax.killTweensOf(this._bg);
            TweenMax.to(this._bg, this.tweenTime, {width:0, delay:this.tweenTime * 0.4, delay:this.tweenTime * 0.4,
                ease:Quart.easeInOut, onComplete:Delegate.create(this, this.transitionOutComplete)});
        }
        else
        {
            this._mediaPlayer.tweenOut(this.tweenTime / 2, 0, Linear.easeNone,
                Delegate.create(this, this.transitionOutComplete));
        }
    }

    p.transitionOutComplete = function()
    {
        if(this._mediaPlayer)
            this._mediaPlayer.pause();

        pinetreepages.ViewBase.prototype.transitionOutComplete.call(this);
    }

    p.dispose = function()
    {
        this._dataLoader && this._dataLoader.dispose();
        this._dataLoader = null;

        this._mediaPlayer && this._mediaPlayer.dispose();
        this._mediaPlayer = null;

        if(this._hasText)
        {
            TweenMax.killTweensOf(this._txtContainer);
            this._txtContainer && this._txtContainer.dispose();
            this._txtContainer = null;
        }

        TweenMax.killTweensOf(this._bg);

        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ReelView]";
    }

    pinetreepages.ReelView = ReelView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var ServiceView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);
    }

    var p = __extends(ServiceView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function()
    {

    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object ServiceView]";
    }

    pinetreepages.ServiceView = ServiceView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{

    var SlideshowView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._slideshowFacade = null;
        this._container = null;
    }

    var p = __extends(SlideshowView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);

        this._slideshowFacade = new pinetreepages.SlideshowFacade();
        this._slideshowFacade.ON_DISPOSE_COMPLETE.add(this, this._mvcDisposed);
        this._container = new pinetree.Sprite();
        this.addChild(this._container);
    }

    p.transitionIn = function()
    {
        this._slideshowFacade.startUp({container:this._container, source:this.data.src, size:this.data.size});
        this.transitionInComplete();

        if(pt.bgPage)
        {
            pt.bgPage.view.showTile(false);
        }
    }

    p.transitionOut = function()
    {
        this._slideshowFacade && this._slideshowFacade.predispose();
    }

    p._mvcDisposed = function()
    {
        this.transitionOutComplete();

        if(pt.bgPage)
        {
            pt.bgPage.view.showTile(true);
        }
    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object SlideshowView]";
    }

    pinetreepages.SlideshowView = SlideshowView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-4-19.
 */
(function()
{

    var SlideshowFacade = function()
    {
        pinetreemvc.Facade.call(this);

        this.$ = {
            //notification
            NFT_START_UP:"notification_start_up",
            NFT_DATA_LOAD_COMPLETE:"notification_data_load_complete",
            NFT_IMAGE_CHANGE:"notification_image_change",
            NFT_IMAGE_LOAD_COMPLETE:"notification_image_load_complete",
            NFT_SLIDESHOW_START:"notification_slideshow_start",
            NFT_SLIDESHOW_PAUSE:"notification_slideshow_pause",
            NFT_SLIDESHOW_RESUME:"notification_slideshow_resume",
            NFT_SLIDESHOW_STOP:"notification_slideshow_stop",
            NFT_TIMER_UPDATE:"notification_timer_update",
            //data
            setting:null,
            loadedCount:0,
            root:null,

            timerUI:null,
            imagesUI:null,
            textsUI:null,
            listUI:null
        }
    }

    var p = __extends(SlideshowFacade, pinetreemvc.Facade);

    p.startUp = function(data)
    {
        this.registerCommand(this.$.NFT_START_UP, pinetreepages.SlideshowStartUpCommand);
        this.sendNotification(this.$.NFT_START_UP, data);
    }

    pinetreepages.SlideshowFacade = SlideshowFacade;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowSetting = function()
    {
        this.duration = 10;
        this.disableImageZoom = false;
        this.imageAlign = "lt";
        this.leftButtonName = "";
        this.rightButtonName = "";
        this.leftButtonLink = "";
        this.rightButtonLink = "";

        this.marginLeft = 0;
        this.marginRight = 0;
        this.marginTop = 0;
        this.marginBottom = 0;
    }

    SlideshowSetting.from = function(obj)
    {
        var setting = new pinetreepages.SlideshowSetting();
        setting.duration = obj.duration;
        setting.disableImageZoom = !!obj.disableImageZoom;
        setting.imageAlign = obj.imageAlign == undefined ? setting.imageAlign : obj.imageAlign;
        setting.leftButtonName = obj.leftButtonName;
        setting.rightButtonName = obj.rightButtonName;
        setting.leftButtonLink = obj.leftButtonLink;
        setting.rightButtonLink = obj.rightButtonLink;

        setting.marginLeft = obj.marginLeft || 0;
        setting.marginRight = obj.marginRight || 0;
        setting.marginTop = obj.marginTop || 0;
        setting.marginBottom = obj.marginBottom || 0;
        return setting;
    }

    pinetreepages.SlideshowSetting = SlideshowSetting;
})();

/**
 * Created by foreverpinetree@gmail.com on 2014/12/4.
 */
(function()
{
    var SlideTextVo = function()
    {
        this.bgColor = 0xffffff;
        this.bgAlpha = 1.0;
        this.textColor = 0x000000;
        this.fontSize = 30;
        this.x = 0;
        this.y = 0;
        this.gap = 5;
        this.text = "";
        this.link = "";
        this.isLeft = true;
        this.isTop = true;
        this.textWidth = 450;
    }

    SlideTextVo.from = function(obj)
    {
        var vo = new pinetreepages.SlideTextVo();
        vo.text = obj.title || vo.text;
        vo.link = obj.link || vo.link;
        vo.bgColor = pt.fromColorString(obj.bgColor);
        vo.bgAlpha = __defaultSet(obj.bgAlpha, vo.bgAlpha);
        vo.fontSize = __defaultSet(obj.fontSize, vo.fontSize);
        vo.textWidth = __defaultSet(obj.textWidth, vo.textWidth);
        vo.textColor = pt.fromColorString(obj.textColor);
        return vo;
    }

    pinetreepages.SlideTextVo = SlideTextVo;
}());


/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowVo = function()
    {
        this.title = "";
        this.description = "";
        this.thumburl = "";
        this.imageurl = "";
        this.landscapeurl = "";
        this.imageAlign = "ct";
        this.texts = null;
    }

    SlideshowVo.from = function(obj)
    {
        var vo = new pinetreepages.SlideshowVo();
        vo.title = obj.title;
        vo.description = obj.description;
        vo.thumburl = obj.thumburl;
        vo.imageurl = pinetree.isDevice && obj.deviceImageurl != undefined ? obj.deviceImageurl : obj.imageurl;
        if(pinetree.isDevice)
        {
            vo.landscapeurl = obj.landscapeurl || obj.imageurl || '';
        }
        vo.imageAlign = obj.imageAlign || vo.imageAlign;

        var align = pinetree.isDevice ? (obj.deviceAlign || "") : (obj.align || "");
        var isLeft = !(align.indexOf("right") > -1);
        var isTop = !(align.indexOf("bottom") > -1);

        var x = __defaultSet(pinetree.isDevice ? obj.deviceX : obj.x, 0);
        var y = __defaultSet(pinetree.isDevice ? obj.deviceY : obj.y, 0);
        var gap = __defaultSet(obj.gap, 5);

        vo.texts = [];

        var len = obj.text.length, textVo;
        for(var i = 0; i < len; i ++)
        {
            textVo = pinetreepages.SlideTextVo.from(obj.text[i]);
            textVo.isLeft = isLeft;
            textVo.isTop = isTop;
            textVo.x = x;
            textVo.y = y;
            textVo.gap = gap;

            vo.texts.push(textVo);
        }

        return vo;
    }

    pinetreepages.SlideshowVo = SlideshowVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    SlideshowProxy.NAME = "SlideshowProxy";

    var p = __extends(SlideshowProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.SlideshowSetting.from(jsonData.setting);
        this.facade.$.setting = setting;

        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.SlideshowVo.from(jsonData.data[i]);
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_COMPLETE, data);
    }

    pinetreepages.SlideshowProxy = SlideshowProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var SlideshowImagesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);
        viewComponent.ON_SLIDESHOW_START.add(this, this.onSlideshowStart);
        viewComponent.ON_SLIDESHOW_STOP.add(this, this.onSlideshowStop);
        viewComponent.ON_SLIDESHOW_PAUSE.add(this, this.onSlideshowPause);
        viewComponent.ON_SLIDESHOW_RESUME.add(this, this.onSlideshowResume);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP
        ];
    }

    SlideshowImagesMediator.NAME = "SlideshowImagesMediator";

    var p = __extends(SlideshowImagesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onSlideshowStart = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_START);
    }

    p.onSlideshowStop = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_STOP);
    }

    p.onSlideshowPause = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_PAUSE);
    }

    p.onSlideshowResume = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_RESUME);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.SlideshowImagesMediator = SlideshowImagesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var SlideshowListMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_SLIDESHOW_START.add(this, this.onSlideshowStart);
        viewComponent.ON_SLIDESHOW_STOP.add(this, this.onSlideshowStop);
        viewComponent.ON_SLIDESHOW_PAUSE.add(this, this.onSlideshowPause);
        viewComponent.ON_SLIDESHOW_RESUME.add(this, this.onSlideshowResume);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP,
            facade.$.NFT_TIMER_UPDATE
        ];
    }

    SlideshowListMediator.NAME = "SlideshowListMediator";

    var p = __extends(SlideshowListMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                this.viewComponent.imageLoadComplete(data);
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            case this.facade.$.NFT_TIMER_UPDATE:
                this.viewComponent.timerUpdate(data);
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onSlideshowStart = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_START);
    }

    p.onSlideshowStop = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_STOP);
    }

    p.onSlideshowPause = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_PAUSE);
    }

    p.onSlideshowResume = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_RESUME);
    }

    pinetreepages.SlideshowListMediator = SlideshowListMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var SlideshowTextsMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP
        ];
    }

    SlideshowTextsMediator.NAME = "SlideshowTextsMediator";

    var p = __extends(SlideshowTextsMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    pinetreepages.SlideshowTextsMediator = SlideshowTextsMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var SlideshowTimerMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_SLIDESHOW_START.add(this, this.onSlideshowStart);
        viewComponent.ON_SLIDESHOW_STOP.add(this, this.onSlideshowStop);
        viewComponent.ON_SLIDESHOW_PAUSE.add(this, this.onSlideshowPause);
        viewComponent.ON_SLIDESHOW_RESUME.add(this, this.onSlideshowResume);
        viewComponent.ON_UPDATE.add(this, this.onTimerUpdate);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE,
            facade.$.NFT_SLIDESHOW_START,
            facade.$.NFT_SLIDESHOW_PAUSE,
            facade.$.NFT_SLIDESHOW_RESUME,
            facade.$.NFT_SLIDESHOW_STOP
        ];
    }

    SlideshowTimerMediator.NAME = "SlideshowTimerMediator";

    var p = __extends(SlideshowTimerMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            case this.facade.$.NFT_SLIDESHOW_START:
                this.viewComponent.slideshowStart();
                break;
            case this.facade.$.NFT_SLIDESHOW_PAUSE:
                this.viewComponent.slideshowPause();
                break;
            case this.facade.$.NFT_SLIDESHOW_RESUME:
                this.viewComponent.slideshowResume();
                break;
            case this.facade.$.NFT_SLIDESHOW_STOP:
                this.viewComponent.slideshowStop();
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onSlideshowStart = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_START);
    }

    p.onSlideshowStop = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_STOP);
    }

    p.onSlideshowPause = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_PAUSE);
    }

    p.onSlideshowResume = function()
    {
        this.sendNotification(this.facade.$.NFT_SLIDESHOW_RESUME);
    }

    p.onTimerUpdate = function(percent)
    {
        this.sendNotification(this.facade.$.NFT_TIMER_UPDATE, percent);
    }

    pinetreepages.SlideshowTimerMediator = SlideshowTimerMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-26.
 */
(function()
{
    var SlideshowStartUpCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(SlideshowStartUpCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var container = data.container;
        var source = data.source;
        var fileSize = data.size;

        this.facade.$.root = container;

        var timerUI = new pinetreepages.SlideshowTimer();
        var imagesUI = new pinetreepages.SlideshowImages();
        var textsUI = new pinetreepages.SlideshowTexts();
        var listUI = new pinetreepages.SlideshowList();

        container.addChild(imagesUI);
        container.addChild(textsUI);
        container.addChild(listUI);
        container.addChild(timerUI);

        this.facade.$.timerUI = timerUI;
        this.facade.$.imagesUI = imagesUI;
        this.facade.$.textsUI = textsUI;
        this.facade.$.listUI = listUI;

        this.facade.registerMediator(null, pinetreepages.SlideshowTimerMediator, timerUI);
        this.facade.registerMediator(null, pinetreepages.SlideshowImagesMediator, imagesUI);
        this.facade.registerMediator(null, pinetreepages.SlideshowTextsMediator, textsUI);
        this.facade.registerMediator(null, pinetreepages.SlideshowListMediator, listUI);

        this.facade.registerProxy(null, pinetreepages.SlideshowProxy, source, fileSize);
    }

    pinetreepages.SlideshowStartUpCommand = SlideshowStartUpCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-12-4.
 */
(function()
{
	var SlideTip = function()
	{
        pinetreecom.PoolBase.call(this);
        
		this._container = null;
		this._txt = null;
		this._bg = null;

		this._contentHeight = 0;

		this._disposed = false;

        this._textWidth = 0;

        this.data = null;
		
		this.gap = 15;

		this.originX = 0;
		this.originY = 0;

        this._tweenPercent = 0;

        __defineGetterSetter(this, ["isBusy", "contentHeight", "text"]);
    }

    var p = __extends(SlideTip, pinetreecom.PoolBase);

    p.init = function(data)
    {
        if(!data) return;

        this.data = data;

        var vo = data;
        this._textWidth = vo.textWidth;

        this._container = new pinetree.Sprite();
        this.addChild(this._container);

        this._txt = new pinetree.TextField();
        this._txt.className += vo.isLeft ? " slide_title slide_title_left" : " slide_title slide_title_right";
        this._txt.x = this.gap;
        this._txt.y = this.gap;
        this._container.addChild(this._txt);
        this._txt.width = this._textWidth - this.gap - this.gap;

        this._bg = new pinetree.Quad();
        this._bg.color = vo.bgColor;
        this._bg.alpha = vo.bgAlpha;
        this._container.addChildAt(this._bg, 0);

        this._txt.fontSize = vo.fontSize;
        this._txt.textColor = vo.textColor;

        this.text = vo.text;

        this._contentHeight = this._txt.height + this.gap + this.gap;

        this._bg.width = this._textWidth;
        this._bg.height = this._contentHeight;

        this._clipRect = new pinetree.Rectangle(0, 0, 0, this._contentHeight);
        this._container.clip = this._clipRect;

        this.width = this._textWidth;
        this.height = this._contentHeight;
        this._container.width = this._textWidth;
        this._container.height = this._contentHeight;

        this.visible = !!vo.text;

        this.selectable = false;
        this.buttonMode = this._txt.useMouseHand = !!data.link;

        if(data.link)
        {
            this.mouseChildren = this.mouseEnabled = true;
            this.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
        }
        else
        {
            this.mouseChildren = this.mouseEnabled = false;
        }
    }

    p._onClick = function(evt)
    {
        pinetreecom.LinkManager.to(this.data.link);
    }

    p.setText = function(value)
    {
        this._txt.htmlText = value;
    }

    p.reset = function()
    {
        this._clipRect = new pinetree.Rectangle(0, 0, 0, this._contentHeight);
        this._container.clip = this._clipRect;
        TweenMax.killTweensOf(this._container);

        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
    }

    p.getContentHeight = function()
    {
        return this._contentHeight;
    }

    p.run = function(time, delay, transition, callback, params)
    {
        if(this._disposed) return;

        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0.05);
        transition = __defaultSet(transition, Quart.easeOut);

        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
        this.percent = 0;
        TweenMax.to(this, time, {_tweenPercent:1, delay:delay, ease:transition,
            onUpdate:this.onTweenUpdate, onUpdateParams:[this], onComplete:callback});

        this.onTweenUpdate(this);
    }

    p.back = function(time, delay, transition, callback, params)
    {
        if(this._disposed) return;

        this.mouseChildren = this.mouseEnabled = false;

        time = __defaultSet(time, 1.0);
        delay = __defaultSet(delay, 0.05);
        transition = __defaultSet(transition, Quart.easeOut);

        TweenMax.killTweensOf(this, false, {_tweenPercent:true});
        TweenMax.to(this, time, {_tweenPercent:0, delay:delay, ease:transition,
            onUpdate:this.onTweenUpdate, onUpdateParams:[this], onComplete:callback});
    }

    p.onTweenUpdate = function(owner)
    {
        var w = owner._textWidth * owner._tweenPercent;
        owner._clipRect.width = w;
        owner._container.clip = owner._clipRect;
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);

        this._bg && this._bg.dispose();
        this._bg = null;

        TweenMax.killTweensOf(this._container);
        this._disposed = true;
        pinetreecom.PoolBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideTip = SlideTip;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-12-4.
 */
(function()
{
    var SlideTipsContainer = function()
	{
        pinetreecom.UIComponent.call(this);

		this._tips = null;
		
		this.runCallback = null;
		this._backCallback = null;

        this.tweenDelay = 0.2;
    }

    var p = __extends(SlideTipsContainer, pinetreecom.UIComponent);

    p.runWith = function(vos, callback)
    {
        this.runCallback = callback;
        
        this.removeAllChildren();

        var sw = pt.stageWidth, sh = pt.stageHeight;
        
        var tip, len = vos.length, vo, h = 0;
        this._tips = [];
        for(var i = 0; i < len; i ++)
        {
            vo = vos[i];
            tip = pinetreecom.PoolUtil.get(pinetreepages.SlideTip);
            this.addChild(tip);

            tip.init(vo);

            tip.x = tip.originX = vo.isLeft ? vo.x : sw - tip.width - vo.x;

            if(i == 0)
            {
                tip.y = tip.originY = vo.isTop ? vo.y + pt.TOP_HEIGHT : sh - pt.FOOTER_HEIGHT - tip.height - vo.y + pt.TOP_HEIGHT;
            }
            else
            {
                tip.y = tip.originY = this._tips[0].y + h;
            }

            h += tip.height + vo.gap;

            tip.run(this.tweenTime, this.tweenDelay * i, this.transition,
                Delegate.create(this, this._onTweenComplete, i, len - 1, "run"));
            this._tips.push(tip);
        }
    }

    p.back = function(callback)
    {
        this._backCallback = callback;

        if(!this._tips)
        {
            callback && callback();
            return;
        }
        
        var len = this._tips.length, tip;
        for(var i = len - 1; i >= 0; i --)
        {
            tip = this._tips[i];
            tip.back(this.tweenTime, this.tweenDelay * (len - 1 - i), this.transition,
                Delegate.create(this, this._onTweenComplete, i, 0, "back"));
        }
    }
    
    p._onTweenComplete = function(index, end, type)
    {
        if(index == end)
        {
            if(type == "run")
            {
                this.runCallback && this.runCallback();
            }
            else if(type == "back")
            {
                this._backCallback && this._backCallback();
            }
        }
    }
    
    p.dispose = function()
    {
        pinetreecom.PoolUtil.remove(pinetreepages.SlideTip, true);
        pinetreecom.UIComponent.prototype.dispose.call(this);
	}

    pinetreepages.SlideTipsContainer = SlideTipsContainer;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowBase = function()
    {
        pinetreemvc.ViewComponentBase.call(this);
        this.data = null;

        this.ON_SLIDESHOW_START = new pinetree.Signal();
        this.ON_SLIDESHOW_STOP = new pinetree.Signal();
        this.ON_SLIDESHOW_PAUSE = new pinetree.Signal();
        this.ON_SLIDESHOW_RESUME = new pinetree.Signal();

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(SlideshowBase, pinetreemvc.ViewComponentBase);

    p.initData = function(data)
    {
        this.data = data || [];
    }

    p.slideshowStart = function()
    {

    }

    p.slideshowStop = function()
    {

    }

    p.slideshowPause = function()
    {

    }

    p.slideshowResume = function()
    {

    }

    p.change = function(data)
    {

    }

    p.setSelectedIndex = function(index)
    {
        this.ON_CHANGE && this.ON_CHANGE.dispatch(index);
    }

    p.dispose = function()
    {
        this.data = null;

        this.ON_SLIDESHOW_START && this.ON_SLIDESHOW_START.removeAll();
        this.ON_SLIDESHOW_STOP && this.ON_SLIDESHOW_STOP.removeAll();
        this.ON_SLIDESHOW_PAUSE && this.ON_SLIDESHOW_PAUSE.removeAll();
        this.ON_SLIDESHOW_RESUME && this.ON_SLIDESHOW_RESUME.removeAll();
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_SLIDESHOW_START = null;
        this.ON_SLIDESHOW_STOP = null;
        this.ON_SLIDESHOW_PAUSE = null;
        this.ON_SLIDESHOW_RESUME = null;
        this.ON_CHANGE = null;
        this.ON_LOAD_COMPLETE = null;

        pinetreemvc.ViewComponentBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideshowBase = SlideshowBase;
})();

/**
 * Created by pinetrees on 14-5-24.
 */
(function()
{
    var SlideshowImages = function()
    {
        pinetreepages.SlideshowBase.call(this);

        this._currentIndex = 0;
        this._prevIndex = 0;

        this._images = null;

        this._isTweening = false;
        this._isDestroying = false;

        this._imageContainer = null;

        this._marginLeft = 0;
        this._marginRight = 0;
        this._marginTop = 0;
        this._marginBottom = 0;

        this._loadedIndex = 0;

        this._isFirst = true;

        this._duration = 1.0;

        this.tweenTime = 1.0;

        this._colorMask = null;
    }

    var p = __extends(SlideshowImages, pinetreepages.SlideshowBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.SlideshowBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.SlideshowBase.prototype.initData.call(this, data);

        this._maskAlpha = this.facade.$.setting.maskAlpha;
        this._duration = this.facade.$.setting.duration;

        if(!pinetree.isDevice)
        {
            this._marginLeft = this.facade.$.setting.marginLeft;
            this._marginRight = this.facade.$.setting.marginRight;
            this._marginTop = this.facade.$.setting.marginTop;
            this._marginBottom = this.facade.$.setting.marginBottom;
        }

        this._initUI();
    }

    p._initUI = function()
    {
        this._loadedIndex = 0;
        this.facade.$.loadedCount = this._loadedIndex;

        this._images = [];

        var vo = this.data[0];

        this._imageContainer = new pinetree.Sprite();
        this._imageContainer.y = 0;
        this._imageContainer.clip = new pinetree.Rectangle(0, 0,
            pt.stageWidth, pt.stageHeight);
        this.addChild(this._imageContainer);

        this._colorMask = new pinetree.Quad();
        this._colorMask.width = pt.stageWidth;
        this._colorMask.height = pt.stageHeight;
        this._colorMask.color = pt.bgColor;
        this._colorMask.alpha = 0;
        this.addChild(this._colorMask);

        pinetreecom.DelayCaller.delayCall(this, this._start, 0.5, [vo], true);
    }

    p._start = function(vo)
    {
        var image = new pinetreecom.FullRectImage(1, 1, vo.imageAlign);
        image.visible = false;
        image.ON_LOAD_COMPLETE.add(this, this._onLoadInit);
        image.ON_IO_ERROR.add(this, this._onLoadError);
        image.load(vo.imageurl, vo.landscapeurl);

        image.x = this._marginLeft;
        image.y = this._marginTop;

        this._images.push(image);

        TweenMax.to(this._colorMask, this.tweenTime, {alpha:this._maskAlpha, ease:this.transition});
    }

    p._onLoadError = function (image)
    {
        this._onLoadInit(image);
    }

    p._onLoadInit = function(image)
    {
        image.index = this._loadedIndex;
        this._imageContainer.addChild(image);

        this._loadedIndex ++;
        this.facade.$.loadedCount = this._loadedIndex;

        this. ON_LOAD_COMPLETE.dispatch(image);

        if (this._loadedIndex == 1)
        {
            this.setSelectedIndex(0);
            this.transitionIn();
        }
        if (this._loadedIndex != 1 && this._loadedIndex - 1 == this._currentIndex)
        {
            this.ON_SLIDESHOW_START.dispatch();
        }

        if (this._loadedIndex < this.data.length)
        {
            var vo = this.data[this._loadedIndex];
            pinetreecom.DelayCaller.delayCall(this, this._loadNext, 0.1, [vo], true);
        }
    }

    p._loadNext = function(vo)
    {
        var image = new pinetreecom.FullRectImage(1, 1, vo.imageAlign);
        image.visible = false;
        image. ON_LOAD_COMPLETE.add(this, this._onLoadInit);
        image.ON_IO_ERROR.add(this, this._onLoadError);
        image.load(vo.imageurl, vo.landscapeurl);

        image.x = this._marginLeft;
        image.y = this._marginTop;

        this._images.push(image);
    }

    p.change = function(index)
    {
        if(index != 0 && this._currentIndex == index) return;

        this._prevIndex = this._currentIndex;
        this._currentIndex = index;
        this.addEventListener(pinetree.Event.ENTER_FRAME, this._waitForLoadInit, this);
    }

    p._waitForLoadInit = function(evt)
    {
        if (this._currentIndex > this._loadedIndex - 1) return;

        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._waitForLoadInit, this);

        this._isTweening = true;

        this.ON_SLIDESHOW_START.dispatch();

        this.redraw();

        var currentImage = this._images[this._currentIndex];
        currentImage.show(this.tweenTime, 0, Linear.easeNone, Delegate.create(this, this._tweenImageComplete));
        if(!this.facade.$.setting.disableImageZoom && !pinetree.isDevice)
        {
            currentImage.zoom(this._duration);
        }
        this._imageContainer.setChildIndex(currentImage, this._imageContainer.numChildren - 1);

        currentImage.visible = true;
    }

    p._tweenImageComplete = function()
    {
        this._isTweening = false;
        if(this._isDestroying)
        {
            this.transitionOut();

        }
        if(this._currentIndex != this._prevIndex)
        {
            var prevImage = this._images[this._prevIndex];
            prevImage.visible = false;
        }
    }

    p.resize = function(sw, sh)
    {
        //this.facade.$.root.mouseChildren = true;
        if(this._imageContainer)
        {
            this._imageContainer.width = sw;
            this._imageContainer.height = sh;
            this._imageContainer.clip = new pinetree.Rectangle(0, 0, sw, sh);
        }

        if(this._images)
        {
            var iw = sw - this._marginLeft - this._marginRight;
            var ih = sh - this._marginTop - this._marginBottom;

            var currentImage = this._images[this._currentIndex];
            var prevImage = this._images[this._prevIndex];
            currentImage && currentImage.redraw(iw, ih);
            prevImage && prevImage.redraw(iw, ih);
        }

        if(this._colorMask)
        {
            this._colorMask.width = sw;
            this._colorMask.height = sh;
        }
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function()
    {
        this._isDestroying = true;

        if(this._isTweening) return;

        pinetreecom.DelayCaller.removeByHandler(this, this._start);

        this.ON_SLIDESHOW_STOP.dispatch();

        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._waitForLoadInit, this);

        this.redraw();

        if(this._images && this._images[this._currentIndex])
        {
            this._images[this._currentIndex].hide(this.tweenTime * 0.8, 0, Linear.easeNone, Delegate.create(this, this.dispose));
            TweenMax.to(this._colorMask, this.tweenTime * 0.5, {alpha:0, delay:this.tweenTime * 0.3, ease:this.transition});
        }
        else
        {
            TweenMax.to(this, this.tweenTime * 0.6, {onComplete:Delegate.create(this, this.dispose)});
            TweenMax.to(this._colorMask, this.tweenTime * 0.6, {alpha:0, ease:this.transition});
        }
    }

    p.predispose = function()
    {
        pinetreecom.DelayCaller.delayCall(this, this.animateOut, 0.1);
    }

    /**
     * called after the tween of texts complete.
     */
    p.animateOut = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);
        this.transitionOut();
    }

    p.dispose = function()
    {
        if(this._images)
        {
            var key, image;
            for(key in this._images)
            {
                image = this._images[key];
                image && image.removeFromParent(true);
                image = null;
            }

            this._images.splice(0, this._images.length);
            this._images = null;
        }

        if(this._colorMask)
        {
            TweenMax.killTweensOf(this._colorMask);
            this._colorMask.dispose();
            this._colorMask = null;
        }

        this.removeAllChildren();

        this.facade.$.imagesUI = null;
        pinetreepages.SlideshowBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideshowImages = SlideshowImages;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowList = function()
    {
        pinetreepages.SlideshowBase.call(this);

        this._loadedIndex = 0;
        this._buttonList = null;
        //this._imagesList = null;
    }

    var p = __extends(SlideshowList, pinetreepages.SlideshowBase);

    p.initData = function(data)
    {
        pinetreepages.SlideshowBase.prototype.initData.call(this, data);
        this._initUI();
    }

    p._initUI = function()
    {
        /*this._imagesList = new pinetreepages.SlideImageList(this.data, this.facade.$.setting.thumbWidth,
            this.facade.$.setting.thumbHeight);
        this.addChild(this._imagesList);
        this._imagesList.ON_CHANGE.add(this, this.onSelect);
        this._imagesList.init();*/

        this._buttonList = new pinetreecom.ButtonList(pinetreecom.MiniCircle, this.data.length);
        this.addChild(this._buttonList);

        this._buttonList.ON_CLICK.add(this, this.onClickButton);
        this._buttonList.onOverColor = pt.onOverColor;
        this._buttonList.onOutColor = pt.onOutColor;
        this._buttonList.onOverAlpha = 1.0;
        this._buttonList.onOutAlpha = 0.2;
        this._buttonList.gap = pinetree.isDevice ? 10 : 10;
        this._buttonList.itemSize = pinetree.isDevice ? 10 * 2 : 5 * 2;
        this._buttonList.alignType = pinetreecom.ButtonList.ALIGN_HORIZONTAL;
        this._buttonList.init();
        this._buttonList.show();
        this._buttonList.visible = this.data.length > 1;

        this.redraw();
    }

    p.onNavigate = function(evt)
    {
        var target = evt.customTarget, link;
        if(target == this._btnLeft)
        {
            link = this.facade.$.setting.leftButtonLink;
        }
        else
        {
            link = this.facade.$.setting.rightButtonLink;
        }
        pinetreecom.LinkManager.to(link);
    }

    p.timerUpdate = function(percent)
    {
        //this._imagesList.setMaskPercent(percent);
    }

    p.onClickButton = function(e)
    {
        var index = e.index;
        this.onSelect(index);
    }

    p.change = function(index)
    {
        this._buttonList.setSelectBtn(index);

        //this._imagesList.setSelect(index);
    }   

    p.onSelect = function(index)
    {
        this.ON_SLIDESHOW_STOP.dispatch();
        this.ON_CHANGE.dispatch(index);
    }

    p.imageLoadComplete = function(image)
    {
        this._buttonList.setEnabledByIndex(this._loadedIndex, true);
        this._loadedIndex ++;
    }

    p.resize = function(sw, sh)
    {
        if(this._buttonList)
        {
            this._buttonList.x = sw - this._buttonList.contentWidth + Math.floor(this._buttonList.buttonSize / 2) - 8 - 8;
            this._buttonList.y = sh - this._buttonList.contentHeight - (pinetree.isSmallMode ? 0 : pt.currentBottomHeight) +
                Math.floor(this._buttonList.buttonSize / 2) - 8;
        }

        /*if(this._imagesList)
        {
            this._imagesList.x = sw - Math.floor(this.facade.$.setting.thumbWidth / 2);
            this._imagesList.y = ((sh - pt.TOP_HEIGHT - this._imagesList.contentHeight) >> 1) + pt.TOP_HEIGHT;
        }*/
    }

    p.predispose = function()
    {
        if(this._buttonList)
        {
            this._buttonList.hide(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        this._buttonList && this._buttonList.dispose();
        this._buttonList = null;

        /*this._imagesList && this._imagesList.dispose();
        this._imagesList = null;*/

        this.facade.$.listUI = null;
        pinetreepages.SlideshowBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideshowList = SlideshowList;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowTexts = function()
    {
        pinetreepages.SlideshowBase.call(this);

        this._currentIndex = 0;
        this._prevIndex = 0;

        this._isInited = false;

        this._tipsContainer = null;

        this._bgAlpha = 0.9;
    }

    var p = __extends(SlideshowTexts, pinetreepages.SlideshowBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.SlideshowBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.SlideshowBase.prototype.initData.call(this, data);
        this._initUI();
    }

    p._initUI = function()
    {
        this._tipsContainer = new pinetreepages.SlideTipsContainer();
        this._tipsContainer.transition = Quart.easeOut;
        this._tipsContainer.tweenTime = 1.2 * this.tweenTime;
        this.addChild(this._tipsContainer);
    }

    p.change = function(index)
    {
        this._prevIndex = this._currentIndex;
        this._currentIndex = index;

        if(this._prevIndex == this._currentIndex)
        {
            var vo = this.data[index];
            this._tipsContainer.runWith(vo.texts);
        }
        else
        {
            this._tipsContainer.back(Delegate.create(this, this._onBackComplete));
        }
    }

    p._onBackComplete = function()
    {
        var vo = this.data[this._currentIndex];
        this._tipsContainer.runWith(vo.texts);
    }

    p._setText = function(owner, vo)
    {
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;
    }

    p.predispose = function()
    {
        this.mouseChildren = this.mouseEnabled = false;

        if(this._tipsContainer)
        {
            this._tipsContainer.back(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        this._isInited = false;

        this._tipsContainer && this._tipsContainer.dispose();
        this._tipsContainer = null;

        this.facade.$.textsUI = null;
        pinetreepages.SlideshowBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideshowTexts = SlideshowTexts;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-5-24.
 */
(function()
{
    var SlideshowTimer = function()
    {
        pinetreepages.SlideshowBase.call(this);

        this._currentIndex = 0;
        this._loading = null;
        this._duration = 0;
        this._tween = null;

        this.ON_UPDATE = new pinetree.Signal();

        this.percent = 0;
    }

    var p = __extends(SlideshowTimer, pinetreepages.SlideshowBase);

    p.initData = function(data)
    {
        pinetreepages.SlideshowBase.prototype.initData.call(this, data);

        this._duration = this.facade.$.setting.duration;

        var timerColor = this.facade.$.setting.timerColor;
        /*this._loading = new pinetreecom.CircleLoading(8, 2, timerColor, timerColor, 1, 0.2);
        this._loading.alpha = 0;
        this.addChild(this._loading);*/

        this.visible = false;
    }

    p.change = function(index)
    {
        this._currentIndex = index;
    }

    p._onWaiting = function(evt)
    {
        if(this._currentIndex < this.facade.$.loadedCount)
        {
            this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onWaiting, this);

            this.ON_CHANGE.dispatch(this._currentIndex);
        }
    }

    p.start = function()
    {
        /*if(this._loading.alpha == 0)
        {
            TweenMax.to(this._loading, this.tweenTime / 2, {alpha:1, ease:Linear.easeNode});
        }*/
        this.visible = true;
        this.redraw();

        this._tween && this._tween.kill();
        this.percent = 0;
        this._tween = TweenMax.to(this, this._duration, {percent:1, ease:Linear.easeNone,
            onUpdate:this._onUpdate, onUpdateParams:[this],
            onComplete:this._onChange, onCompleteParams:[this]
        });
    }

    p.stop = function()
    {
        this._tween && this._tween.kill();
        this._tween = null;

        /*if(this._loading)
        {
            this._tween = TweenMax.to(this, 0.3, {percent:0, ease:Quart.easeOut,
                onUpdate:this._onUpdate, onUpdateParams:[this],
                onComplete:this._onStopComplete, onCompleteParams:[this]
            });
        }*/
    }

    p._onChange = function(owner)
    {
        var len = owner.data.length;
        owner._currentIndex >= len - 1 ? owner._currentIndex = 0 : owner._currentIndex ++;

        if(owner._currentIndex < owner.facade.$.loadedCount)
        {
            owner.ON_CHANGE.dispatch(owner._currentIndex);
        }
        else
        {
            owner.addEventListener(pinetree.Event.ENTER_FRAME, owner._onWaiting, owner);
        }
    }

    p._onUpdate = function(owner)
    {
        owner.ON_UPDATE.dispatch(owner.percent);
        //owner._loading.percent = owner.percent;
    }

    p._onStopComplete = function(owner)
    {
        owner._tween && owner._tween.kill();
        owner._tween = null;
    }

    p.slideshowStart = function()
    {
        if(this.data.length > 1)
        {
            if(this._currentIndex < this.facade.$.loadedCount)
            {
                this.start();
            }
            else
            {
                this.addEventListener(pinetree.Event.ENTER_FRAME, this._onWaiting, this);
            }
        }
    }

    p.slideshowStop = function()
    {
        if(this.data && this.data.length > 1)
        {
            this.stop();
        }
    }

    p.slideshowPause = function()
    {
        this._tween && this._tween.pause();
    }

    p.slideshowResume = function()
    {
        this._tween && this._tween.resume();
    }

    p.resize = function(sw, sh)
    {
        /*if(this._loading)
        {
            this._loading.x = pt.LEFT_WIDTH + 58;
            this._loading.y = sh - this._loading.height - 20;
        }*/
    }

    p.predispose = function()
    {
        /*if(this._loading)
        {
            this._tween = TweenMax.to(this, this.tweenTime / 2, {percent:0, ease:Quart.easeOut,
                onUpdate:this._onUpdate, onUpdateParams:[this]
            });
            TweenMax.to(this._loading, this.tweenTime / 2, {alpha:0, ease:Linear.easeNone,
                onComplete:this._onPredispose, onCompleteParams:[this]
            })
        }
        else
        {
            this.dispose();
        }*/

        this.dispose();
    }

    p._onPredispose = function(owner)
    {
        owner.dispose();
    }

    p.dispose = function()
    {
        this.removeEventListener(pinetree.Event.ENTER_FRAME, this._onWaiting, this);

        this._tween && this._tween.kill();
        this._tween = null;

        this.ON_UPDATE && this.ON_UPDATE.removeAll();
        this.ON_UPDATE = null;

        /*this._loading && this._loading.dispose();
        this._loading = null;*/

        this.facade.$.timerUI = null;
        pinetreepages.SlideshowBase.prototype.dispose.call(this);
    }

    pinetreepages.SlideshowTimer = SlideshowTimer;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-4-24.
 */
(function()
{
    var TeamView = function(data)
    {
        pinetreepages.ViewBase.call(this, data);

        this._teamFacade = null;
        this._container = null;
    }

    var p = __extends(TeamView, pinetreepages.ViewBase);

    p.addedToStage = function()
    {
        pinetreepages.ViewBase.prototype.addedToStage.call(this);

        this._teamFacade = new pinetreepages.TeamFacade();
        this._teamFacade.ON_DISPOSE_COMPLETE.add(this, this._mvcDisposed);
        this._container = new pinetree.Sprite();
        this.addChild(this._container);
    }

    p.transitionIn = function()
    {
        this._teamFacade.startUp({container:this._container, source:this.data.src, size:this.data.size});
        this.transitionInComplete();
    }

    p.transitionOut = function()
    {
        this._teamFacade && this._teamFacade.predispose();
    }

    p._mvcDisposed = function()
    {
        this.transitionOutComplete();
    }

    p.dispose = function()
    {
        pinetreepages.ViewBase.prototype.dispose.call(this);
    }

    p.toString = function()
    {
        return "[Object TeamView]";
    }

    pinetreepages.TeamView = TeamView;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{

    var TeamFacade = function()
    {
        pinetreemvc.Facade.call(this);

        this.$ = {
            //notification
            NFT_START_UP:"notification_start_up",
            NFT_DATA_LOAD_COMPLETE:"notification_data_load_complete",
            NFT_IMAGE_CHANGE:"notification_image_change",
            NFT_IMAGE_LOAD_COMPLETE:"notification_image_load_complete",
            //data
            setting:null,
            root:null,
            //ui
            listUI:null,
            imagesUI:null
        }
    }

    var p = __extends(TeamFacade, pinetreemvc.Facade);

    p.startUp = function(data)
    {
        this.registerCommand(this.$.NFT_START_UP, pinetreepages.TeamStartUpCommand);
        this.sendNotification(this.$.NFT_START_UP, data);
    }

    pinetreepages.TeamFacade = TeamFacade;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamSetting = function()
    {
        this.itemWidth = 0;
        this.itemHeight = 0;
        this.gap = 5;
        this.moreLabel = "Read More";
        this.imageWidth = 0;
        this.imageHeight = 0;
        this.textHeight = 0;
        this.showInfo = false;
        this.hideInfoButton = false;

        this.totalWidth = 0;
    }

    TeamSetting.from = function(obj)
    {
        var setting = new pinetreepages.TeamSetting();
        if(obj)
        {
            setting.itemWidth = obj.itemWidth;
            setting.itemHeight = obj.itemHeight;
            setting.gap = obj.gap || setting.gap;
            setting.moreLabel = __defaultSet(obj.moreLabel, setting.moreLabel);
            setting.imageWidth = obj.imageWidth;
            setting.imageHeight = obj.imageHeight;
            setting.textHeight = obj.textHeight;
            setting.showInfo = obj.showInfo || false;
            setting.hideInfoButton = obj.hideInfoButton || false;

            setting.totalWidth = setting.itemWidth + setting.middleGap + setting.imageWidth;
        }

        return setting;
    }

    pinetreepages.TeamSetting = TeamSetting;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamImageVo = function()
    {
        this.name = "";
        this.moreLabel = "";
        this.preview = "";
        this.description = "";
        this.thumburl = "";
        this.itemWidth = 0;
        this.itemHeight = 0;
        this.imageurl = "";
    }

    TeamImageVo.from = function(obj)
    {
        var vo = new pinetreepages.TeamImageVo();
        vo.name = obj.name || vo.name;
        vo.description = obj.description || vo.description;
        vo.preview = obj.preview || vo.description;
        vo.thumburl = obj.imageurl;
        vo.imageurl = obj.imageurl;

        return vo;
    }

    pinetreepages.TeamImageVo = TeamImageVo;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamImageProxy = function(facade, name, source, fileSize)
    {
        pinetreemvc.Proxy.call(this, facade, name, source, fileSize);
    }

    TeamImageProxy.NAME = "TeamImageProxy";

    var p = __extends(TeamImageProxy, pinetreemvc.Proxy);

    p.parse = function(dataStr)
    {
        var data = [];
        var jsonData = JSON.parse(dataStr);
        var setting = pinetreepages.TeamSetting.from(jsonData.setting);
        this.facade.$.setting = setting;

        var len = jsonData.data.length, vo;
        for(var i = 0; i < len; i ++)
        {
            vo = pinetreepages.TeamImageVo.from(jsonData.data[i]);
            vo.moreLabel = setting.moreLabel;
            vo.itemWidth = setting.itemWidth;
            vo.itemHeight = setting.itemHeight;
            data.push(vo);
        }
        this.sendNotification(this.facade.$.NFT_DATA_LOAD_COMPLETE, data);
    }

    pinetreepages.TeamImageProxy = TeamImageProxy;
})();


/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamImagesMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE
        ];
    }

    TeamImagesMediator.NAME = "TeamImagesMediator";

    var p = __extends(TeamImagesMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                this.viewComponent.change(data);
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.TeamImagesMediator = TeamImagesMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamListMediator = function(facade, name, viewComponent)
    {
        pinetreemvc.Mediator.call(this, facade, name, viewComponent);

        viewComponent.ON_CHANGE.add(this, this.onChange);
        viewComponent.ON_LOAD_COMPLETE.add(this, this.onLoadComplete);

        this.interests = [
            facade.$.NFT_DATA_LOAD_COMPLETE,
            facade.$.NFT_IMAGE_CHANGE,
            facade.$.NFT_IMAGE_LOAD_COMPLETE
        ];
    }

    TeamListMediator.NAME = "TeamListMediator";

    var p = __extends(TeamListMediator, pinetreemvc.Mediator);

    p.handleNotification = function(notification)
    {
        var name = notification.name;
        var data = notification.data;

        switch(name)
        {
            case this.facade.$.NFT_DATA_LOAD_COMPLETE:
                this.viewComponent.initData(data);
                break;
            case this.facade.$.NFT_IMAGE_CHANGE:
                //
                break;
            case this.facade.$.NFT_IMAGE_LOAD_COMPLETE:
                //
                break;
            default :
                break;
        }
    }

    p.onChange = function(index)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_CHANGE, index);
    }

    p.onLoadComplete = function(image)
    {
        this.sendNotification(this.facade.$.NFT_IMAGE_LOAD_COMPLETE, image);
    }

    pinetreepages.TeamListMediator = TeamListMediator;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamStartUpCommand = function()
    {
        pinetreemvc.Command.call(this);
    }

    var p = __extends(TeamStartUpCommand, pinetreemvc.Command);

    p.execute = function(notification)
    {
        var data = notification.data;
        var container = data.container;
        var source = data.source;
        var fileSize = data.size;

        this.facade.$.root = container;

        var listUI = new pinetreepages.TeamList();
        var imagesUI = new pinetreepages.TeamImages();

        container.addChild(listUI);
        container.addChild(imagesUI);

        this.facade.$.listUI = listUI;
        this.facade.$.imagesUI = imagesUI;

        this.facade.registerMediator(null, pinetreepages.TeamListMediator, listUI);
        this.facade.registerMediator(null, pinetreepages.TeamImagesMediator, imagesUI);

        this.facade.registerProxy(null, pinetreepages.TeamImageProxy, source, fileSize);
    }

    pinetreepages.TeamStartUpCommand = TeamStartUpCommand;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-10.
 */
(function()
{
    var TeamListTips = function(data, w, h)
    {
        pinetree.Sprite.call(this);

        this.tweenTime = 1;
        this.transition = Quad.easeOut;

        this._data = data;

        this._tipWidth = w;
        this._tipHeight = h;

        this._gapX = 30;
        this._gapY = 5;

        this._nameTxt = null;
        this._previewTxt = null;
        this._moreTxt = null;

        this.selectable = false;
        this.buttonMode = true;
        this.useMouseHand = true;
    }

    var p = __extends(TeamListTips, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._nameTxt = new pinetree.TextField();
            this._nameTxt.useMouseHand = true;
            this._nameTxt.selectable = false;
            this.addChild(this._nameTxt);
            this._nameTxt.className += " team_name";

            this._previewTxt = new pinetree.TextField();
            this._previewTxt.useMouseHand = true;
            this._previewTxt.selectable = false;
            this.addChild(this._previewTxt);
            this._previewTxt.className += " team_preview";

            this._moreTxt = new pinetree.TextField();
            this._moreTxt.useMouseHand = true;
            this._moreTxt.selectable = false;
            this._moreTxt.wordWrap = false;
            this.addChild(this._moreTxt);
            this._moreTxt.textColor = pt.onOverColor;
            this._moreTxt.className += " team_more";
        }

        this.update();

        this.buttonMode = true;

        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p.over = function()
    {
        this._nameTxt && this._nameTxt.tweenColor(pt.onOverColor, this.tweenTime / 3);
    }

    p.out = function()
    {
        this._nameTxt && this._nameTxt.tweenColor(pt.textColor, this.tweenTime / 3);
    }

    p.update = function()
    {
        this._nameTxt.width = this._tipWidth - this._gapX;
        this._nameTxt.htmlText = this._data.name;
        this._nameTxt.x = this._gapX;
        this._nameTxt.y = -2;

        this._previewTxt.width = this._tipWidth / 2;
        this._previewTxt.height = 10;
        this._previewTxt.htmlText = this._data.preview;
        this._previewTxt.x = this._gapX;
        this._previewTxt.y = this._nameTxt.y + this._nameTxt.height + this._gapY;
        this._previewTxt.setLimitation(1, true);
        this._previewTxt.alpha = 0.8;

        this._moreTxt.htmlText = this._data.moreLabel;
        this._moreTxt.x = this._tipWidth - this._moreTxt.width - this._gapX;
        this._moreTxt.y = this._tipHeight - this._moreTxt.height;
    }

    p.setChildEnabled = function(value)
    {
        pinetree.Sprite.prototype.setChildEnabled.call(this, value);

        if(this._nameTxt)
            this._nameTxt.cursor = value ? "pointer" : "default";

        if(this._previewTxt)
            this._previewTxt.cursor = value ? "pointer" : "default";

        if(this._moreTxt)
            this._moreTxt.cursor = value ? "pointer" : "default";
    }

    p.dispose = function()
    {
        TweenMax.killTweensOf(this._nameTxt);
        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.TeamListTips = TeamListTips;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-12.
 */
(function()
{
    var TeamListRender = function()
    {
        pinetreecom.ListItemBase.call(this);
        this._clipRect = new pinetree.Rectangle(0, 0, 0, 0);

        this._originWidth = 0;
        this._originHeight = 0;

        this._bgAlpha = pt.bgAlpha;

        this._startX = 20;

        this._thumbnail = null;
        this._tips = null;

        this._line = null;
        //this._icon = null;

        this._isShowing = false;
        this._isActive = false;
        this.mouseChildren = false;
    }

    var p = __extends(TeamListRender, pinetreecom.ListItemBase);

    p.setUpWith = function(w, h, data)
    {
        pinetreecom.ListItemBase.prototype.setUpWith.call(this, w, h, data);

        this._originWidth = w;
        this._originHeight = h;

        this._thumbnail = new pinetreecom.ShadowImageLoader(this._itemHeight, this._itemHeight);
        this._thumbnail.className = "shadow_20px";
        this._thumbnail.x = this._startX;
	    this._thumbnail.loadingType = "small";
        //this._thumbnail.ON_LOAD_COMPLETE.add(this, this._onImgLoadComplete);
        this.addChild(this._thumbnail);
        this._thumbnail.useMouseHand = true;

        this._line = new pinetree.Quad();
        this._line.alpha = 0.2;
        this._line.color = pt.onOutColor;
        this._line.width = w;
        this._line.height = 1;
        this._line.y = h + 12;
        this.addChild(this._line);

        /*var tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_RIGHT_ICON);
        this._icon = new pinetreecom.TextureButton(pt.onOverColor, pt.onOutColor, pt.onOverColor, pt.onOutColor, 1, 0.6, 0, 0, false);
        this._icon.setTextures(tex);
        this.addChild(this._icon);
        this._icon.x = this._itemWidth - tex.sourceWidth - 20;
        this._icon.y = (this._itemHeight - tex.sourceHeight) >> 1;
        this._icon.show();*/

        this.width = this._itemWidth;
        this.height = this._itemHeight;

        this.alpha = 0;

        this.buttonMode = true;
    }

    p.setLineVisible = function(value)
    {
        this._line.visible = value;
    }

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._tips = new pinetreepages.TeamListTips(this._data, this._itemWidth - this._itemHeight - this._startX, this._itemHeight);
            this.addChild(this._tips);

            this._tips.x = this._itemHeight + this._startX;
        }

        pinetreecom.ListItemBase.prototype.addedToStage.call(this);
    }

    p.tweenAlpha = function(alpha)
    {
        if(this._isShowing)
        {
            TweenMax.killTweensOf(this, false, {alpha:true});
            TweenMax.to(this, this.tweenTime, {alpha:alpha, ease:Quart.easeOut});
        }
    }

    p.getThumbnail = function()
    {
        return this._thumbnail;
    }

    p.load = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.load(this._data.thumburl);
        }
        else
        {
            this._onImgLoadComplete(null);
        }
    }

    p._onImgLoadComplete = function(img)
    {
        //img.setRealFitSize(this._itemHeight, this._itemHeight);
    }

    p.over = function()
    {
        if(this._tips)
        {
            this._tips.over();
        }

        /*if(this._icon)
        {
            this._icon.onOver(null);
        }*/
    }

    p.out = function()
    {
        if(this._tips)
        {
            this._tips.out();
        }

        /*if(this._icon)
        {
            this._icon.onOut(null);
        }*/
    }

    p.getWidth = function()
    {
        return this._itemWidth;
    }

    p.getOriginWidth = function()
    {
        return this._originWidth;
    }

    p.getOriginHeight = function()
    {
        return this._originHeight;
    }

    p.getCurrentWidth = function()
    {
        return this._itemWidth;
    }

    p.getCurrentHeight = function()
    {
        return this._itemHeight;
    }

    p.setEnable = function()
    {
        //
    }

    p.setState = function(isShown, isFullShown)
    {
        if(isFullShown)
        {
            this.show();
            this._isActive = true;
        }
        else
        {
            this.hide();
            this._isActive = false;
        }
    }

    p.show = function()
    {
        if(this._isShowing) return;
        this._isShowing = true;

        if(!this.parent)
        {
            this.addToParent();
        }

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:1, ease:Quart.easeOut,
            onComplete:this._onShowComplete, onCompleteParams:[this]});
    }

    p._onShowComplete = function(owner)
    {
        //
    }

    p.hide = function()
    {
        if(!this._isShowing) return;
        this._isShowing = false;

        TweenMax.killTweensOf(this, false, {alpha:true});
        TweenMax.to(this, this.tweenTime, {alpha:0, ease:Quart.easeOut,
            onComplete:this._onHideComplete, onCompleteParams:[this]});
    }

    p._onHideComplete = function(owner)
    {
        owner.removeFromParent();
    }

    p.getGlobalBounds = function()
    {
        var p = this.localToGlobal(new pinetree.Point());
        return new pinetree.Rectangle(p.x, p.y, this._itemWidth, this._itemHeight);
    }

    p.animationIn = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onInComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);

        this.alpha = 1;
        this.x = this.originX + pt.stageWidth;
        TweenMax.to(this, time, {x:this.originX, delay:delay,
            ease:transition || this.transition, onComplete:this._onInComplete,
            onCompleteParams:[this, callback]
        });

        this.addToParent();
    };

    p._onInComplete = function(owner, callback)
    {
        if(!owner.mouseEnabled)
        {
            if(owner.x != owner.originX)
            {
                owner.x = owner.originX;
            }
            owner.mouseEnabled = true;
        }
        callback && callback();
    }

    p.animationOut = function(time, delay, transition, callback)
    {
        if(time == undefined) time = this.tweenTime;
        if(delay == undefined) delay = 0;

        if(time == 0 && delay == 0)
        {
            this._onOutComplete(this, callback);
            return;
        }

        TweenMax.killTweensOf(this);
        this.mouseEnabled = false;

        TweenMax.to(this, time, {x:this.originX + pt.stageWidth, delay:delay,
            ease:transition || this.transition, onComplete:this._onOutComplete,
            onCompleteParams:[this, callback]
        });
    };

    p._onOutComplete = function(owner, callback)
    {
        if(!pinetree.isDevice)
        {
            owner.removeFromParent();
        }
        callback && callback();
    }

    p.dispose = function()
    {
        if(this._thumbnail)
        {
            this._thumbnail.dispose();
            this._thumbnail = null;
        }

        /*this._icon && this._icon.dispose();
        this._icon = null;*/

        if(!pinetree.isDevice)
        {
            this.removeEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
        }
        else
        {
            this.removeEventListener(pinetree.MouseEvent.MOUSE_DOWN, this._onOver, this);
            this.removeEventListener(pinetree.MouseEvent.MOUSE_UP, this._onOut, this);
        }

        TweenMax.killTweensOf(this);

        pinetreecom.ListItemBase.prototype.dispose.call(this);
    }

    pinetreepages.TeamListRender = TeamListRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamBase = function()
    {
        pinetreemvc.ViewComponentBase.call(this);

        this.data = null;

        this.ON_CHANGE = new pinetree.Signal();
        this.ON_LOAD_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(TeamBase, pinetreemvc.ViewComponentBase);

    p.initData = function(data)
    {
        this.data = data || [];
    }

    p.change = function(data)
    {

    }

    p.dispose = function()
    {
        this.ON_CHANGE && this.ON_CHANGE.removeAll();
        this.ON_LOAD_COMPLETE && this.ON_LOAD_COMPLETE.removeAll();

        this.ON_CHANGE = null;
        this.ON_LOAD_COMPLETE = null;

        pinetreemvc.ViewComponentBase.prototype.dispose.call(this);
    }

    pinetreepages.TeamBase = TeamBase;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-7.
 */
(function()
{
    var TeamImages = function()
    {
        pinetreepages.TeamBase.call(this);

        this._currentIndex = 0;
        this._dataCount = 0;

        this._isInited = false;

        this.visible = false;
    }

    var p = __extends(TeamImages, pinetreepages.TeamBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.TeamBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.TeamBase.prototype.initData.call(this, data);

        this._currentIndex = 0;
        this._dataCount = data.length;

        this._initUI();
    }

    p._initUI = function()
    {

    }

    p.change = function(index)
    {
        this._currentIndex = index;
    }

    p.loadNext = function(index)
    {

    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        if(pinetree.isDevice)
        {

        }
        else
        {

        }
    }

    p.transitionIn = function()
    {

    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
    }

    p.predispose = function()
    {
        if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        this.facade.$.imagesUI = null;
        pinetreepages.TeamBase.prototype.dispose.call(this);
    }

    pinetreepages.TeamImages = TeamImages;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-6-14.
 */
(function()
{
    var TeamList = function()
    {
        pinetreepages.TeamBase.call(this);

        this._gap = 0;
        this._itemWidth = 0;
        this._itemHeight = 0;
        this._imageWidth = 0;
        this._imageHeight = 0;

        this._currentRow = 0;
        this._itemEdge = 100 * 2;
        this._middleGap = 180;

        this._maxContentWidth = 640;

        this._currentListContentHeight = 0;
        this._maxShownCount = 5;

        this._pageIndex = 0;
        this._pageTotal = 0;

        this._currentIndex = 0;
        this._dataCount = 0;

        this._padding = 30;

        this._isInited = false;

        this.sliderWidth = pinetree.isDevice ? 0 : 150;
        this.sliderHeight = pinetree.isDevice ? 0 : 10;
        this.sliderStartX = 30;

        this.sliderOverColor = pt.onOverColor;
        this.sliderOutColor = pt.onOverColor;
        this.sliderOverAlpha = 1.0;
        this.sliderOutAlpha = 1.0;
        this.sliderBGColor = pt.onOutColor;
        this.sliderBGAlpha = 0.1;

        this._hscroller = null;
        this._container = null;
        this._listContainer = null;
        this._triggerRect = null;
        this._buttonList = null;
        this._imageLoader = null;
        this._titleTxt = null;
        this._txtContainer = null;

        this._showInfoFirst = false;
        this._hideInfoButton = false;

        this._isShowingInfo = false;

        this.selectable = false;

        this.mouseChildren = this.mouseEnabled = false;

        this.resizePriority = 1;

        __defineGetterSetter(this, ["enabled"]);
    }

    var p = __extends(TeamList, pinetreepages.TeamBase);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {

        }
        pinetreepages.TeamBase.prototype.addedToStage.call(this);
    }

    p.initData = function(data)
    {
        pinetreepages.TeamBase.prototype.initData.call(this, data);

        this._dataCount = data.length;
        this._itemWidth = this.facade.$.setting.itemWidth;
        this._itemHeight = this.facade.$.setting.itemHeight;
        this._imageWidth = this.facade.$.setting.imageWidth;
        this._imageHeight = this.facade.$.setting.imageHeight;
        this._showInfoFirst = this.facade.$.setting.showInfo;
        this._hideInfoButton = this.facade.$.setting.hideInfoButton;
        this._gap = this.facade.$.setting.gap;
        this._initUI();
    }

    p._initUI = function()
    {
        this._container = new pinetree.Sprite();
        this._container.alpha = 0;

        this._imageLoader = new pinetreecom.ShadowImageLoader(this._imageWidth, this._imageHeight);
        this._container.addChild(this._imageLoader);
        this.registerAutoDispose(this._imageLoader);

        if(!pinetree.isDevice)
        {
            this._imageLoader.x = this._itemWidth + this._middleGap;

            this._hscroller = new pinetreecom.HScroller(this.sliderWidth, this.sliderHeight, 1, 1,
                this.sliderOverColor, this.sliderOutColor, this.sliderOverAlpha, this.sliderOutAlpha,
                this.sliderBGColor, this.sliderBGAlpha, null, false, true, false);
            this.addChild(this._hscroller);
            this._hscroller.ON_CHANGE.add(this, this._onScrollProgress);
            this.registerAutoDispose(this._hscroller);
            this._hscroller.addTarget(this._container, 0, 0, 0);
            this._hscroller.useIntPosition = true;

            this._listContainer = new pinetreecom.ListContainer();
            this._container.addChild(this._listContainer);
            this._listContainer.animateTime = this.tweenTime;
            this._listContainer.animateDelay = 0.1 * this.tweenTime;
            this._listContainer.ON_TWEEN_IN_COMPLETE.add(this, this.tweenInComplete);
            this._listContainer.ON_TWEEN_OUT_COMPLETE.add(this, this.tweenOutComplete);
            this._listContainer.ON_OVER.add(this, this.onOverItem);
            this._listContainer.ON_OUT.add(this, this.onOutItem);
            this._listContainer.ON_CLICK.add(this, this.onClickThumbnail);
            this._listContainer.ON_NEED_RESIZE.add(this, this.redraw);
            this._listContainer.onlyFullShown = true;
            this._listContainer.useRealPosition = false;
            this._listContainer.useRealStagePos = false;
            this._listContainer.maxShownCount = this._maxShownCount;
            this.registerAutoDispose(this._listContainer);

            this._triggerRect = new pinetreecom.TriggerRect(1, 1, 0x00ff00, 0);
            this.addChildAt(this._triggerRect, 0);
            this.registerAutoDispose(this._triggerRect);

            this._listContainer.reset();

            this._listContainer.setUpWith(pinetreepages.TeamListRender, this._itemWidth, this._itemHeight,
                0, this._gap, pinetreecom.AlignUtil.ALIGN_VERTICAL, 1, this.data,
                pt.stageWidth, pt.stageHeight);

            this._buttonList = new pinetreecom.ButtonList(pinetreecom.MiniCircle, this.data.length);
            this.addChild(this._buttonList);
            this.registerAutoDispose(this._buttonList);

            this._buttonList.ON_CLICK.add(this, this.onClickButton);
            this._buttonList.onOverColor = pt.onOverColor;
            this._buttonList.onOutColor = pt.onOutColor;
            this._buttonList.onOverAlpha = 1.0;
            this._buttonList.onOutAlpha = 0.2;
            this._buttonList.gap = pinetree.isDevice ? 10 : 10;
            this._buttonList.itemSize = pinetree.isDevice ? 10 * 2 : 5 * 2;
            this._buttonList.alignType = pinetreecom.ButtonList.ALIGN_VERTICAL;
            this._buttonList.init();
            this._buttonList.visible = this._pageTotal > 1;
            this._buttonList.setSelectBtn(0);

            this._titleTxt = new pinetree.TextField();
            this._titleTxt.className += " team_detail_title";
            this._titleTxt.x = this._itemWidth + this._middleGap + 5;
            this._titleTxt.y = this._imageHeight + 30;
            this._titleTxt.width = this._imageWidth - 30;
            this._container.addChild(this._titleTxt);

            this._txtContainer = new pinetreecom.TextContainer(this._imageWidth, this._imageHeight,
                pt.bgColor, 0.95, true, true, false);
            this._container.addChild(this._txtContainer);
            this._txtContainer.sliderOverColor = pt.onOverColor;
            this._txtContainer.sliderOutColor = pt.onOverColor;
            this._txtContainer.sliderBGAlpha = 0;
            this._txtContainer.padding = 20;
            this._txtContainer.init();
            this._txtContainer.scrollerHeight = this._imageHeight - 40;
            this._txtContainer.alpha = 0;
            this.registerAutoDispose(this._txtContainer);

            this._txtContainer.x = this._itemWidth + this._middleGap;
            this._txtContainer.y = 0;

            if(!this._hideInfoButton)
            {
                var tex = pt.getCommonTexture(pinetreepages.EnumTextures.BTN_INFO_SMALL);
                this._infoBtn = new pinetreecom.TextureButton(pt.onOverColor, pt.onOverColor, pt.onOverColor, pt.onOverColor, 1, 0.8);
                this._infoBtn.className += ' team_info_button';
                this._infoBtn.setTextures(tex);
                this._container.addChild(this._infoBtn);
                this._infoBtn.x = this._itemWidth + this._middleGap + this._imageWidth - tex.sourceWidth;
                this._infoBtn.y = this._imageHeight + 33;
                this._infoBtn.show();
                this._infoBtn.addEventListener(pinetree.MouseEvent.CLICK, this._onClickInfo, this);
            }

            if(this._showInfoFirst)
            {
                this._onClickInfo();
            }

            this._hscroller.reset();
            this._hscroller.enabled = false;
            this._hscroller.scrollMC.alpha = 0;

            this._hscroller.mouseWheelArea = this._triggerRect;
            this._hscroller.enabled = true;
            this._hscroller.show();
        }
        else
        {
            this.addChild(this._container);

            this._imageLoader.x = this._padding;
            this._imageLoader.y = this._padding + pt.TOP_HEIGHT;

            this._txtContainer = new pinetreecom.DeviceTextContainer(this._textWidth, this._bgColor, 0, true, true);
            this._container.addChild(this._txtContainer);
            this._txtContainer.paddingLeft = this._padding;
            this._txtContainer.paddingRight = this._padding;
            this._txtContainer.paddingTop = 0;
            this._txtContainer.paddingBottom = 0;
            this._txtContainer.init();
            this.registerAutoDispose(this._txtContainer);

            var vo = this.data[this._currentIndex];
            this._txtContainer.title = vo.name;
            this._txtContainer.information = vo.description;

            this._txtContainer.x = 0;
            this._txtContainer.y = this._imageHeight + this._imageLoader.y + this._padding;

            //pt.dragPrevNext.listen(this._container, this, this._dragPrev, this._dragNext, null, "x", false);
        }

        this.enabled = false;

        pinetreecom.DelayCaller.delayCall(this, this.transitionIn, 0.1);
    }

    p._dragPrev = function(target)
    {
        if(this._currentIndex <= 0)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._currentIndex --;
            var vo = this.data[this._currentIndex];
            if(vo)
            {
                this._imageLoader.reset();
                this._imageLoader.load(vo.imageurl);

                this._txtContainer.reset();
                this._txtContainer.title = vo.name;
                this._txtContainer.information = vo.description;
            }

            pt.dragPrevNext.back();
        }
    }

    p._dragNext = function(target)
    {
        if(this._currentIndex >= this._totalCount - 1)
        {
            pt.dragPrevNext.back();
        }
        else
        {
            this._currentIndex ++;
            var vo = this.data[this._currentIndex];
            if(vo)
            {
                this._imageLoader.reset();
                this._imageLoader.load(vo.imageurl);

                this._txtContainer.reset();
                this._txtContainer.title = vo.name;
                this._txtContainer.information = vo.description;
            }

            pt.dragPrevNext.back();
        }
    }

    p.onControlPNChange = function(e)
    {
        if(e.type == pinetreecom.SimplePNButtonsManager.PREV_TYPE)
        {
            this._currentIndex --;
        }
        else
        {
            this._currentIndex ++;
        }
        pt.controlBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);

        if(this._currentIndex >= 0 && this._currentIndex < this._dataCount)
        {
            var vo = this.data[this._currentIndex];
            if(vo)
            {
                this._imageLoader.reset();
                this._imageLoader.load(vo.imageurl);

                this._txtContainer.reset();
                this._txtContainer.title = vo.name;
                this._txtContainer.information = vo.description;
            }
        }
    }

    p.onClickButton = function(e)
    {
        if(e.index == this._pageIndex)
        {
            return;
        }

        this._pageIndex = e.index;
        this._tweenListPosition();
    }

    p._tweenListPosition = function()
    {
        var y = this._pageIndex * - 1 * (this._currentListContentHeight + this._gap);
        this._listContainer.updateCurrentPos(y);
        TweenMax.to(this._listContainer.itemContainer, this.tweenTime, {y:y, ease:Quart.easeOut});
        this.redraw();
    }

    p.setEnabled = function(value)
    {
        this.mouseChildren = this.mouseEnabled = value;
        if(this._triggerRect)
        {
            this._triggerRect.isEnabled = value;
        }
    }

    p._onClickInfo = function(evt)
    {
        if(this._isShowingInfo)
        {
            TweenMax.to(this._txtContainer, this.tweenTime / 3, {alpha:0, ease:Quad.easeOut});
        }
        else
        {
            TweenMax.to(this._txtContainer, this.tweenTime / 3, {alpha:1, ease:Quad.easeOut});
        }

        this._isShowingInfo = !this._isShowingInfo;
    }

    p.tweenInComplete = function()
    {

    }

    p.tweenOutComplete = function()
    {

    }

    p.onLoadFirstPageComplete = function()
    {

    }

    p.onOverItem = function(index)
    {
        var item = this._listContainer.getItemByIndex(index);
        if(item)
        {
            item.over();
        }
    }

    p.onOutItem = function(index)
    {
        var item = this._listContainer.getItemByIndex(index);
        if(item)
        {
            item.out();
        }
    }

    p.onClickThumbnail = function(index)
    {
        if(!this._isInited) return;

        var item = this._listContainer.getItemByIndex(index);
        if(item)
        {
            item.mouseEnabled = item.mouseChildren = false;
            item.over();
        }

        for(var i = 0; i < this._dataCount; i ++)
        {
            if(i != index)
            {
                item = this._listContainer.getItemByIndex(i);
                if(item)
                {
                    item.mouseEnabled = item.mouseChildren = true;
                    item.out();
                }
            }
        }

        var vo = this.data[index];
        if(vo)
        {
            this._imageLoader.reset();
            this._imageLoader.load(vo.imageurl);

            this._titleTxt.htmlText = vo.name;

            this._txtContainer.information = vo.description;
        }
    }

    p._onScrollProgress = function(evt)
    {
        //
    }

    p.resize = function(sw, sh)
    {
        if(!this._isInited) return;

        if(!pinetree.isDevice)
        {
            this._listContainer.resize(1440, sh - this._itemEdge);

            var fullItems = this._listContainer.fullShownItems;
            var len = fullItems.length;
            for(var i = 0; i < len - 1; i ++)
            {
                if(fullItems[i])
                    fullItems[i].setLineVisible(true);
            }
            if(fullItems[len - 1])
                fullItems[len - 1].setLineVisible(false);

            var row = Math.floor((sh - this._itemEdge + this._gap) / (this._itemHeight + this._gap));
            if(row > this._maxShownCount)
                row = this._maxShownCount;
            else if(row < 1)
                row = 1;

            if(this._currentRow != row)
            {
                this._currentRow = row;
                this._currentListContentHeight = (this._itemHeight + this._gap) * row - this._gap;

                var itemIndex = this._pageIndex * this._pageTotal;
                if(itemIndex > this._dataCount - 1)
                {
                    itemIndex = this._dataCount - 1;
                }
                var pageIndex = Math.floor(itemIndex / row);

                this._pageTotal = Math.ceil(this._dataCount / row);
                this._buttonList.count = this._pageTotal;
                this._buttonList.visible = this._pageTotal > 1;

                if (pageIndex != this._pageIndex)
                {
                    this._pageIndex = pageIndex;
                    this._buttonList.setSelectBtn(this._pageIndex);
                    this._tweenListPosition();
                }
            }

            var contentWidth = this._itemWidth + this._imageWidth + this._middleGap + this.sliderStartX * 2;

            var x = ((sw - contentWidth) >> 1) + this.sliderStartX;
            if(x < this.sliderStartX) x = this.sliderStartX;

            this._hscroller.setSize(contentWidth, sh, sw,
                ((sw -this.sliderWidth) >> 1) - x, this._currentListContentHeight + 30);

            if (this._buttonList.visible)
            {
                this._buttonList.x = x - 30 - this._buttonList.width;
                this._buttonList.y = (sh - this._buttonList.height) >> 1;
            }

            this._hscroller.x = x;
            this._hscroller.y = (sh - this._currentListContentHeight) >> 1;
            this._hscroller.scrollerWidth = this.sliderWidth;

            if(this._triggerRect)
            {
                this._triggerRect.width = sw;
                this._triggerRect.height = sh;
            }
        }
        else
        {
            pt.controlBtns.infoVisible = false;
            pt.controlBtns.closeVisible = false;
            pt.controlBtns.show(0);
            pt.controlBtns.showPNButtons(this._currentIndex > 0, this._currentIndex < this._dataCount - 1);
            pt.refreshControlBtns();

            var contentWidth = sw;
            if(contentWidth > this._maxContentWidth) contentWidth = this._maxContentWidth;
            this._txtContainer.contentWidth = contentWidth;
            this._txtContainer.scrollGapX = 0;

            this.height = this._txtContainer.y + this._txtContainer.contentHeight + this._padding;

            if(this._height < sh - pt.TOP_HEIGHT - this._padding * 2)
            {
                this._container.y = (sh - pt.TOP_HEIGHT - this._padding * 2 - this._height) >> 1;
            }
            else
            {
                this._container.y = 0;
            }

            this.x = (sw - contentWidth) >> 1;
        }
    }

    p.transitionIn = function()
    {
        this._isTweening = true;
        this._isInited = true;
        this.redraw();

        this.mouseChildren = this.mouseEnabled = true;

        if(pinetree.isDevice)
        {
            TweenMax.to(this._container, this.tweenTime / 2, {alpha:1, ease:Quad.easeOut,
                onComplete:Delegate.create(this, this._onAniComplete)});

            var vo = this.data[0];
            if(vo)
            {
                pinetreecom.DelayCaller.delayAfterFrames(this, this._imageLoader.load, 1, [vo.imageurl]);
                this._txtContainer.title = vo.name;
                this._txtContainer.information = vo.description;
            }
        }
        else
        {
            this._container.alpha = 1;

            this._hscroller.y = - this._currentListContentHeight;

            this._listContainer.animateDelay = 0;
            this._listContainer.animationIn(pinetreecom.ListBase.ANI_DIRECTION_TOP2BOTTOM, 0, Cubic.easeOut);

            this._listContainer.resize(pt.stageWidth, pt.stageHeight - this._itemEdge);

            var y = (pt.stageHeight - this._currentListContentHeight) >> 1;
            TweenMax.to(this._hscroller, this.tweenTime * 1.2, {y:y, ease:Quart.easeOut,
                onComplete:Delegate.create(this, this._onAniComplete)});

            pinetreecom.DelayCaller.delayAfterFrames(this, this.onClickThumbnail, 1, [0]);
        }
    }

    p._onAniComplete = function()
    {
        this._isTweening = false;
        this.redraw();
        this.enabled = true;

        pt.controlBtns.listen(this);

        this.ON_CHANGE.dispatch(0);

        if(this._hscroller)
        {
            this._hscroller.tweenScrollerAlpha(1, this.tweenTime / 2);
        }

        if(this._buttonList)
        {
            this._buttonList.show();
        }
    }

    p.transitionOut = function(callback)
    {
        this._isInited = false;
        this.enabled = false;

        pt.controlBtns.cancel(this);
        pt.controlBtns.hide();

        pinetreecom.DelayCaller.removeByOwner(this);

        if(this._buttonList)
            this._buttonList.hide();

        if(pinetree.isDevice)
        {
            TweenMax.to(this._container, this.tweenTime / 2, {alpha:0, ease:Quad.easeOut,
                onComplete:callback});
        }
        else
        {
            TweenMax.to(this._hscroller, this.tweenTime, {y: pt.stageHeight + 50, ease:Quart.easeIn,
                onComplete:callback});
        }
    }

    p.predispose = function()
    {
        if(this._isInited)
        {
            this.transitionOut(Delegate.create(this, this.dispose));
        }
        else
        {
            this.dispose();
        }
    }

    p.dispose = function()
    {
        pt.dragPrevNext.remove();
        this.facade.$.listUI = null;
        pinetreepages.TeamBase.prototype.dispose.call(this);
    }

    pinetreepages.TeamList = TeamList;
})();

/**
 * Created by foreverpinetree@gmail.com on 14-11-11.
 */
(function()
{
    var GridAniThumbnail = function(w, h, fgColor, bgColor,
                                    useLoading, loadingClass, needTween, tweenType, autoResetRealSize)
    {
        pinetreecom.Thumbnail.call(this, w, h, fgColor, bgColor,
            useLoading, loadingClass, needTween, tweenType, autoResetRealSize);

        this._animation = new pinetreecom.GridAnimation(pt.config.animationColumn, pt.config.animationRow);
        this._animation.visible = false;
        this._animation.tweenTime = 0.5;
        this._animation.ON_TWEEN_IN_COMPLETE.add(this, this._onAniInComplete);
        this._animation.ON_TWEEN_OUT_COMPLETE.add(this, this._onAniOutComplete);
        this.addChild(this._animation);

        this._tweenInSize = 0;

        this.ON_ANIMATION_IN_COMPLETE = new pinetree.Signal();
        this.ON_ANIMATION_OUT_COMPLETE = new pinetree.Signal();
    }

    var p = __extends(GridAniThumbnail, pinetreecom.Thumbnail);

    p.onLoadComplete = function(e)
    {
        this._loader.visible = false;

        pinetreecom.Thumbnail.prototype.onLoadComplete.call(this, e);
    }

    p.show = function(callback)
    {
        this._tweenInSize = this.imageWidth;

        var scale = this.imageWidth / this._loader.originWidth;
        this._animation.initWith(this._loader.getImageElement(), scale, 0);

        this._animation.visible = true;
        this._animation.tweenIn(callback);
    }

    p.hide = function(callback)
    {
        if(this.imageWidth != this._tweenInSize)
        {
            var scale = this.imageWidth / this._loader.originWidth;
            this._animation.initWith(this._loader.getImageElement(), scale, 1);
        }

        this._animation.visible = true;
        this._animation.tweenOut(callback);

        this._loader.visible = false;

        this._tweenInSize = 0;
    }

    p._onAniInComplete = function()
    {
        this._loader.visible = true;
        this._animation.visible = false;
        this.ON_ANIMATION_IN_COMPLETE.dispatch();
    }

    p._onAniOutComplete = function()
    {
        this.ON_ANIMATION_IN_COMPLETE.dispatch();
    }

    p.reset = function()
    {
        pinetreecom.Thumbnail.prototype.reset.call(this);
        this._animation.reset();
    }

    p.dispose = function()
    {
        this._animation && this._animation.dispose();
        this._animation = null;

        this.ON_ANIMATION_IN_COMPLETE && this.ON_ANIMATION_IN_COMPLETE.dispose();
        this.ON_ANIMATION_IN_COMPLETE = null;

        this.ON_ANIMATION_OUT_COMPLETE && this.ON_ANIMATION_OUT_COMPLETE.dispose();
        this.ON_ANIMATION_OUT_COMPLETE = null;
        
        pinetreecom.Thumbnail.prototype.dispose.call(this);
    }

    pinetreepages.GridAniThumbnail = GridAniThumbnail;
}());

/**
 * Created by foreverpinetree@gmail.com on 14-11-29.
 */
(function()
{
    var TextListItemRender = function()
    {
        this._txt = null;
    }

    var p = __extends(TextListItemRender, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._txt = new pinetree.TextField();
            this._txt.fontSize = 14;
            this.addChild(this._txt);
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    pinetreepages.TextListItemRender = TextListItemRender;
}());

/**
 * Created by foreverpinetree@gmail.com on 2014/12/1.
 */
(function()
{
    var HomeThumbContainer = function(size, gap, datas, duration)
    {
        pinetree.Sprite.call(this);

        this._thumbWidth = size;
        this._thumbHeight = size;
        this._thumbGap = gap;
        this._datas = datas;

        this._currentIndex = 0;
        this._totalCount = this._datas.length;

        this._data = null;
        this._dataCount = 0;

        this._loadedIndex = 0;
        this._loadCount = 0;

        this._rowColumn = 3;

        this._thumbContainer = null;

        this._prevThumbs = [];
        this._currentThumbs = [];

        this._isLoading = false;
        this._isTweening = false;

        this._duration = __defaultSet(duration, 3.0);

        this.tweenTime = 1.0;
        this.transition = Quad.easeInOut;

        var cornerSize = size * 1.414;
        var cornerGap = gap * 1.414;

        var bigSize = size * 2 + gap;
        this._ALIGN_CONST = [
            {align:[1], size:[bigSize], offset:bigSize / 4 + gap / 4},
            {align:[2,4], size:[size, size], offset:bigSize / 4 + gap / 4},
            {align:[1,4,5], size:[size, size, size], offset:size / 4 + gap / 4},
            {align:[1,2,4,5], size:[size, size, size, size], offset:size / 2 + gap / 2},
            {align:[0,5,6,7,8], size:[bigSize, size, size, size, size], offset:- size / 4 - gap / 4},
            {align:[0,1,2,4,5,8], size:[size, size, size, size, size, size], offset:size / 2 + gap / 2},
            {align:[0,1,2,3,5,7,8], size:[size, size, size, size, size, size, size], offset:size / 4 + gap / 4},
            {align:[0,1,2,3,4,5,7,8], size:[size, size, size, size, size, size, size, size], offset:size / 4 + gap / 4},
            {align:[0,1,2,3,4,5,6,7,8], size:[size, size, size, size, size, size, size, size, size], offset:0}
        ];
    }

    var p = __extends(HomeThumbContainer, pinetree.Sprite);

    p.addedToStage = function()
    {
        if(!this.isInitialized)
        {
            this._initUI();
        }
        pinetree.Sprite.prototype.addedToStage.call(this);
    }

    p._initUI = function()
    {
        this._thumbContainer = new pinetree.Sprite();
        this.addChild(this._thumbContainer);
        this._thumbContainer.x = -((this._thumbWidth + this._thumbGap) * this._rowColumn - this._thumbGap) >> 1;
        this._thumbContainer.y = -((this._thumbHeight + this._thumbGap) * this._rowColumn - this._thumbGap) >> 1;

        this.update(this._currentIndex);
    }

    p.prev = function()
    {
        if(this._totalCount <= 1) return;
        if(this._isLoading || this._isTweening) return;

        this._currentIndex --;
        if(this._currentIndex < 0)
        {
            this._currentIndex = this._totalCount - 1;
        }

        this.update(this._currentIndex);
    }

    p.next = function()
    {
        if(this._totalCount <= 1) return;
        if(this._isLoading || this._isTweening) return;

        this._currentIndex ++;
        if(this._currentIndex >= this._totalCount)
        {
            this._currentIndex = 0;
        }

        this.update(this._currentIndex);
    }

    p._runTimer = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);
        pinetreecom.DelayCaller.delayCall(this, this.next, this._duration);
    }

    p.update = function(index)
    {
        if(this._isLoading) return;

        if(index >= this._totalCount) return;

        this._data = this._datas[index];
        this._dataCount = this._data.length;
        if(this._dataCount > 9)
        {
            this._dataCount = 9;
        }

        this._alignObj = this._ALIGN_CONST[this._dataCount - 1];
        var offset = this._alignObj.offset;

        this._loadedIndex = 0;
        this._loadCount = this._dataCount;

        if(this._prevThumbs.length > 0)
        {
            for(var key in this._prevThumbs)
            {
                this._prevThumbs[key] && this._prevThumbs[key].dispose();
            }
            this._prevThumbs.splice(0, this._prevThumbs.length);
        }

        this._prevThumbs = this._currentThumbs.concat();
        this._currentThumbs.splice(0, this._currentThumbs.length);

        var thumb, w, h, x, y;
        for(var i = 0; i < this._dataCount; i ++)
        {
            x = Math.floor(this._alignObj.align[i] % this._rowColumn) * (this._thumbWidth + this._thumbGap);
            y = Math.floor(this._alignObj.align[i] / this._rowColumn) * (this._thumbHeight + this._thumbGap);
            w = Math.floor(this._alignObj.size[i]);
            h = Math.floor(this._alignObj.size[i]);
            thumb = new pinetreecom.Thumbnail(w, h, 0, pt.bgColor, false, null, true);
            thumb.visible = false;
            thumb.scale = 0;
            thumb.x = x - offset;
            thumb.y = y + offset;
            this._thumbContainer.addChild(thumb);
            thumb.addEventListener(pinetree.MouseEvent.ROLL_OVER, this._onOver, this);
            thumb.addEventListener(pinetree.MouseEvent.ROLL_OUT, this._onOut, this);
            thumb.addEventListener(pinetree.MouseEvent.CLICK, this._onClick, this);
            thumb.ON_LOAD_COMPLETE.add(this, this._onLoadThumbComplete);
            thumb.index = i;

            thumb.load(this._data[i]);

            this._currentThumbs.push(thumb);
        }

        this._isLoading = true;
    }

    p._onLoadThumbComplete = function(thumb)
    {
        thumb.setRealFitSize(thumb.imageWidth, thumb.imageHeight);
        this._loadedIndex ++;
        if(this._loadedIndex == this._loadCount)
        {
            this._isLoading = false;
            this._tween();
        }
    }

    p._tween = function()
    {
        var thumb, i, len = this._prevThumbs.length;
        if(len > 0)
        {
            for(i = 0; i < len; i ++)
            {
                thumb = this._prevThumbs[i];
                if(thumb)
                {
                    TweenMax.to(thumb, this.tweenTime - 0.1, {scale:0, ease:this.transition,
                        onComplete:this._onHideComplete, onCompleteParams:[this, thumb, i, len - 1]});
                }
            }
            this._prevThumbs.splice(0, len);
        }

        len = this._currentThumbs.length;
        if(len > 0)
        {
            for(i = 0; i < len; i ++)
            {
                thumb = this._currentThumbs[i];
                thumb.scale = 0;
                thumb.visible = true;
                if(thumb)
                {
                    TweenMax.to(thumb, this.tweenTime, {scale:1, ease:this.transition,
                        onComplete:this._onShowComplete, onCompleteParams:[this, thumb, i, len - 1]});
                }
            }
        }

        this._isTweening = true;
    }

    p._onHideComplete = function(owner, thumb, tweenStartIndex, tweenEndIndex)
    {
        if(thumb)
        {
            thumb.visible = false;
            thumb.removeFromParent(true);
        }
    }

    p._onShowComplete = function(owner, thumb, tweenStartIndex, tweenEndIndex)
    {
        if(tweenStartIndex == tweenEndIndex)
        {
            owner._isTweening = false;
            owner._runTimer();
        }
    }

    p._onOver = function(evt)
    {
        var thumb = evt.customTarget;
        var index = thumb.index;
        var link = this._data[index].link;
    }

    p._onOut = function(evt)
    {
        var thumb = evt.customTarget;
        var index = thumb.index;
        var link = this._data[index].link;
    }

    p._onClick = function(evt)
    {
        var thumb = evt.customTarget;
        var index = thumb.index;
        var link = this._data[index].link;
    }

    p.dispose = function()
    {
        pinetreecom.DelayCaller.removeByOwner(this);

        var key;
        if(this._prevThumbs && this._prevThumbs.length > 0)
        {
            for(key in this._prevThumbs)
            {
                this._prevThumbs[key] && this._prevThumbs[key].dispose();
            }
            this._prevThumbs.splice(0, this._prevThumbs.length);
            this._prevThumbs = null;
        }

        if(this._currentThumbs && this._currentThumbs.length > 0)
        {
            for(key in this._currentThumbs)
            {
                this._currentThumbs[key] && this._currentThumbs[key].dispose();
            }
            this._currentThumbs.splice(0, this._currentThumbs.length);
            this._currentThumbs = null;
        }

        pinetree.Sprite.prototype.dispose.call(this);
    }

    pinetreepages.HomeThumbContainer = HomeThumbContainer;
}());